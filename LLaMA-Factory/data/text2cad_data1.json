[
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个169mm长、21mm宽、197mm高的长方体，绕轴(-0.07, 0.62, 0.25)旋转248度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 169\nbox.Width = 21\nbox.Height = 197\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.07, 0.62, 0.25), 248)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个53mm长、125mm宽、147mm高的长方体，位置在坐标(90, 82, 1)，绕轴(0.00, 0.31, -0.81)旋转80度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 53\nbox.Width = 125\nbox.Height = 147\nbox.Placement.Base = FreeCAD.Vector(90, 82, 1)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.00, 0.31, -0.81), 80)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个34mm长、172mm宽、121mm高的长方体，位置在坐标(100, -86, 80)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 34\nbox.Width = 172\nbox.Height = 121\nbox.Placement.Base = FreeCAD.Vector(100, -86, 80)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个116mm长、103mm宽、21mm高的长方体，绕轴(-0.25, 0.59, -0.22)旋转293度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 116\nbox.Width = 103\nbox.Height = 21\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.25, 0.59, -0.22), 293)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个75mm长、151mm宽、30mm高的长方体，位置在坐标(-44, -55, -75)，绕轴(-0.52, 0.59, -0.00)旋转297度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 75\nbox.Width = 151\nbox.Height = 30\nbox.Placement.Base = FreeCAD.Vector(-44, -55, -75)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.52, 0.59, -0.00), 297)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个99mm长、18mm宽、177mm高的长方体，位置在坐标(3, -43, -35)，绕轴(0.11, -0.25, 0.58)旋转216度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 99\nbox.Width = 18\nbox.Height = 177\nbox.Placement.Base = FreeCAD.Vector(3, -43, -35)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.11, -0.25, 0.58), 216)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个18mm长、142mm宽、196mm高的长方体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 18\nbox.Width = 142\nbox.Height = 196\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个184mm长、180mm宽、151mm高的长方体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 184\nbox.Width = 180\nbox.Height = 151\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个84mm长、57mm宽、160mm高的长方体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 84\nbox.Width = 57\nbox.Height = 160\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个57mm长、20mm宽、151mm高的长方体，位置在坐标(-86, 45, -100)，绕轴(-0.92, 0.66, -0.71)旋转227度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 57\nbox.Width = 20\nbox.Height = 151\nbox.Placement.Base = FreeCAD.Vector(-86, 45, -100)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.92, 0.66, -0.71), 227)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个97mm长、105mm宽、180mm高的长方体，位置在坐标(-76, 62, -72)，绕轴(-0.01, 0.27, 0.32)旋转50度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 97\nbox.Width = 105\nbox.Height = 180\nbox.Placement.Base = FreeCAD.Vector(-76, 62, -72)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.01, 0.27, 0.32), 50)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个162mm长、148mm宽、71mm高的长方体，位置在坐标(-41, -96, 1)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 162\nbox.Width = 148\nbox.Height = 71\nbox.Placement.Base = FreeCAD.Vector(-41, -96, 1)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个51mm长、145mm宽、108mm高的长方体，位置在坐标(10, -1, -42)，绕轴(0.12, -0.74, -0.45)旋转235度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 51\nbox.Width = 145\nbox.Height = 108\nbox.Placement.Base = FreeCAD.Vector(10, -1, -42)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.12, -0.74, -0.45), 235)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个164mm长、37mm宽、177mm高的长方体，位置在坐标(0, -73, 92)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 164\nbox.Width = 37\nbox.Height = 177\nbox.Placement.Base = FreeCAD.Vector(0, -73, 92)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个121mm长、69mm宽、176mm高的长方体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 121\nbox.Width = 69\nbox.Height = 176\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个81mm长、44mm宽、178mm高的长方体，位置在坐标(-24, 93, 16)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 81\nbox.Width = 44\nbox.Height = 178\nbox.Placement.Base = FreeCAD.Vector(-24, 93, 16)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个11mm长、46mm宽、59mm高的长方体，绕轴(-0.32, 0.40, 0.15)旋转24度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 11\nbox.Width = 46\nbox.Height = 59\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.32, 0.40, 0.15), 24)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个36mm长、196mm宽、32mm高的长方体，位置在坐标(39, -21, 81)，绕轴(0.31, 0.07, -0.53)旋转331度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 36\nbox.Width = 196\nbox.Height = 32\nbox.Placement.Base = FreeCAD.Vector(39, -21, 81)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.31, 0.07, -0.53), 331)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个152mm长、85mm宽、158mm高的长方体，绕轴(-0.11, -0.96, -0.64)旋转258度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 152\nbox.Width = 85\nbox.Height = 158\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.11, -0.96, -0.64), 258)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个58mm长、132mm宽、65mm高的长方体，位置在坐标(-1, 71, 37)，绕轴(-0.35, -0.20, -0.90)旋转69度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 58\nbox.Width = 132\nbox.Height = 65\nbox.Placement.Base = FreeCAD.Vector(-1, 71, 37)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.35, -0.20, -0.90), 69)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个80mm长、108mm宽、131mm高的长方体，位置在坐标(-21, 40, 88)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 80\nbox.Width = 108\nbox.Height = 131\nbox.Placement.Base = FreeCAD.Vector(-21, 40, 88)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个153mm长、99mm宽、186mm高的长方体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 153\nbox.Width = 99\nbox.Height = 186\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个53mm长、114mm宽、17mm高的长方体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 53\nbox.Width = 114\nbox.Height = 17\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个20mm长、61mm宽、127mm高的长方体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 20\nbox.Width = 61\nbox.Height = 127\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个104mm长、181mm宽、15mm高的长方体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 104\nbox.Width = 181\nbox.Height = 15\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个142mm长、16mm宽、15mm高的长方体，位置在坐标(67, 86, -84)，绕轴(-0.31, 0.37, 0.66)旋转311度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 142\nbox.Width = 16\nbox.Height = 15\nbox.Placement.Base = FreeCAD.Vector(67, 86, -84)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.31, 0.37, 0.66), 311)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个123mm长、70mm宽、95mm高的长方体，位置在坐标(13, -86, 100)，绕轴(-0.11, 0.68, 0.77)旋转304度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 123\nbox.Width = 70\nbox.Height = 95\nbox.Placement.Base = FreeCAD.Vector(13, -86, 100)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.11, 0.68, 0.77), 304)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个179mm长、12mm宽、200mm高的长方体，位置在坐标(58, 62, -62)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 179\nbox.Width = 12\nbox.Height = 200\nbox.Placement.Base = FreeCAD.Vector(58, 62, -62)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个87mm长、131mm宽、162mm高的长方体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 87\nbox.Width = 131\nbox.Height = 162\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个59mm长、177mm宽、27mm高的长方体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 59\nbox.Width = 177\nbox.Height = 27\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个153mm长、35mm宽、76mm高的长方体，位置在坐标(-43, 63, -98)，绕轴(0.20, 0.42, -0.12)旋转111度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 153\nbox.Width = 35\nbox.Height = 76\nbox.Placement.Base = FreeCAD.Vector(-43, 63, -98)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.20, 0.42, -0.12), 111)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个125mm长、114mm宽、34mm高的长方体，位置在坐标(94, -37, 0)，绕轴(0.35, -0.46, -0.67)旋转197度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 125\nbox.Width = 114\nbox.Height = 34\nbox.Placement.Base = FreeCAD.Vector(94, -37, 0)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.35, -0.46, -0.67), 197)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个117mm长、116mm宽、46mm高的长方体，绕轴(-0.28, -1.00, 0.71)旋转244度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 117\nbox.Width = 116\nbox.Height = 46\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.28, -1.00, 0.71), 244)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个135mm长、16mm宽、192mm高的长方体，位置在坐标(63, 38, 30)，绕轴(-0.68, -0.39, 0.85)旋转352度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 135\nbox.Width = 16\nbox.Height = 192\nbox.Placement.Base = FreeCAD.Vector(63, 38, 30)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.68, -0.39, 0.85), 352)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个132mm长、151mm宽、172mm高的长方体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 132\nbox.Width = 151\nbox.Height = 172\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个137mm长、48mm宽、25mm高的长方体，位置在坐标(-83, 8, -70)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 137\nbox.Width = 48\nbox.Height = 25\nbox.Placement.Base = FreeCAD.Vector(-83, 8, -70)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个100mm长、62mm宽、94mm高的长方体，位置在坐标(-7, 95, -89)，绕轴(0.08, 0.13, 0.92)旋转169度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 100\nbox.Width = 62\nbox.Height = 94\nbox.Placement.Base = FreeCAD.Vector(-7, 95, -89)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.08, 0.13, 0.92), 169)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个43mm长、103mm宽、106mm高的长方体，位置在坐标(-17, -7, -42)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 43\nbox.Width = 103\nbox.Height = 106\nbox.Placement.Base = FreeCAD.Vector(-17, -7, -42)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个47mm长、175mm宽、186mm高的长方体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 47\nbox.Width = 175\nbox.Height = 186\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个199mm长、197mm宽、34mm高的长方体，位置在坐标(74, -7, -42)，绕轴(-0.75, -0.87, -0.75)旋转341度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 199\nbox.Width = 197\nbox.Height = 34\nbox.Placement.Base = FreeCAD.Vector(74, -7, -42)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.75, -0.87, -0.75), 341)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个30mm长、40mm宽、10mm高的长方体，绕轴(-0.34, -0.85, -0.23)旋转175度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 30\nbox.Width = 40\nbox.Height = 10\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.34, -0.85, -0.23), 175)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个134mm长、85mm宽、20mm高的长方体，位置在坐标(-28, 86, -41)，绕轴(-0.80, 0.22, -0.08)旋转218度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 134\nbox.Width = 85\nbox.Height = 20\nbox.Placement.Base = FreeCAD.Vector(-28, 86, -41)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.80, 0.22, -0.08), 218)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个195mm长、188mm宽、55mm高的长方体，位置在坐标(-76, -11, -12)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 195\nbox.Width = 188\nbox.Height = 55\nbox.Placement.Base = FreeCAD.Vector(-76, -11, -12)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个39mm长、95mm宽、131mm高的长方体，位置在坐标(-81, 77, 50)，绕轴(-0.25, 0.01, 0.62)旋转133度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 39\nbox.Width = 95\nbox.Height = 131\nbox.Placement.Base = FreeCAD.Vector(-81, 77, 50)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.25, 0.01, 0.62), 133)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个160mm长、37mm宽、82mm高的长方体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 160\nbox.Width = 37\nbox.Height = 82\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个141mm长、125mm宽、168mm高的长方体，位置在坐标(60, 49, 5)，绕轴(-0.28, -0.71, 0.45)旋转60度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 141\nbox.Width = 125\nbox.Height = 168\nbox.Placement.Base = FreeCAD.Vector(60, 49, 5)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.28, -0.71, 0.45), 60)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个122mm长、187mm宽、186mm高的长方体，位置在坐标(-78, -23, 3)，绕轴(0.32, -0.71, -0.87)旋转300度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 122\nbox.Width = 187\nbox.Height = 186\nbox.Placement.Base = FreeCAD.Vector(-78, -23, 3)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.32, -0.71, -0.87), 300)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个67mm长、131mm宽、31mm高的长方体，位置在坐标(-69, -11, -12)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 67\nbox.Width = 131\nbox.Height = 31\nbox.Placement.Base = FreeCAD.Vector(-69, -11, -12)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个22mm长、53mm宽、137mm高的长方体，位置在坐标(77, 43, 38)，绕轴(0.49, -0.40, 0.72)旋转315度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 22\nbox.Width = 53\nbox.Height = 137\nbox.Placement.Base = FreeCAD.Vector(77, 43, 38)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.49, -0.40, 0.72), 315)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个47mm长、159mm宽、22mm高的长方体，位置在坐标(-46, 25, 73)，绕轴(-0.35, 0.64, 0.56)旋转279度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 47\nbox.Width = 159\nbox.Height = 22\nbox.Placement.Base = FreeCAD.Vector(-46, 25, 73)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.35, 0.64, 0.56), 279)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个97mm长、106mm宽、74mm高的长方体，位置在坐标(36, 31, -61)，绕轴(-0.50, -0.75, -0.42)旋转9度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 97\nbox.Width = 106\nbox.Height = 74\nbox.Placement.Base = FreeCAD.Vector(36, 31, -61)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.50, -0.75, -0.42), 9)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个86mm长、174mm宽、127mm高的长方体，位置在坐标(-28, -97, 7)，绕轴(0.63, -0.76, -0.30)旋转36度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 86\nbox.Width = 174\nbox.Height = 127\nbox.Placement.Base = FreeCAD.Vector(-28, -97, 7)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.63, -0.76, -0.30), 36)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个192mm长、188mm宽、149mm高的长方体，绕轴(0.57, -0.51, -0.62)旋转203度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 192\nbox.Width = 188\nbox.Height = 149\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.57, -0.51, -0.62), 203)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个23mm长、17mm宽、16mm高的长方体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 23\nbox.Width = 17\nbox.Height = 16\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个12mm长、135mm宽、47mm高的长方体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 12\nbox.Width = 135\nbox.Height = 47\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个115mm长、46mm宽、35mm高的长方体，位置在坐标(-44, -56, 57)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 115\nbox.Width = 46\nbox.Height = 35\nbox.Placement.Base = FreeCAD.Vector(-44, -56, 57)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个82mm长、184mm宽、63mm高的长方体，位置在坐标(68, 63, 71)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 82\nbox.Width = 184\nbox.Height = 63\nbox.Placement.Base = FreeCAD.Vector(68, 63, 71)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个54mm长、30mm宽、184mm高的长方体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 54\nbox.Width = 30\nbox.Height = 184\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个79mm长、120mm宽、128mm高的长方体，位置在坐标(-47, 40, -90)，绕轴(-0.08, 0.86, 0.28)旋转98度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 79\nbox.Width = 120\nbox.Height = 128\nbox.Placement.Base = FreeCAD.Vector(-47, 40, -90)\nbox.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.08, 0.86, 0.28), 98)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个11mm长、192mm宽、164mm高的长方体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 11\nbox.Width = 192\nbox.Height = 164\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个19mm半径、20mm高的圆柱体，位置在坐标(79, -36, -54)，绕轴(0.98, -0.93, 0.43)旋转332度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 19\ncylinder.Height = 20\ncylinder.Placement.Base = FreeCAD.Vector(79, -36, -54)\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.98, -0.93, 0.43), 332)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个108mm直径、29mm高的圆柱体，位置在坐标(85, 46, -43)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 54\ncylinder.Height = 29\ncylinder.Placement.Base = FreeCAD.Vector(85, 46, -43)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个56mm直径、35mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 28\ncylinder.Height = 35\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个88mm半径、21mm高的圆柱体，位置在坐标(45, 7, -16)，绕轴(-0.21, -0.61, 0.08)旋转340度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 88\ncylinder.Height = 21\ncylinder.Placement.Base = FreeCAD.Vector(45, 7, -16)\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.21, -0.61, 0.08), 340)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个62mm半径、115mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 62\ncylinder.Height = 115\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个178mm直径、19mm高的圆柱体，位置在坐标(-30, 87, 44)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 89\ncylinder.Height = 19\ncylinder.Placement.Base = FreeCAD.Vector(-30, 87, 44)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个93mm半径、39mm高的圆柱体，位置在坐标(36, 24, -42)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 93\ncylinder.Height = 39\ncylinder.Placement.Base = FreeCAD.Vector(36, 24, -42)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个50mm半径、39mm高的圆柱体，位置在坐标(-12, 39, -4)，绕轴(-0.45, 0.64, 0.87)旋转175度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 50\ncylinder.Height = 39\ncylinder.Placement.Base = FreeCAD.Vector(-12, 39, -4)\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.45, 0.64, 0.87), 175)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个76mm半径、102mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 76\ncylinder.Height = 102\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个11mm半径、59mm高的圆柱体，位置在坐标(-27, 36, 5)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 11\ncylinder.Height = 59\ncylinder.Placement.Base = FreeCAD.Vector(-27, 36, 5)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个16mm直径、25mm高的圆柱体，绕轴(0.03, -0.98, -0.91)旋转100度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 8\ncylinder.Height = 25\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.03, -0.98, -0.91), 100)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个106mm直径、112mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 53\ncylinder.Height = 112\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个70mm半径、133mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 70\ncylinder.Height = 133\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个11mm半径、72mm高的圆柱体，位置在坐标(-82, 63, 15)，绕轴(0.23, 0.92, -0.92)旋转358度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 11\ncylinder.Height = 72\ncylinder.Placement.Base = FreeCAD.Vector(-82, 63, 15)\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.23, 0.92, -0.92), 358)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个46mm半径、96mm高的圆柱体，绕轴(-0.68, 0.84, -0.19)旋转40度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 46\ncylinder.Height = 96\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.68, 0.84, -0.19), 40)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个89mm半径、34mm高的圆柱体，位置在坐标(-47, 100, 58)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 89\ncylinder.Height = 34\ncylinder.Placement.Base = FreeCAD.Vector(-47, 100, 58)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个26mm半径、52mm高的圆柱体，绕轴(0.14, -0.49, -0.43)旋转214度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 26\ncylinder.Height = 52\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.14, -0.49, -0.43), 214)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个34mm半径、40mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 34\ncylinder.Height = 40\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个186mm直径、154mm高的圆柱体，绕轴(0.43, 0.28, 0.85)旋转162度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 93\ncylinder.Height = 154\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.43, 0.28, 0.85), 162)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个42mm直径、75mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 21\ncylinder.Height = 75\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个48mm直径、104mm高的圆柱体，位置在坐标(53, -53, 50)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 24\ncylinder.Height = 104\ncylinder.Placement.Base = FreeCAD.Vector(53, -53, 50)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个20mm直径、73mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 10\ncylinder.Height = 73\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个41mm半径、75mm高的圆柱体，绕轴(-0.37, -0.52, -0.72)旋转128度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 41\ncylinder.Height = 75\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.37, -0.52, -0.72), 128)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个8mm半径、148mm高的圆柱体，位置在坐标(10, 66, 72)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 8\ncylinder.Height = 148\ncylinder.Placement.Base = FreeCAD.Vector(10, 66, 72)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个86mm直径、111mm高的圆柱体，位置在坐标(15, -77, 59)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 43\ncylinder.Height = 111\ncylinder.Placement.Base = FreeCAD.Vector(15, -77, 59)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个30mm直径、183mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 15\ncylinder.Height = 183\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个182mm直径、160mm高的圆柱体，位置在坐标(5, 41, 81)，绕轴(0.66, -0.54, -0.90)旋转71度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 91\ncylinder.Height = 160\ncylinder.Placement.Base = FreeCAD.Vector(5, 41, 81)\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.66, -0.54, -0.90), 71)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个25mm半径、115mm高的圆柱体，绕轴(0.10, -0.20, -0.41)旋转301度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 25\ncylinder.Height = 115\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.10, -0.20, -0.41), 301)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个184mm直径、52mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 92\ncylinder.Height = 52\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个29mm半径、194mm高的圆柱体，位置在坐标(69, 27, -75)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 29\ncylinder.Height = 194\ncylinder.Placement.Base = FreeCAD.Vector(69, 27, -75)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个29mm半径、37mm高的圆柱体，位置在坐标(39, -57, 52)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 29\ncylinder.Height = 37\ncylinder.Placement.Base = FreeCAD.Vector(39, -57, 52)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个56mm直径、139mm高的圆柱体，位置在坐标(46, 69, 37)，绕轴(-0.04, 0.97, -0.65)旋转43度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 28\ncylinder.Height = 139\ncylinder.Placement.Base = FreeCAD.Vector(46, 69, 37)\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.04, 0.97, -0.65), 43)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个65mm半径、68mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 65\ncylinder.Height = 68\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个89mm半径、108mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 89\ncylinder.Height = 108\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个154mm直径、178mm高的圆柱体，绕轴(0.40, 0.82, -0.88)旋转121度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 77\ncylinder.Height = 178\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.40, 0.82, -0.88), 121)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个85mm半径、21mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 85\ncylinder.Height = 21\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个186mm直径、196mm高的圆柱体，位置在坐标(-18, 83, -7)，绕轴(-0.43, -0.53, -0.62)旋转334度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 93\ncylinder.Height = 196\ncylinder.Placement.Base = FreeCAD.Vector(-18, 83, -7)\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.43, -0.53, -0.62), 334)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个98mm直径、119mm高的圆柱体，绕轴(0.49, 0.44, 0.77)旋转348度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 49\ncylinder.Height = 119\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.49, 0.44, 0.77), 348)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个122mm直径、144mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 61\ncylinder.Height = 144\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个140mm直径、137mm高的圆柱体，位置在坐标(30, 24, -38)，绕轴(0.93, 0.37, 0.53)旋转334度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 70\ncylinder.Height = 137\ncylinder.Placement.Base = FreeCAD.Vector(30, 24, -38)\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.93, 0.37, 0.53), 334)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个178mm直径、35mm高的圆柱体，位置在坐标(90, -35, -73)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 89\ncylinder.Height = 35\ncylinder.Placement.Base = FreeCAD.Vector(90, -35, -73)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个98mm半径、190mm高的圆柱体，绕轴(0.63, 0.33, -0.73)旋转187度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 98\ncylinder.Height = 190\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.63, 0.33, -0.73), 187)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个23mm半径、172mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 23\ncylinder.Height = 172\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个94mm直径、151mm高的圆柱体，绕轴(0.41, -0.93, -0.94)旋转186度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 47\ncylinder.Height = 151\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.41, -0.93, -0.94), 186)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个16mm直径、192mm高的圆柱体，位置在坐标(27, 96, -86)，绕轴(-0.03, 0.34, 0.19)旋转60度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 8\ncylinder.Height = 192\ncylinder.Placement.Base = FreeCAD.Vector(27, 96, -86)\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.03, 0.34, 0.19), 60)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个194mm直径、149mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 97\ncylinder.Height = 149\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个63mm半径、16mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 63\ncylinder.Height = 16\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个14mm半径、26mm高的圆柱体，绕轴(0.94, -0.52, 0.72)旋转1度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 14\ncylinder.Height = 26\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.94, -0.52, 0.72), 1)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个94mm半径、158mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 94\ncylinder.Height = 158\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个58mm半径、193mm高的圆柱体，绕轴(0.94, -0.46, -0.37)旋转149度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 58\ncylinder.Height = 193\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.94, -0.46, -0.37), 149)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个58mm半径、80mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 58\ncylinder.Height = 80\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个35mm半径、184mm高的圆柱体，绕轴(0.68, -0.98, 0.67)旋转280度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 35\ncylinder.Height = 184\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.68, -0.98, 0.67), 280)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个110mm直径、15mm高的圆柱体，位置在坐标(0, 55, 34)，绕轴(-0.40, -0.64, -0.88)旋转186度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 55\ncylinder.Height = 15\ncylinder.Placement.Base = FreeCAD.Vector(0, 55, 34)\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.40, -0.64, -0.88), 186)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个194mm直径、31mm高的圆柱体，位置在坐标(12, 4, -43)，绕轴(0.54, -0.54, -0.51)旋转318度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 97\ncylinder.Height = 31\ncylinder.Placement.Base = FreeCAD.Vector(12, 4, -43)\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.54, -0.54, -0.51), 318)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个38mm半径、160mm高的圆柱体，位置在坐标(-41, -33, 98)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 38\ncylinder.Height = 160\ncylinder.Placement.Base = FreeCAD.Vector(-41, -33, 98)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个70mm半径、164mm高的圆柱体，位置在坐标(59, -21, -79)，绕轴(0.19, -0.90, 0.81)旋转356度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 70\ncylinder.Height = 164\ncylinder.Placement.Base = FreeCAD.Vector(59, -21, -79)\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.19, -0.90, 0.81), 356)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个22mm半径、140mm高的圆柱体，位置在坐标(27, 32, 11)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 22\ncylinder.Height = 140\ncylinder.Placement.Base = FreeCAD.Vector(27, 32, 11)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个180mm直径、87mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 90\ncylinder.Height = 87\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个134mm直径、128mm高的圆柱体，绕轴(0.92, -0.09, -0.26)旋转265度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 67\ncylinder.Height = 128\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.92, -0.09, -0.26), 265)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个194mm直径、80mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 97\ncylinder.Height = 80\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个44mm底面半径、98mm高的圆锥体，绕轴(0.44, 0.43, -0.28)旋转310度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 44\ncone.Radius2 = 0\ncone.Height = 98\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.44, 0.43, -0.28), 310)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径124mm、顶面直径32mm、181mm高的圆台，绕轴(0.60, -0.78, -0.02)旋转333度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 62\ncone.Radius2 = 16\ncone.Height = 181\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.60, -0.78, -0.02), 333)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径88mm、顶面直径30mm、134mm高的圆台，位置在坐标(10, -91, 45)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 44\ncone.Radius2 = 15\ncone.Height = 134\ncone.Placement.Base = FreeCAD.Vector(10, -91, 45)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径46mm、顶面半径14mm、188mm高的圆台，绕轴(-0.14, -0.58, -0.99)旋转169度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 46\ncone.Radius2 = 14\ncone.Height = 188\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.14, -0.58, -0.99), 169)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径76mm、顶面直径34mm、107mm高的圆台。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 38\ncone.Radius2 = 17\ncone.Height = 107\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个14mm底面直径、96mm高的圆锥体，位置在坐标(37, -61, -51)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 7\ncone.Radius2 = 0\ncone.Height = 96\ncone.Placement.Base = FreeCAD.Vector(37, -61, -51)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径194mm、顶面直径120mm、75mm高的圆台，位置在坐标(5, 13, -77)，绕轴(-0.62, -0.40, 0.80)旋转155度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 97\ncone.Radius2 = 60\ncone.Height = 75\ncone.Placement.Base = FreeCAD.Vector(5, 13, -77)\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.62, -0.40, 0.80), 155)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径90mm、顶面半径65mm、150mm高的圆台，位置在坐标(97, -20, 67)，绕轴(0.73, -0.15, 0.10)旋转296度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 90\ncone.Radius2 = 65\ncone.Height = 150\ncone.Placement.Base = FreeCAD.Vector(97, -20, 67)\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.73, -0.15, 0.10), 296)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径74mm、顶面半径37mm、189mm高的圆台，位置在坐标(42, 33, -91)，绕轴(0.53, -0.84, 0.70)旋转253度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 74\ncone.Radius2 = 37\ncone.Height = 189\ncone.Placement.Base = FreeCAD.Vector(42, 33, -91)\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.53, -0.84, 0.70), 253)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径46mm、顶面直径4mm、107mm高的圆台。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 23\ncone.Radius2 = 2\ncone.Height = 107\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径61mm、顶面半径4mm、100mm高的圆台，位置在坐标(-84, -84, 99)，绕轴(0.87, -0.26, 0.61)旋转181度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 61\ncone.Radius2 = 4\ncone.Height = 100\ncone.Placement.Base = FreeCAD.Vector(-84, -84, 99)\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.87, -0.26, 0.61), 181)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径134mm、顶面直径12mm、167mm高的圆台，绕轴(-0.06, 0.97, 0.39)旋转239度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 67\ncone.Radius2 = 6\ncone.Height = 167\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.06, 0.97, 0.39), 239)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径170mm、顶面直径38mm、43mm高的圆台，绕轴(0.39, 0.58, 0.91)旋转332度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 85\ncone.Radius2 = 19\ncone.Height = 43\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.39, 0.58, 0.91), 332)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个168mm底面直径、127mm高的圆锥体，位置在坐标(-63, -3, 47)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 84\ncone.Radius2 = 0\ncone.Height = 127\ncone.Placement.Base = FreeCAD.Vector(-63, -3, 47)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径74mm、顶面半径14mm、51mm高的圆台，位置在坐标(-56, -65, -85)，绕轴(0.58, 0.51, 0.16)旋转28度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 74\ncone.Radius2 = 14\ncone.Height = 51\ncone.Placement.Base = FreeCAD.Vector(-56, -65, -85)\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.58, 0.51, 0.16), 28)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径46mm、顶面半径18mm、180mm高的圆台，位置在坐标(-57, -84, -93)，绕轴(0.71, 0.99, -0.10)旋转332度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 46\ncone.Radius2 = 18\ncone.Height = 180\ncone.Placement.Base = FreeCAD.Vector(-57, -84, -93)\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.71, 0.99, -0.10), 332)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径14mm、顶面直径12mm、42mm高的圆台，绕轴(0.59, 0.96, -0.63)旋转47度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 7\ncone.Radius2 = 6\ncone.Height = 42\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.59, 0.96, -0.63), 47)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径118mm、顶面直径114mm、11mm高的圆台，位置在坐标(23, 52, 49)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 59\ncone.Radius2 = 57\ncone.Height = 11\ncone.Placement.Base = FreeCAD.Vector(23, 52, 49)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径74mm、顶面直径52mm、91mm高的圆台，绕轴(0.66, 0.75, -0.32)旋转260度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 37\ncone.Radius2 = 26\ncone.Height = 91\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.66, 0.75, -0.32), 260)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径30mm、顶面直径26mm、178mm高的圆台。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 15\ncone.Radius2 = 13\ncone.Height = 178\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径27mm、顶面半径16mm、86mm高的圆台，位置在坐标(85, 38, 11)，绕轴(-0.41, -0.37, 0.78)旋转41度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 27\ncone.Radius2 = 16\ncone.Height = 86\ncone.Placement.Base = FreeCAD.Vector(85, 38, 11)\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.41, -0.37, 0.78), 41)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个57mm底面半径、24mm高的圆锥体，绕轴(0.52, 0.43, -0.53)旋转58度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 57\ncone.Radius2 = 0\ncone.Height = 24\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.52, 0.43, -0.53), 58)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径72mm、顶面直径20mm、121mm高的圆台，位置在坐标(37, -78, -28)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 36\ncone.Radius2 = 10\ncone.Height = 121\ncone.Placement.Base = FreeCAD.Vector(37, -78, -28)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径50mm、顶面直径24mm、30mm高的圆台，位置在坐标(74, 29, 83)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 25\ncone.Radius2 = 12\ncone.Height = 30\ncone.Placement.Base = FreeCAD.Vector(74, 29, 83)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个144mm底面直径、164mm高的圆锥体，位置在坐标(5, 39, -94)，绕轴(-0.89, -0.71, 0.80)旋转219度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 72\ncone.Radius2 = 0\ncone.Height = 164\ncone.Placement.Base = FreeCAD.Vector(5, 39, -94)\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.89, -0.71, 0.80), 219)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径96mm、顶面半径61mm、114mm高的圆台，位置在坐标(63, 69, -74)，绕轴(-0.65, -0.31, 0.30)旋转237度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 96\ncone.Radius2 = 61\ncone.Height = 114\ncone.Placement.Base = FreeCAD.Vector(63, 69, -74)\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.65, -0.31, 0.30), 237)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个188mm底面直径、110mm高的圆锥体，位置在坐标(92, -24, 39)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 94\ncone.Radius2 = 0\ncone.Height = 110\ncone.Placement.Base = FreeCAD.Vector(92, -24, 39)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径69mm、顶面半径58mm、102mm高的圆台，位置在坐标(32, -1, -79)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 69\ncone.Radius2 = 58\ncone.Height = 102\ncone.Placement.Base = FreeCAD.Vector(32, -1, -79)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个68mm底面半径、199mm高的圆锥体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 68\ncone.Radius2 = 0\ncone.Height = 199\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个27mm底面半径、38mm高的圆锥体，位置在坐标(-39, 94, 72)，绕轴(0.88, 0.03, -0.24)旋转274度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 27\ncone.Radius2 = 0\ncone.Height = 38\ncone.Placement.Base = FreeCAD.Vector(-39, 94, 72)\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.88, 0.03, -0.24), 274)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径48mm、顶面直径36mm、59mm高的圆台，位置在坐标(-47, 27, 64)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 24\ncone.Radius2 = 18\ncone.Height = 59\ncone.Placement.Base = FreeCAD.Vector(-47, 27, 64)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径19mm、顶面半径14mm、14mm高的圆台。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 19\ncone.Radius2 = 14\ncone.Height = 14\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径114mm、顶面直径54mm、84mm高的圆台，位置在坐标(31, 42, 2)，绕轴(0.14, 0.48, 0.25)旋转59度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 57\ncone.Radius2 = 27\ncone.Height = 84\ncone.Placement.Base = FreeCAD.Vector(31, 42, 2)\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.14, 0.48, 0.25), 59)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径180mm、顶面直径56mm、28mm高的圆台，位置在坐标(19, 9, -41)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 90\ncone.Radius2 = 28\ncone.Height = 28\ncone.Placement.Base = FreeCAD.Vector(19, 9, -41)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径33mm、顶面半径20mm、34mm高的圆台，绕轴(0.54, -0.22, 0.52)旋转290度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 33\ncone.Radius2 = 20\ncone.Height = 34\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.54, -0.22, 0.52), 290)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径21mm、顶面半径18mm、27mm高的圆台。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 21\ncone.Radius2 = 18\ncone.Height = 27\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个126mm底面直径、163mm高的圆锥体，位置在坐标(85, -41, -53)，绕轴(0.75, -0.90, 0.96)旋转342度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 63\ncone.Radius2 = 0\ncone.Height = 163\ncone.Placement.Base = FreeCAD.Vector(85, -41, -53)\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.75, -0.90, 0.96), 342)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径154mm、顶面直径8mm、43mm高的圆台，绕轴(0.83, -0.41, 0.63)旋转251度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 77\ncone.Radius2 = 4\ncone.Height = 43\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.83, -0.41, 0.63), 251)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个48mm底面直径、100mm高的圆锥体，位置在坐标(-73, -5, -64)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 24\ncone.Radius2 = 0\ncone.Height = 100\ncone.Placement.Base = FreeCAD.Vector(-73, -5, -64)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径87mm、顶面半径41mm、13mm高的圆台，位置在坐标(-27, 81, 83)，绕轴(0.63, 0.47, 1.00)旋转220度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 87\ncone.Radius2 = 41\ncone.Height = 13\ncone.Placement.Base = FreeCAD.Vector(-27, 81, 83)\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.63, 0.47, 1.00), 220)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径104mm、顶面直径82mm、27mm高的圆台，绕轴(-0.15, 0.91, -0.29)旋转222度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 52\ncone.Radius2 = 41\ncone.Height = 27\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.15, 0.91, -0.29), 222)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个44mm底面半径、178mm高的圆锥体，位置在坐标(-10, -20, 17)，绕轴(0.72, 0.68, 0.50)旋转47度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 44\ncone.Radius2 = 0\ncone.Height = 178\ncone.Placement.Base = FreeCAD.Vector(-10, -20, 17)\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.72, 0.68, 0.50), 47)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径42mm、顶面直径30mm、39mm高的圆台，位置在坐标(70, 82, -46)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 21\ncone.Radius2 = 15\ncone.Height = 39\ncone.Placement.Base = FreeCAD.Vector(70, 82, -46)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径138mm、顶面直径28mm、28mm高的圆台，位置在坐标(1, 73, 40)，绕轴(-0.94, 0.87, 0.83)旋转258度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 69\ncone.Radius2 = 14\ncone.Height = 28\ncone.Placement.Base = FreeCAD.Vector(1, 73, 40)\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.94, 0.87, 0.83), 258)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个32mm底面半径、93mm高的圆锥体，绕轴(0.09, -0.75, 0.58)旋转76度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 32\ncone.Radius2 = 0\ncone.Height = 93\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.09, -0.75, 0.58), 76)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径93mm、顶面半径87mm、59mm高的圆台，绕轴(0.47, -0.54, -0.61)旋转41度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 93\ncone.Radius2 = 87\ncone.Height = 59\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.47, -0.54, -0.61), 41)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径116mm、顶面直径62mm、133mm高的圆台。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 58\ncone.Radius2 = 31\ncone.Height = 133\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径38mm、顶面直径34mm、171mm高的圆台。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 19\ncone.Radius2 = 17\ncone.Height = 171\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径88mm、顶面直径8mm、193mm高的圆台，位置在坐标(-20, 8, 44)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 44\ncone.Radius2 = 4\ncone.Height = 193\ncone.Placement.Base = FreeCAD.Vector(-20, 8, 44)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径100mm、顶面半径97mm、154mm高的圆台，绕轴(-0.17, 0.95, 0.42)旋转181度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 100\ncone.Radius2 = 97\ncone.Height = 154\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.17, 0.95, 0.42), 181)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径30mm、顶面直径6mm、31mm高的圆台，绕轴(-0.70, 0.27, 0.99)旋转39度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 15\ncone.Radius2 = 3\ncone.Height = 31\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.70, 0.27, 0.99), 39)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径79mm、顶面半径30mm、169mm高的圆台。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 79\ncone.Radius2 = 30\ncone.Height = 169\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径25mm、顶面半径22mm、59mm高的圆台，位置在坐标(31, -53, -41)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 25\ncone.Radius2 = 22\ncone.Height = 59\ncone.Placement.Base = FreeCAD.Vector(31, -53, -41)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径85mm、顶面半径19mm、191mm高的圆台，绕轴(0.81, -0.27, -0.03)旋转73度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 85\ncone.Radius2 = 19\ncone.Height = 191\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.81, -0.27, -0.03), 73)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个85mm底面半径、66mm高的圆锥体，位置在坐标(-66, -86, 11)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 85\ncone.Radius2 = 0\ncone.Height = 66\ncone.Placement.Base = FreeCAD.Vector(-66, -86, 11)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径19mm、顶面半径6mm、130mm高的圆台，位置在坐标(27, 88, -6)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 19\ncone.Radius2 = 6\ncone.Height = 130\ncone.Placement.Base = FreeCAD.Vector(27, 88, -6)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面直径106mm、顶面直径74mm、44mm高的圆台，位置在坐标(46, 37, 63)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 53\ncone.Radius2 = 37\ncone.Height = 44\ncone.Placement.Base = FreeCAD.Vector(46, 37, 63)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个14mm底面半径、195mm高的圆锥体，位置在坐标(-38, 74, -57)，绕轴(-0.08, 0.92, 0.14)旋转212度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 14\ncone.Radius2 = 0\ncone.Height = 195\ncone.Placement.Base = FreeCAD.Vector(-38, 74, -57)\ncone.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.08, 0.92, 0.14), 212)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个134mm底面直径、68mm高的圆锥体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 67\ncone.Radius2 = 0\ncone.Height = 68\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径6mm、顶面半径2mm、143mm高的圆台，位置在坐标(28, -42, 44)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cone\")\ncone = doc.addObject(\"Part::Cone\", \"Cone\")\ncone.Radius1 = 6\ncone.Radius2 = 2\ncone.Height = 143\ncone.Placement.Base = FreeCAD.Vector(28, -42, 44)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个130mm直径的球体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 65\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个58mm直径的球体，中心位置在坐标(-32, -76, -34)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 29\nsphere.Placement.Base = FreeCAD.Vector(-32, -76, -34)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个100mm直径的球体，中心位置在坐标(-88, -49, 22)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 50\nsphere.Placement.Base = FreeCAD.Vector(-88, -49, 22)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个9mm半径的球体，中心位置在坐标(-59, 10, -97)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 9\nsphere.Placement.Base = FreeCAD.Vector(-59, 10, -97)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个102mm直径的球体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 51\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个12mm直径的球体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 6\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个184mm直径的球体，中心位置在坐标(-91, 19, -48)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 92\nsphere.Placement.Base = FreeCAD.Vector(-91, 19, -48)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个32mm直径的球体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 16\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个12mm半径的球体，中心位置在坐标(-12, 27, -68)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 12\nsphere.Placement.Base = FreeCAD.Vector(-12, 27, -68)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个34mm半径的球体，中心位置在坐标(-90, -81, 1)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 34\nsphere.Placement.Base = FreeCAD.Vector(-90, -81, 1)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个62mm半径的球体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 62\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个68mm半径的球体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 68\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个97mm半径的球体，中心位置在坐标(23, 57, 2)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 97\nsphere.Placement.Base = FreeCAD.Vector(23, 57, 2)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个162mm直径的球体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 81\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个52mm半径的球体，中心位置在坐标(-37, 10, -41)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 52\nsphere.Placement.Base = FreeCAD.Vector(-37, 10, -41)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个8mm半径的球体，中心位置在坐标(-89, 2, 8)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 8\nsphere.Placement.Base = FreeCAD.Vector(-89, 2, 8)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个108mm直径的球体，中心位置在坐标(-8, -27, 4)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 54\nsphere.Placement.Base = FreeCAD.Vector(-8, -27, 4)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个32mm直径的球体，中心位置在坐标(-28, 51, -92)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 16\nsphere.Placement.Base = FreeCAD.Vector(-28, 51, -92)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个12mm直径的球体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 6\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个76mm半径的球体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 76\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个114mm直径的球体，中心位置在坐标(44, -42, 79)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 57\nsphere.Placement.Base = FreeCAD.Vector(44, -42, 79)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个90mm直径的球体，中心位置在坐标(39, 38, 67)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 45\nsphere.Placement.Base = FreeCAD.Vector(39, 38, 67)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个65mm半径的球体，中心位置在坐标(-11, -83, -45)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 65\nsphere.Placement.Base = FreeCAD.Vector(-11, -83, -45)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个10mm直径的球体，中心位置在坐标(-4, -42, 0)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 5\nsphere.Placement.Base = FreeCAD.Vector(-4, -42, 0)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个90mm半径的球体，中心位置在坐标(82, 9, -46)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 90\nsphere.Placement.Base = FreeCAD.Vector(82, 9, -46)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个66mm半径的球体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 66\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个35mm半径的球体，中心位置在坐标(-64, 50, -100)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 35\nsphere.Placement.Base = FreeCAD.Vector(-64, 50, -100)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个94mm半径的球体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 94\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个45mm半径的球体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 45\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个178mm直径的球体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 89\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个73mm半径的球体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 73\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个48mm半径的球体，中心位置在坐标(-69, -4, -16)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 48\nsphere.Placement.Base = FreeCAD.Vector(-69, -4, -16)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个60mm直径的球体，中心位置在坐标(-90, -67, 14)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 30\nsphere.Placement.Base = FreeCAD.Vector(-90, -67, 14)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个40mm直径的球体，中心位置在坐标(70, -28, 23)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 20\nsphere.Placement.Base = FreeCAD.Vector(70, -28, 23)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个198mm直径的球体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 99\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个42mm直径的球体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 21\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个87mm半径的球体，中心位置在坐标(-97, -15, -90)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 87\nsphere.Placement.Base = FreeCAD.Vector(-97, -15, -90)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个27mm半径的球体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 27\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个46mm直径的球体，中心位置在坐标(11, 7, -53)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 23\nsphere.Placement.Base = FreeCAD.Vector(11, 7, -53)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个48mm半径的球体，中心位置在坐标(-82, 37, 5)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 48\nsphere.Placement.Base = FreeCAD.Vector(-82, 37, 5)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径64mm、管半径27mm的圆环，中心位置在坐标(-31, -47, 63)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 64\ntorus.Radius2 = 27\ntorus.Placement.Base = FreeCAD.Vector(-31, -47, 63)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径152mm、管直径62mm的圆环，绕轴(1.00, -0.49, 0.42)旋转141度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 76\ntorus.Radius2 = 31\ntorus.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(1.00, -0.49, 0.42), 141)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径40mm、管半径6mm的圆环，绕轴(-0.30, -0.38, 0.33)旋转2度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 40\ntorus.Radius2 = 6\ntorus.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.30, -0.38, 0.33), 2)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径111mm、管半径34mm的圆环。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 111\ntorus.Radius2 = 34\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径148mm、管半径47mm的圆环。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 148\ntorus.Radius2 = 47\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径202mm、管直径86mm的圆环，绕轴(-0.13, 0.82, 0.45)旋转250度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 101\ntorus.Radius2 = 43\ntorus.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.13, 0.82, 0.45), 250)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径66mm、管直径22mm的圆环，中心位置在坐标(-45, 12, 7)，绕轴(0.95, 0.96, 0.37)旋转257度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 33\ntorus.Radius2 = 11\ntorus.Placement.Base = FreeCAD.Vector(-45, 12, 7)\ntorus.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.95, 0.96, 0.37), 257)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径90mm、管半径9mm的圆环，绕轴(-0.54, 0.23, 0.14)旋转98度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 90\ntorus.Radius2 = 9\ntorus.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.54, 0.23, 0.14), 98)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径214mm、管直径68mm的圆环，中心位置在坐标(36, -88, 16)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 107\ntorus.Radius2 = 34\ntorus.Placement.Base = FreeCAD.Vector(36, -88, 16)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径206mm、管直径98mm的圆环，中心位置在坐标(40, 81, -78)，绕轴(0.21, 0.11, 0.55)旋转353度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 103\ntorus.Radius2 = 49\ntorus.Placement.Base = FreeCAD.Vector(40, 81, -78)\ntorus.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.21, 0.11, 0.55), 353)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径145mm、管半径46mm的圆环，绕轴(0.15, -0.15, 0.62)旋转9度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 145\ntorus.Radius2 = 46\ntorus.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.15, -0.15, 0.62), 9)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径91mm、管半径5mm的圆环。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 91\ntorus.Radius2 = 5\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径94mm、管半径7mm的圆环，中心位置在坐标(-77, -42, 45)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 94\ntorus.Radius2 = 7\ntorus.Placement.Base = FreeCAD.Vector(-77, -42, 45)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径256mm、管直径30mm的圆环，中心位置在坐标(-73, 99, -51)，绕轴(-0.63, -0.97, -0.05)旋转36度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 128\ntorus.Radius2 = 15\ntorus.Placement.Base = FreeCAD.Vector(-73, 99, -51)\ntorus.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.63, -0.97, -0.05), 36)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径198mm、管直径88mm的圆环，中心位置在坐标(9, -20, 5)，绕轴(0.59, 0.40, 0.53)旋转3度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 99\ntorus.Radius2 = 44\ntorus.Placement.Base = FreeCAD.Vector(9, -20, 5)\ntorus.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.59, 0.40, 0.53), 3)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径98mm、管直径12mm的圆环，绕轴(-0.54, 0.78, -0.24)旋转229度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 49\ntorus.Radius2 = 6\ntorus.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.54, 0.78, -0.24), 229)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径210mm、管直径96mm的圆环。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 105\ntorus.Radius2 = 48\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径144mm、管半径38mm的圆环，绕轴(0.50, -0.06, 0.60)旋转281度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 144\ntorus.Radius2 = 38\ntorus.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.50, -0.06, 0.60), 281)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径102mm、管直径12mm的圆环。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 51\ntorus.Radius2 = 6\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径142mm、管半径46mm的圆环。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 142\ntorus.Radius2 = 46\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径91mm、管半径39mm的圆环，中心位置在坐标(-73, -94, -33)，绕轴(0.73, 0.12, 0.45)旋转44度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 91\ntorus.Radius2 = 39\ntorus.Placement.Base = FreeCAD.Vector(-73, -94, -33)\ntorus.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.73, 0.12, 0.45), 44)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径34mm、管半径16mm的圆环，中心位置在坐标(-92, 41, 54)，绕轴(0.86, 0.00, 0.72)旋转103度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 34\ntorus.Radius2 = 16\ntorus.Placement.Base = FreeCAD.Vector(-92, 41, 54)\ntorus.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.86, 0.00, 0.72), 103)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径78mm、管直径28mm的圆环。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 39\ntorus.Radius2 = 14\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径108mm、管直径34mm的圆环。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 54\ntorus.Radius2 = 17\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径71mm、管半径21mm的圆环。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 71\ntorus.Radius2 = 21\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径242mm、管直径64mm的圆环。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 121\ntorus.Radius2 = 32\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径92mm、管直径10mm的圆环。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 46\ntorus.Radius2 = 5\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径126mm、管半径14mm的圆环。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 126\ntorus.Radius2 = 14\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径125mm、管半径8mm的圆环。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 125\ntorus.Radius2 = 8\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径49mm、管半径16mm的圆环，中心位置在坐标(-47, -18, 0)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 49\ntorus.Radius2 = 16\ntorus.Placement.Base = FreeCAD.Vector(-47, -18, 0)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径174mm、管直径72mm的圆环，绕轴(0.13, 0.90, 0.12)旋转299度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 87\ntorus.Radius2 = 36\ntorus.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.13, 0.90, 0.12), 299)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径104mm、管直径18mm的圆环，中心位置在坐标(65, 96, 80)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 52\ntorus.Radius2 = 9\ntorus.Placement.Base = FreeCAD.Vector(65, 96, 80)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径55mm、管半径19mm的圆环。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 55\ntorus.Radius2 = 19\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径212mm、管直径72mm的圆环，中心位置在坐标(-89, -39, -73)，绕轴(-0.41, -0.05, 0.95)旋转157度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 106\ntorus.Radius2 = 36\ntorus.Placement.Base = FreeCAD.Vector(-89, -39, -73)\ntorus.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.41, -0.05, 0.95), 157)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径96mm、管直径20mm的圆环，绕轴(-0.28, -0.84, 0.07)旋转161度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 48\ntorus.Radius2 = 10\ntorus.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.28, -0.84, 0.07), 161)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径50mm、管半径22mm的圆环。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 50\ntorus.Radius2 = 22\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径280mm、管直径36mm的圆环，绕轴(0.00, 0.25, 0.98)旋转17度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 140\ntorus.Radius2 = 18\ntorus.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.00, 0.25, 0.98), 17)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径178mm、管直径82mm的圆环，绕轴(-0.28, 0.08, -0.96)旋转342度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 89\ntorus.Radius2 = 41\ntorus.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.28, 0.08, -0.96), 342)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径86mm、管半径14mm的圆环，中心位置在坐标(-6, 70, -36)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 86\ntorus.Radius2 = 14\ntorus.Placement.Base = FreeCAD.Vector(-6, 70, -36)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径118mm、管半径28mm的圆环，绕轴(-0.19, -0.98, 0.45)旋转202度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 118\ntorus.Radius2 = 28\ntorus.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.19, -0.98, 0.45), 202)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个3边形棱柱，底面外接圆半径79mm，高度36mm，绕轴(-0.79, -0.85, 0.82)旋转352度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 3\nprism.Circumradius = 79\nprism.Height = 36\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.79, -0.85, 0.82), 352)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个12边形棱柱，底面外接圆半径42mm，高度46mm，位置在坐标(26, -6, 66)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 12\nprism.Circumradius = 42\nprism.Height = 46\nprism.Placement.Base = FreeCAD.Vector(26, -6, 66)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个11边形棱柱，底面外接圆半径89mm，高度15mm，位置在坐标(73, -71, 70)，绕轴(0.53, -0.78, -0.89)旋转1度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 11\nprism.Circumradius = 89\nprism.Height = 15\nprism.Placement.Base = FreeCAD.Vector(73, -71, 70)\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.53, -0.78, -0.89), 1)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个12边形棱柱，底面外接圆半径14mm，高度25mm，位置在坐标(-24, -57, 84)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 12\nprism.Circumradius = 14\nprism.Height = 25\nprism.Placement.Base = FreeCAD.Vector(-24, -57, 84)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个5边形棱柱，底面外接圆半径54mm，高度156mm，绕轴(0.90, -0.14, -0.03)旋转85度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 5\nprism.Circumradius = 54\nprism.Height = 156\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.90, -0.14, -0.03), 85)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个8边形棱柱，底面外接圆半径62mm，高度87mm，位置在坐标(-81, 39, -16)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 8\nprism.Circumradius = 62\nprism.Height = 87\nprism.Placement.Base = FreeCAD.Vector(-81, 39, -16)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个5边形棱柱，底面外接圆半径14mm，高度87mm，绕轴(0.00, -0.56, 0.03)旋转96度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 5\nprism.Circumradius = 14\nprism.Height = 87\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.00, -0.56, 0.03), 96)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个10边形棱柱，底面外接圆半径19mm，高度199mm，位置在坐标(-84, -38, -76)，绕轴(-0.74, 0.91, -0.94)旋转271度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 10\nprism.Circumradius = 19\nprism.Height = 199\nprism.Placement.Base = FreeCAD.Vector(-84, -38, -76)\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.74, 0.91, -0.94), 271)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个4边形棱柱，底面外接圆半径85mm，高度45mm，位置在坐标(-44, 48, -78)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 4\nprism.Circumradius = 85\nprism.Height = 45\nprism.Placement.Base = FreeCAD.Vector(-44, 48, -78)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个7边形棱柱，底面外接圆半径61mm，高度172mm，位置在坐标(-92, -17, -40)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 7\nprism.Circumradius = 61\nprism.Height = 172\nprism.Placement.Base = FreeCAD.Vector(-92, -17, -40)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个12边形棱柱，底面外接圆半径45mm，高度155mm，绕轴(0.27, 0.50, 0.82)旋转308度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 12\nprism.Circumradius = 45\nprism.Height = 155\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.27, 0.50, 0.82), 308)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个4边形棱柱，底面外接圆半径58mm，高度119mm，位置在坐标(33, -70, 89)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 4\nprism.Circumradius = 58\nprism.Height = 119\nprism.Placement.Base = FreeCAD.Vector(33, -70, 89)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个8边形棱柱，底面外接圆半径32mm，高度36mm，位置在坐标(-45, 4, 22)，绕轴(0.27, 0.53, 0.67)旋转138度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 8\nprism.Circumradius = 32\nprism.Height = 36\nprism.Placement.Base = FreeCAD.Vector(-45, 4, 22)\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.27, 0.53, 0.67), 138)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个8边形棱柱，底面外接圆半径93mm，高度172mm，绕轴(0.16, 0.23, 0.09)旋转223度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 8\nprism.Circumradius = 93\nprism.Height = 172\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.16, 0.23, 0.09), 223)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个8边形棱柱，底面外接圆半径93mm，高度142mm，位置在坐标(-6, 70, 6)，绕轴(0.04, 0.85, 0.19)旋转125度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 8\nprism.Circumradius = 93\nprism.Height = 142\nprism.Placement.Base = FreeCAD.Vector(-6, 70, 6)\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.04, 0.85, 0.19), 125)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个7边形棱柱，底面外接圆半径69mm，高度97mm，位置在坐标(-53, -88, 41)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 7\nprism.Circumradius = 69\nprism.Height = 97\nprism.Placement.Base = FreeCAD.Vector(-53, -88, 41)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个6边形棱柱，底面外接圆半径70mm，高度36mm，绕轴(-0.22, 0.54, -0.36)旋转237度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 6\nprism.Circumradius = 70\nprism.Height = 36\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.22, 0.54, -0.36), 237)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个4边形棱柱，底面外接圆半径44mm，高度109mm，绕轴(-0.13, 0.61, -0.26)旋转110度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 4\nprism.Circumradius = 44\nprism.Height = 109\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.13, 0.61, -0.26), 110)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个7边形棱柱，底面外接圆半径97mm，高度65mm，绕轴(-0.04, 0.56, -0.85)旋转191度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 7\nprism.Circumradius = 97\nprism.Height = 65\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.04, 0.56, -0.85), 191)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个6边形棱柱，底面外接圆半径24mm，高度43mm，位置在坐标(69, -53, 26)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 6\nprism.Circumradius = 24\nprism.Height = 43\nprism.Placement.Base = FreeCAD.Vector(69, -53, 26)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个12边形棱柱，底面外接圆半径82mm，高度128mm，位置在坐标(1, -66, 52)，绕轴(0.66, 0.85, 0.56)旋转241度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 12\nprism.Circumradius = 82\nprism.Height = 128\nprism.Placement.Base = FreeCAD.Vector(1, -66, 52)\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.66, 0.85, 0.56), 241)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个12边形棱柱，底面外接圆半径63mm，高度99mm，绕轴(0.66, 0.25, -0.85)旋转70度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 12\nprism.Circumradius = 63\nprism.Height = 99\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.66, 0.25, -0.85), 70)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个8边形棱柱，底面外接圆半径38mm，高度148mm，位置在坐标(-91, -89, -7)，绕轴(-0.40, -0.97, -0.02)旋转148度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 8\nprism.Circumradius = 38\nprism.Height = 148\nprism.Placement.Base = FreeCAD.Vector(-91, -89, -7)\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.40, -0.97, -0.02), 148)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个6边形棱柱，底面外接圆半径73mm，高度117mm。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 6\nprism.Circumradius = 73\nprism.Height = 117\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个8边形棱柱，底面外接圆半径16mm，高度173mm，位置在坐标(6, -46, -41)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 8\nprism.Circumradius = 16\nprism.Height = 173\nprism.Placement.Base = FreeCAD.Vector(6, -46, -41)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个9边形棱柱，底面外接圆半径94mm，高度63mm，位置在坐标(79, 49, -57)，绕轴(-0.68, -0.12, 0.77)旋转48度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 9\nprism.Circumradius = 94\nprism.Height = 63\nprism.Placement.Base = FreeCAD.Vector(79, 49, -57)\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.68, -0.12, 0.77), 48)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个7边形棱柱，底面外接圆半径42mm，高度139mm，绕轴(-0.66, 0.59, 0.13)旋转179度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 7\nprism.Circumradius = 42\nprism.Height = 139\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.66, 0.59, 0.13), 179)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个12边形棱柱，底面外接圆半径17mm，高度27mm，位置在坐标(20, -15, -45)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 12\nprism.Circumradius = 17\nprism.Height = 27\nprism.Placement.Base = FreeCAD.Vector(20, -15, -45)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个3边形棱柱，底面外接圆半径25mm，高度156mm，位置在坐标(-63, 49, 67)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 3\nprism.Circumradius = 25\nprism.Height = 156\nprism.Placement.Base = FreeCAD.Vector(-63, 49, 67)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个12边形棱柱，底面外接圆半径45mm，高度111mm，位置在坐标(68, 30, 29)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 12\nprism.Circumradius = 45\nprism.Height = 111\nprism.Placement.Base = FreeCAD.Vector(68, 30, 29)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个6边形棱柱，底面外接圆半径54mm，高度189mm，绕轴(0.86, 0.13, 0.31)旋转123度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 6\nprism.Circumradius = 54\nprism.Height = 189\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.86, 0.13, 0.31), 123)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个5边形棱柱，底面外接圆半径39mm，高度114mm，绕轴(-0.77, 0.69, -0.29)旋转268度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 5\nprism.Circumradius = 39\nprism.Height = 114\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.77, 0.69, -0.29), 268)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个6边形棱柱，底面外接圆半径22mm，高度54mm，绕轴(0.89, 0.29, 0.72)旋转181度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 6\nprism.Circumradius = 22\nprism.Height = 54\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.89, 0.29, 0.72), 181)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个12边形棱柱，底面外接圆半径11mm，高度95mm，位置在坐标(-71, 39, -35)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 12\nprism.Circumradius = 11\nprism.Height = 95\nprism.Placement.Base = FreeCAD.Vector(-71, 39, -35)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个6边形棱柱，底面外接圆半径92mm，高度84mm，位置在坐标(74, -35, -31)。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 6\nprism.Circumradius = 92\nprism.Height = 84\nprism.Placement.Base = FreeCAD.Vector(74, -35, -31)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个12边形棱柱，底面外接圆半径17mm，高度40mm，绕轴(-0.24, 0.24, 0.30)旋转75度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 12\nprism.Circumradius = 17\nprism.Height = 40\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.24, 0.24, 0.30), 75)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个6边形棱柱，底面外接圆半径38mm，高度44mm，绕轴(0.05, 0.48, -0.55)旋转165度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 6\nprism.Circumradius = 38\nprism.Height = 44\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.05, 0.48, -0.55), 165)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个12边形棱柱，底面外接圆半径82mm，高度56mm，位置在坐标(-80, -13, 5)，绕轴(0.98, -0.96, 0.61)旋转272度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 12\nprism.Circumradius = 82\nprism.Height = 56\nprism.Placement.Base = FreeCAD.Vector(-80, -13, 5)\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.98, -0.96, 0.61), 272)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个8边形棱柱，底面外接圆半径17mm，高度200mm。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 8\nprism.Circumradius = 17\nprism.Height = 200\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个12边形棱柱，底面外接圆半径59mm，高度112mm，绕轴(-0.87, 0.62, -0.36)旋转326度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Prism\")\nprism = doc.addObject(\"Part::Prism\", \"Prism\")\nprism.Polygon = 12\nprism.Circumradius = 59\nprism.Height = 112\nprism.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.87, 0.62, -0.36), 326)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径15mm、高130mm的圆柱体和一个半径58mm的球体（位置在(49, 49, -3)，并绕轴(0.97, 0.10, -0.51)旋转176度），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\nshape1.Radius = 15\nshape1.Height = 130\nshape2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nshape2.Radius = 58\nshape2.Placement.Base = FreeCAD.Vector(49, 49, -3)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.97, 0.10, -0.51), 176)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径64mm、高33mm的圆锥体和一个半径40mm、高53mm的圆柱体（位置在(-24, -7, 9)，并绕轴(-0.27, 0.42, 0.80)旋转262度），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cone\", \"Cone\")\nshape1.Radius1 = 64\nshape1.Radius2 = 0\nshape1.Height = 33\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 40\nshape2.Height = 53\nshape2.Placement.Base = FreeCAD.Vector(-24, -7, 9)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.27, 0.42, 0.80), 262)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长80mm、宽89mm、高25mm的长方体和一个主半径75mm、管半径8mm的圆环（位置在(2, 4, -21)），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 80\nshape1.Width = 89\nshape1.Height = 25\nshape2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nshape2.Radius1 = 75\nshape2.Radius2 = 8\nshape2.Placement.Base = FreeCAD.Vector(2, 4, -21)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长62mm、宽22mm、高77mm的长方体和一个半径31mm的球体（位置在(-10, -26, 44)），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 62\nshape1.Width = 22\nshape1.Height = 77\nshape2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nshape2.Radius = 31\nshape2.Placement.Base = FreeCAD.Vector(-10, -26, 44)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长72mm、宽104mm、高127mm的长方体和一个半径40mm、高44mm的圆柱体（位置在(49, -11, 16)，并绕轴(-0.51, 0.29, 0.71)旋转185度），然后计算它们的组合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 72\nshape1.Width = 104\nshape1.Height = 127\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 40\nshape2.Height = 44\nshape2.Placement.Base = FreeCAD.Vector(49, -11, 16)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.51, 0.29, 0.71), 185)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径40mm的球体和一个长64mm、宽44mm、高73mm的长方体（位置在(-24, 47, 49)，并绕轴(-0.68, -0.10, 0.80)旋转356度），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 40\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 64\nshape2.Width = 44\nshape2.Height = 73\nshape2.Placement.Base = FreeCAD.Vector(-24, 47, 49)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.68, -0.10, 0.80), 356)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径50mm、管半径10mm的圆环和一个半径39mm、高81mm的圆柱体（位置在(-47, -42, -7)），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 50\nshape1.Radius2 = 10\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 39\nshape2.Height = 81\nshape2.Placement.Base = FreeCAD.Vector(-47, -42, -7)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径96mm、管半径6mm的圆环和一个底面半径51mm、高135mm的圆锥体（位置在(3, -4, -5)，并绕轴(-0.78, -0.61, 0.45)旋转22度），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 96\nshape1.Radius2 = 6\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 51\nshape2.Radius2 = 0\nshape2.Height = 135\nshape2.Placement.Base = FreeCAD.Vector(3, -4, -5)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.78, -0.61, 0.45), 22)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径60mm、高121mm的圆柱体和一个主半径68mm、管半径19mm的圆环（位置在(13, 19, -45)，并绕轴(-0.59, 0.62, -0.97)旋转216度），然后计算它们的组合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\nshape1.Radius = 60\nshape1.Height = 121\nshape2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nshape2.Radius1 = 68\nshape2.Radius2 = 19\nshape2.Placement.Base = FreeCAD.Vector(13, 19, -45)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.59, 0.62, -0.97), 216)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径53mm、高21mm的圆锥体和一个半径40mm、高48mm的圆柱体（位置在(-10, 31, -10)，并绕轴(0.32, 0.37, 0.81)旋转127度），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cone\", \"Cone\")\nshape1.Radius1 = 53\nshape1.Radius2 = 0\nshape1.Height = 21\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 40\nshape2.Height = 48\nshape2.Placement.Base = FreeCAD.Vector(-10, 31, -10)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.32, 0.37, 0.81), 127)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径20mm的球体和一个主半径58mm、管半径20mm的圆环（位置在(-6, 12, 20)），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 20\nshape2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nshape2.Radius1 = 58\nshape2.Radius2 = 20\nshape2.Placement.Base = FreeCAD.Vector(-6, 12, 20)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径48mm的球体和一个长126mm、宽43mm、高136mm的长方体（位置在(37, 11, -21)），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 48\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 126\nshape2.Width = 43\nshape2.Height = 136\nshape2.Placement.Base = FreeCAD.Vector(37, 11, -21)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径60mm、管半径18mm的圆环和一个长125mm、宽61mm、高67mm的长方体（位置在(49, 50, 5)），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 60\nshape1.Radius2 = 18\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 125\nshape2.Width = 61\nshape2.Height = 67\nshape2.Placement.Base = FreeCAD.Vector(49, 50, 5)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径31mm、管半径8mm的圆环和一个长44mm、宽64mm、高34mm的长方体（位置在(-21, -21, -29)），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 31\nshape1.Radius2 = 8\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 44\nshape2.Width = 64\nshape2.Height = 34\nshape2.Placement.Base = FreeCAD.Vector(-21, -21, -29)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径10mm、高34mm的圆锥体和一个主半径69mm、管半径6mm的圆环（位置在(32, 44, -14)，并绕轴(-0.47, 0.65, -0.58)旋转284度），然后计算它们的组合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cone\", \"Cone\")\nshape1.Radius1 = 10\nshape1.Radius2 = 0\nshape1.Height = 34\nshape2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nshape2.Radius1 = 69\nshape2.Radius2 = 6\nshape2.Placement.Base = FreeCAD.Vector(32, 44, -14)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.47, 0.65, -0.58), 284)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径69mm的球体和一个长98mm、宽82mm、高26mm的长方体（位置在(-19, 37, -8)），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 69\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 98\nshape2.Width = 82\nshape2.Height = 26\nshape2.Placement.Base = FreeCAD.Vector(-19, 37, -8)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径29mm、高127mm的圆锥体和一个主半径72mm、管半径7mm的圆环（位置在(45, -34, -16)），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cone\", \"Cone\")\nshape1.Radius1 = 29\nshape1.Radius2 = 0\nshape1.Height = 127\nshape2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nshape2.Radius1 = 72\nshape2.Radius2 = 7\nshape2.Placement.Base = FreeCAD.Vector(45, -34, -16)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径21mm的球体和一个主半径61mm、管半径20mm的圆环（位置在(-23, 25, 4)），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 21\nshape2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nshape2.Radius1 = 61\nshape2.Radius2 = 20\nshape2.Placement.Base = FreeCAD.Vector(-23, 25, 4)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径59mm的球体和一个底面半径51mm、高120mm的圆锥体（位置在(-34, -42, -23)），然后计算它们的组合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 59\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 51\nshape2.Radius2 = 0\nshape2.Height = 120\nshape2.Placement.Base = FreeCAD.Vector(-34, -42, -23)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径33mm、管半径6mm的圆环和一个长73mm、宽97mm、高125mm的长方体（位置在(-30, -6, 31)），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 33\nshape1.Radius2 = 6\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 73\nshape2.Width = 97\nshape2.Height = 125\nshape2.Placement.Base = FreeCAD.Vector(-30, -6, 31)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径87mm、管半径5mm的圆环和一个底面半径56mm、高128mm的圆锥体（位置在(-4, 41, -28)，并绕轴(-0.30, -0.23, 0.14)旋转269度），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 87\nshape1.Radius2 = 5\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 56\nshape2.Radius2 = 0\nshape2.Height = 128\nshape2.Placement.Base = FreeCAD.Vector(-4, 41, -28)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.30, -0.23, 0.14), 269)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径97mm、管半径9mm的圆环和一个底面半径35mm、高70mm的圆锥体（位置在(-36, 44, -4)，并绕轴(0.52, -0.54, -0.71)旋转302度），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 97\nshape1.Radius2 = 9\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 35\nshape2.Radius2 = 0\nshape2.Height = 70\nshape2.Placement.Base = FreeCAD.Vector(-36, 44, -4)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.52, -0.54, -0.71), 302)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径31mm、高33mm的圆锥体和一个主半径47mm、管半径5mm的圆环（位置在(-29, -8, -5)，并绕轴(-0.32, -0.82, 0.26)旋转353度），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cone\", \"Cone\")\nshape1.Radius1 = 31\nshape1.Radius2 = 0\nshape1.Height = 33\nshape2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nshape2.Radius1 = 47\nshape2.Radius2 = 5\nshape2.Placement.Base = FreeCAD.Vector(-29, -8, -5)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.32, -0.82, 0.26), 353)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径45mm、高27mm的圆锥体和一个半径52mm、高127mm的圆柱体（位置在(-5, 32, 47)，并绕轴(0.03, -0.63, -0.65)旋转277度），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cone\", \"Cone\")\nshape1.Radius1 = 45\nshape1.Radius2 = 0\nshape1.Height = 27\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 52\nshape2.Height = 127\nshape2.Placement.Base = FreeCAD.Vector(-5, 32, 47)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.03, -0.63, -0.65), 277)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长21mm、宽145mm、高147mm的长方体和一个半径41mm的球体（位置在(20, -34, 31)），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 21\nshape1.Width = 145\nshape1.Height = 147\nshape2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nshape2.Radius = 41\nshape2.Placement.Base = FreeCAD.Vector(20, -34, 31)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径42mm、管半径13mm的圆环和一个半径29mm、高102mm的圆柱体（位置在(4, -6, 22)），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 42\nshape1.Radius2 = 13\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 29\nshape2.Height = 102\nshape2.Placement.Base = FreeCAD.Vector(4, -6, 22)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径70mm、管半径17mm的圆环和一个底面半径60mm、高114mm的圆锥体（位置在(-47, 0, -16)），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 70\nshape1.Radius2 = 17\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 60\nshape2.Radius2 = 0\nshape2.Height = 114\nshape2.Placement.Base = FreeCAD.Vector(-47, 0, -16)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径74mm、管半径14mm的圆环和一个长23mm、宽136mm、高55mm的长方体（位置在(27, -3, 18)），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 74\nshape1.Radius2 = 14\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 23\nshape2.Width = 136\nshape2.Height = 55\nshape2.Placement.Base = FreeCAD.Vector(27, -3, 18)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长23mm、宽112mm、高26mm的长方体和一个半径66mm、高145mm的圆柱体（位置在(5, -38, -30)，并绕轴(0.86, -0.21, -0.31)旋转277度），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 23\nshape1.Width = 112\nshape1.Height = 26\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 66\nshape2.Height = 145\nshape2.Placement.Base = FreeCAD.Vector(5, -38, -30)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.86, -0.21, -0.31), 277)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径29mm的球体和一个底面半径38mm、高49mm的圆锥体（位置在(3, -5, -7)），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 29\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 38\nshape2.Radius2 = 0\nshape2.Height = 49\nshape2.Placement.Base = FreeCAD.Vector(3, -5, -7)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径65mm的球体和一个半径17mm、高68mm的圆柱体（位置在(31, -2, 32)，并绕轴(-0.29, -0.64, -0.49)旋转235度），然后计算它们的组合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 65\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 17\nshape2.Height = 68\nshape2.Placement.Base = FreeCAD.Vector(31, -2, 32)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.29, -0.64, -0.49), 235)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径69mm、高83mm的圆锥体和一个半径61mm的球体（位置在(-10, 17, -12)），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cone\", \"Cone\")\nshape1.Radius1 = 69\nshape1.Radius2 = 0\nshape1.Height = 83\nshape2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nshape2.Radius = 61\nshape2.Placement.Base = FreeCAD.Vector(-10, 17, -12)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径29mm、高92mm的圆柱体和一个长22mm、宽89mm、高46mm的长方体（位置在(25, -27, -33)），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\nshape1.Radius = 29\nshape1.Height = 92\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 22\nshape2.Width = 89\nshape2.Height = 46\nshape2.Placement.Base = FreeCAD.Vector(25, -27, -33)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径19mm、高93mm的圆柱体和一个半径63mm的球体（位置在(21, -38, -25)，并绕轴(0.18, -0.06, -0.35)旋转235度），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\nshape1.Radius = 19\nshape1.Height = 93\nshape2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nshape2.Radius = 63\nshape2.Placement.Base = FreeCAD.Vector(21, -38, -25)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.18, -0.06, -0.35), 235)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径37mm的球体和一个半径57mm、高51mm的圆柱体（位置在(-25, 18, 23)），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 37\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 57\nshape2.Height = 51\nshape2.Placement.Base = FreeCAD.Vector(-25, 18, 23)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长50mm、宽23mm、高136mm的长方体和一个底面半径39mm、高124mm的圆锥体（位置在(-41, 38, 40)），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 50\nshape1.Width = 23\nshape1.Height = 136\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 39\nshape2.Radius2 = 0\nshape2.Height = 124\nshape2.Placement.Base = FreeCAD.Vector(-41, 38, 40)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径61mm、高78mm的圆柱体和一个底面半径23mm、高124mm的圆锥体（位置在(23, -44, -39)，并绕轴(0.40, 0.08, 0.73)旋转356度），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\nshape1.Radius = 61\nshape1.Height = 78\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 23\nshape2.Radius2 = 0\nshape2.Height = 124\nshape2.Placement.Base = FreeCAD.Vector(23, -44, -39)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.40, 0.08, 0.73), 356)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径36mm、管半径6mm的圆环和一个长64mm、宽102mm、高38mm的长方体（位置在(17, 3, 33)，并绕轴(-0.02, 0.04, -0.56)旋转281度），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 36\nshape1.Radius2 = 6\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 64\nshape2.Width = 102\nshape2.Height = 38\nshape2.Placement.Base = FreeCAD.Vector(17, 3, 33)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.02, 0.04, -0.56), 281)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径75mm、管半径17mm的圆环和一个长104mm、宽121mm、高28mm的长方体（位置在(-25, -34, -28)，并绕轴(-0.66, 0.67, -0.91)旋转148度），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 75\nshape1.Radius2 = 17\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 104\nshape2.Width = 121\nshape2.Height = 28\nshape2.Placement.Base = FreeCAD.Vector(-25, -34, -28)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.66, 0.67, -0.91), 148)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长34mm、宽22mm、高33mm的长方体和一个半径67mm的球体（位置在(31, -18, 28)），然后计算它们的组合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 34\nshape1.Width = 22\nshape1.Height = 33\nshape2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nshape2.Radius = 67\nshape2.Placement.Base = FreeCAD.Vector(31, -18, 28)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径24mm的球体和一个底面半径53mm、高54mm的圆锥体（位置在(-22, -14, -34)），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 24\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 53\nshape2.Radius2 = 0\nshape2.Height = 54\nshape2.Placement.Base = FreeCAD.Vector(-22, -14, -34)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长79mm、宽123mm、高51mm的长方体和一个半径19mm、高103mm的圆柱体（位置在(-25, 26, -45)，并绕轴(0.80, 0.73, -0.18)旋转147度），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 79\nshape1.Width = 123\nshape1.Height = 51\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 19\nshape2.Height = 103\nshape2.Placement.Base = FreeCAD.Vector(-25, 26, -45)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.80, 0.73, -0.18), 147)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长138mm、宽66mm、高43mm的长方体和一个底面半径67mm、高95mm的圆锥体（位置在(0, -10, 20)），然后计算它们的组合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 138\nshape1.Width = 66\nshape1.Height = 43\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 67\nshape2.Radius2 = 0\nshape2.Height = 95\nshape2.Placement.Base = FreeCAD.Vector(0, -10, 20)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径57mm、高78mm的圆锥体和一个主半径49mm、管半径14mm的圆环（位置在(-23, -41, 13)），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cone\", \"Cone\")\nshape1.Radius1 = 57\nshape1.Radius2 = 0\nshape1.Height = 78\nshape2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nshape2.Radius1 = 49\nshape2.Radius2 = 14\nshape2.Placement.Base = FreeCAD.Vector(-23, -41, 13)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径37mm的球体和一个主半径82mm、管半径17mm的圆环（位置在(18, 23, -11)，并绕轴(0.66, -0.91, 0.73)旋转257度），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 37\nshape2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nshape2.Radius1 = 82\nshape2.Radius2 = 17\nshape2.Placement.Base = FreeCAD.Vector(18, 23, -11)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.66, -0.91, 0.73), 257)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径57mm的球体和一个半径16mm、高62mm的圆柱体（位置在(-13, 10, 29)），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 57\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 16\nshape2.Height = 62\nshape2.Placement.Base = FreeCAD.Vector(-13, 10, 29)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长114mm、宽134mm、高44mm的长方体和一个半径24mm、高116mm的圆柱体（位置在(-9, 46, 4)），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 114\nshape1.Width = 134\nshape1.Height = 44\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 24\nshape2.Height = 116\nshape2.Placement.Base = FreeCAD.Vector(-9, 46, 4)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径48mm的球体和一个半径65mm、高57mm的圆柱体（位置在(-12, -17, -41)），然后计算它们的组合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 48\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 65\nshape2.Height = 57\nshape2.Placement.Base = FreeCAD.Vector(-12, -17, -41)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径48mm、高31mm的圆锥体和一个半径70mm、高115mm的圆柱体（位置在(27, 2, -39)，并绕轴(0.38, 0.94, 0.29)旋转281度），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cone\", \"Cone\")\nshape1.Radius1 = 48\nshape1.Radius2 = 0\nshape1.Height = 31\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 70\nshape2.Height = 115\nshape2.Placement.Base = FreeCAD.Vector(27, 2, -39)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.38, 0.94, 0.29), 281)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径42mm的球体和一个长44mm、宽80mm、高33mm的长方体（位置在(30, -43, -24)），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 42\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 44\nshape2.Width = 80\nshape2.Height = 33\nshape2.Placement.Base = FreeCAD.Vector(30, -43, -24)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径10mm的球体和一个半径56mm、高64mm的圆柱体（位置在(-20, -45, -12)），然后计算它们的组合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 10\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 56\nshape2.Height = 64\nshape2.Placement.Base = FreeCAD.Vector(-20, -45, -12)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径81mm、管半径7mm的圆环和一个半径33mm、高67mm的圆柱体（位置在(35, 42, 37)，并绕轴(-0.66, -0.39, 0.20)旋转77度），然后计算它们的组合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 81\nshape1.Radius2 = 7\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 33\nshape2.Height = 67\nshape2.Placement.Base = FreeCAD.Vector(35, 42, 37)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.66, -0.39, 0.20), 77)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长23mm、宽61mm、高112mm的长方体和一个半径29mm、高102mm的圆柱体（位置在(-13, -43, 16)），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 23\nshape1.Width = 61\nshape1.Height = 112\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 29\nshape2.Height = 102\nshape2.Placement.Base = FreeCAD.Vector(-13, -43, 16)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长148mm、宽65mm、高86mm的长方体和一个底面半径21mm、高149mm的圆锥体（位置在(15, -24, 8)），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 148\nshape1.Width = 65\nshape1.Height = 86\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 21\nshape2.Radius2 = 0\nshape2.Height = 149\nshape2.Placement.Base = FreeCAD.Vector(15, -24, 8)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径17mm、高76mm的圆柱体和一个主半径69mm、管半径6mm的圆环（位置在(35, -28, 35)），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\nshape1.Radius = 17\nshape1.Height = 76\nshape2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nshape2.Radius1 = 69\nshape2.Radius2 = 6\nshape2.Placement.Base = FreeCAD.Vector(35, -28, 35)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长37mm、宽120mm、高53mm的长方体和一个半径55mm的球体（位置在(11, 15, 13)），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 37\nshape1.Width = 120\nshape1.Height = 53\nshape2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nshape2.Radius = 55\nshape2.Placement.Base = FreeCAD.Vector(11, 15, 13)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径40mm、管半径5mm的圆环和一个半径44mm的球体（位置在(-14, -16, -15)，并绕轴(-0.35, -0.84, 0.14)旋转336度），然后计算它们的组合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 40\nshape1.Radius2 = 5\nshape2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nshape2.Radius = 44\nshape2.Placement.Base = FreeCAD.Vector(-14, -16, -15)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.35, -0.84, 0.14), 336)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径55mm、高60mm的圆锥体和一个长44mm、宽44mm、高117mm的长方体（位置在(16, 37, 43)，并绕轴(-0.66, 0.51, 0.81)旋转221度），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cone\", \"Cone\")\nshape1.Radius1 = 55\nshape1.Radius2 = 0\nshape1.Height = 60\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 44\nshape2.Width = 44\nshape2.Height = 117\nshape2.Placement.Base = FreeCAD.Vector(16, 37, 43)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.66, 0.51, 0.81), 221)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径38mm、管半径5mm的圆环和一个长45mm、宽60mm、高96mm的长方体（位置在(11, -46, -28)，并绕轴(-0.39, 0.36, 0.25)旋转276度），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 38\nshape1.Radius2 = 5\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 45\nshape2.Width = 60\nshape2.Height = 96\nshape2.Placement.Base = FreeCAD.Vector(11, -46, -28)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.39, 0.36, 0.25), 276)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长98mm、宽129mm、高134mm的长方体和一个底面半径59mm、高126mm的圆锥体（位置在(15, 8, 38)，并绕轴(-0.91, -0.71, 0.47)旋转111度），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 98\nshape1.Width = 129\nshape1.Height = 134\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 59\nshape2.Radius2 = 0\nshape2.Height = 126\nshape2.Placement.Base = FreeCAD.Vector(15, 8, 38)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.91, -0.71, 0.47), 111)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长26mm、宽52mm、高42mm的长方体和一个底面半径43mm、高102mm的圆锥体（位置在(-43, 20, 48)，并绕轴(-0.68, 0.41, 0.16)旋转110度），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 26\nshape1.Width = 52\nshape1.Height = 42\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 43\nshape2.Radius2 = 0\nshape2.Height = 102\nshape2.Placement.Base = FreeCAD.Vector(-43, 20, 48)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.68, 0.41, 0.16), 110)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径54mm的球体和一个半径12mm、高94mm的圆柱体（位置在(24, 8, -36)，并绕轴(-0.41, -0.94, -0.79)旋转147度），然后计算它们的组合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 54\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 12\nshape2.Height = 94\nshape2.Placement.Base = FreeCAD.Vector(24, 8, -36)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.41, -0.94, -0.79), 147)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径20mm、高72mm的圆锥体和一个半径65mm的球体（位置在(-10, 16, -32)），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cone\", \"Cone\")\nshape1.Radius1 = 20\nshape1.Radius2 = 0\nshape1.Height = 72\nshape2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nshape2.Radius = 65\nshape2.Placement.Base = FreeCAD.Vector(-10, 16, -32)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径11mm的球体和一个主半径43mm、管半径12mm的圆环（位置在(23, -36, -21)，并绕轴(0.13, -0.24, 0.28)旋转262度），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 11\nshape2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nshape2.Radius1 = 43\nshape2.Radius2 = 12\nshape2.Placement.Base = FreeCAD.Vector(23, -36, -21)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.13, -0.24, 0.28), 262)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径12mm、高98mm的圆锥体和一个主半径89mm、管半径5mm的圆环（位置在(37, -9, -3)），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cone\", \"Cone\")\nshape1.Radius1 = 12\nshape1.Radius2 = 0\nshape1.Height = 98\nshape2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nshape2.Radius1 = 89\nshape2.Radius2 = 5\nshape2.Placement.Base = FreeCAD.Vector(37, -9, -3)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长89mm、宽115mm、高45mm的长方体和一个半径19mm、高103mm的圆柱体（位置在(-21, 28, 9)），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 89\nshape1.Width = 115\nshape1.Height = 45\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 19\nshape2.Height = 103\nshape2.Placement.Base = FreeCAD.Vector(-21, 28, 9)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径61mm、高66mm的圆柱体和一个长96mm、宽21mm、高104mm的长方体（位置在(7, -47, 28)，并绕轴(0.30, -0.76, 0.14)旋转78度），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\nshape1.Radius = 61\nshape1.Height = 66\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 96\nshape2.Width = 21\nshape2.Height = 104\nshape2.Placement.Base = FreeCAD.Vector(7, -47, 28)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.30, -0.76, 0.14), 78)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长86mm、宽108mm、高73mm的长方体和一个底面半径22mm、高66mm的圆锥体（位置在(-50, -6, -16)，并绕轴(-0.64, -0.92, 0.12)旋转301度），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 86\nshape1.Width = 108\nshape1.Height = 73\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 22\nshape2.Radius2 = 0\nshape2.Height = 66\nshape2.Placement.Base = FreeCAD.Vector(-50, -6, -16)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.64, -0.92, 0.12), 301)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径14mm、高49mm的圆柱体和一个长131mm、宽25mm、高78mm的长方体（位置在(-5, 41, 2)），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\nshape1.Radius = 14\nshape1.Height = 49\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 131\nshape2.Width = 25\nshape2.Height = 78\nshape2.Placement.Base = FreeCAD.Vector(-5, 41, 2)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径26mm的球体和一个长47mm、宽56mm、高75mm的长方体（位置在(-6, 0, -3)），然后计算它们的组合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 26\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 47\nshape2.Width = 56\nshape2.Height = 75\nshape2.Placement.Base = FreeCAD.Vector(-6, 0, -3)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径88mm、管半径13mm的圆环和一个半径64mm的球体（位置在(47, 28, 20)，并绕轴(-0.03, 0.25, 0.94)旋转220度），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 88\nshape1.Radius2 = 13\nshape2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nshape2.Radius = 64\nshape2.Placement.Base = FreeCAD.Vector(47, 28, 20)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.03, 0.25, 0.94), 220)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长51mm、宽141mm、高30mm的长方体和一个主半径94mm、管半径6mm的圆环（位置在(24, 15, 24)），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 51\nshape1.Width = 141\nshape1.Height = 30\nshape2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nshape2.Radius1 = 94\nshape2.Radius2 = 6\nshape2.Placement.Base = FreeCAD.Vector(24, 15, 24)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径52mm的球体和一个半径18mm、高141mm的圆柱体（位置在(42, -21, 45)），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 52\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 18\nshape2.Height = 141\nshape2.Placement.Base = FreeCAD.Vector(42, -21, 45)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径32mm、高111mm的圆锥体和一个长78mm、宽33mm、高91mm的长方体（位置在(1, -39, -9)，并绕轴(-0.85, -0.69, -0.56)旋转182度），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cone\", \"Cone\")\nshape1.Radius1 = 32\nshape1.Radius2 = 0\nshape1.Height = 111\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 78\nshape2.Width = 33\nshape2.Height = 91\nshape2.Placement.Base = FreeCAD.Vector(1, -39, -9)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.85, -0.69, -0.56), 182)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径23mm的球体和一个半径54mm、高23mm的圆柱体（位置在(-20, 3, -16)，并绕轴(0.54, -0.60, -0.14)旋转295度），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 23\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 54\nshape2.Height = 23\nshape2.Placement.Base = FreeCAD.Vector(-20, 3, -16)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.54, -0.60, -0.14), 295)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长103mm、宽93mm、高47mm的长方体和一个半径21mm、高128mm的圆柱体（位置在(28, -8, 45)，并绕轴(0.31, 0.34, 0.03)旋转125度），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 103\nshape1.Width = 93\nshape1.Height = 47\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 21\nshape2.Height = 128\nshape2.Placement.Base = FreeCAD.Vector(28, -8, 45)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.31, 0.34, 0.03), 125)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径40mm的球体和一个长135mm、宽101mm、高41mm的长方体（位置在(-6, -48, 39)，并绕轴(-0.66, -0.65, -0.05)旋转279度），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 40\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 135\nshape2.Width = 101\nshape2.Height = 41\nshape2.Placement.Base = FreeCAD.Vector(-6, -48, 39)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.66, -0.65, -0.05), 279)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径11mm的球体和一个底面半径64mm、高33mm的圆锥体（位置在(23, 13, -37)），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 11\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 64\nshape2.Radius2 = 0\nshape2.Height = 33\nshape2.Placement.Base = FreeCAD.Vector(23, 13, -37)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径50mm、高27mm的圆柱体和一个半径12mm的球体（位置在(-23, -13, 48)），然后计算它们的组合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\nshape1.Radius = 50\nshape1.Height = 27\nshape2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nshape2.Radius = 12\nshape2.Placement.Base = FreeCAD.Vector(-23, -13, 48)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径86mm、管半径7mm的圆环和一个半径13mm、高30mm的圆柱体（位置在(0, 43, -32)，并绕轴(-0.81, -0.96, -0.77)旋转289度），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 86\nshape1.Radius2 = 7\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 13\nshape2.Height = 30\nshape2.Placement.Base = FreeCAD.Vector(0, 43, -32)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.81, -0.96, -0.77), 289)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径56mm的球体和一个长39mm、宽125mm、高118mm的长方体（位置在(5, -31, 11)，并绕轴(-0.18, 0.49, 0.53)旋转329度），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 56\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 39\nshape2.Width = 125\nshape2.Height = 118\nshape2.Placement.Base = FreeCAD.Vector(5, -31, 11)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.18, 0.49, 0.53), 329)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长141mm、宽51mm、高30mm的长方体和一个底面半径70mm、高33mm的圆锥体（位置在(-18, -4, 27)，并绕轴(-0.89, 0.44, -0.42)旋转21度），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 141\nshape1.Width = 51\nshape1.Height = 30\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 70\nshape2.Radius2 = 0\nshape2.Height = 33\nshape2.Placement.Base = FreeCAD.Vector(-18, -4, 27)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.89, 0.44, -0.42), 21)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长143mm、宽104mm、高82mm的长方体和一个主半径60mm、管半径18mm的圆环（位置在(-18, 10, -11)），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 143\nshape1.Width = 104\nshape1.Height = 82\nshape2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nshape2.Radius1 = 60\nshape2.Radius2 = 18\nshape2.Placement.Base = FreeCAD.Vector(-18, 10, -11)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径17mm的球体和一个长111mm、宽108mm、高64mm的长方体（位置在(-48, -1, 18)），然后计算它们的组合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 17\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 111\nshape2.Width = 108\nshape2.Height = 64\nshape2.Placement.Base = FreeCAD.Vector(-48, -1, 18)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径45mm、高72mm的圆柱体和一个长24mm、宽76mm、高34mm的长方体（位置在(5, -34, 20)），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\nshape1.Radius = 45\nshape1.Height = 72\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 24\nshape2.Width = 76\nshape2.Height = 34\nshape2.Placement.Base = FreeCAD.Vector(5, -34, 20)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径79mm、管半径18mm的圆环和一个半径26mm的球体（位置在(-33, -4, -38)，并绕轴(-0.73, 0.17, -0.21)旋转152度），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 79\nshape1.Radius2 = 18\nshape2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nshape2.Radius = 26\nshape2.Placement.Base = FreeCAD.Vector(-33, -4, -38)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.73, 0.17, -0.21), 152)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径43mm、高102mm的圆锥体和一个长143mm、宽21mm、高52mm的长方体（位置在(27, 12, 49)），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cone\", \"Cone\")\nshape1.Radius1 = 43\nshape1.Radius2 = 0\nshape1.Height = 102\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 143\nshape2.Width = 21\nshape2.Height = 52\nshape2.Placement.Base = FreeCAD.Vector(27, 12, 49)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径36mm、管半径5mm的圆环和一个半径25mm的球体（位置在(49, -50, 23)），然后计算它们的组合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 36\nshape1.Radius2 = 5\nshape2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nshape2.Radius = 25\nshape2.Placement.Base = FreeCAD.Vector(49, -50, 23)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径57mm的球体和一个底面半径10mm、高79mm的圆锥体（位置在(29, 7, 22)），然后计算它们的组合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 57\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 10\nshape2.Radius2 = 0\nshape2.Height = 79\nshape2.Placement.Base = FreeCAD.Vector(29, 7, 22)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长119mm、宽79mm、高66mm的长方体和一个底面半径28mm、高51mm的圆锥体（位置在(46, 1, 8)，并绕轴(-0.08, 0.50, -0.07)旋转223度），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 119\nshape1.Width = 79\nshape1.Height = 66\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 28\nshape2.Radius2 = 0\nshape2.Height = 51\nshape2.Placement.Base = FreeCAD.Vector(46, 1, 8)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.08, 0.50, -0.07), 223)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径59mm、管半径9mm的圆环和一个长146mm、宽142mm、高34mm的长方体（位置在(31, -48, -33)），然后计算它们的组合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 59\nshape1.Radius2 = 9\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 146\nshape2.Width = 142\nshape2.Height = 34\nshape2.Placement.Base = FreeCAD.Vector(31, -48, -33)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径57mm的球体和一个半径66mm、高80mm的圆柱体（位置在(-15, -31, 7)），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 57\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 66\nshape2.Height = 80\nshape2.Placement.Base = FreeCAD.Vector(-15, -31, 7)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径28mm的球体和一个底面半径26mm、高63mm的圆锥体（位置在(-44, 29, -26)，并绕轴(-0.69, -0.74, -0.66)旋转348度），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 28\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 26\nshape2.Radius2 = 0\nshape2.Height = 63\nshape2.Placement.Base = FreeCAD.Vector(-44, 29, -26)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.69, -0.74, -0.66), 348)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个底面半径47mm、高100mm的圆锥体和一个主半径74mm、管半径7mm的圆环（位置在(-18, 28, -45)，并绕轴(0.36, 0.27, 0.00)旋转271度），然后计算它们的合并。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Cone\", \"Cone\")\nshape1.Radius1 = 47\nshape1.Radius2 = 0\nshape1.Height = 100\nshape2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nshape2.Radius1 = 74\nshape2.Radius2 = 7\nshape2.Placement.Base = FreeCAD.Vector(-18, 28, -45)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.36, 0.27, 0.00), 271)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径68mm的球体和一个半径59mm、高63mm的圆柱体（位置在(41, 22, 48)），然后计算它们的组合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 68\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 59\nshape2.Height = 63\nshape2.Placement.Base = FreeCAD.Vector(41, 22, 48)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径78mm、管半径18mm的圆环和一个长138mm、宽38mm、高131mm的长方体（位置在(-3, -24, 18)，并绕轴(0.41, -0.37, 0.18)旋转253度），然后计算它们的组合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 78\nshape1.Radius2 = 18\nshape2 = doc.addObject(\"Part::Box\", \"Box2\")\nshape2.Length = 138\nshape2.Width = 38\nshape2.Height = 131\nshape2.Placement.Base = FreeCAD.Vector(-3, -24, 18)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.41, -0.37, 0.18), 253)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长28mm、宽139mm、高115mm的长方体和一个底面半径37mm、高110mm的圆锥体（位置在(-33, -22, -16)），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Box\", \"Box\")\nshape1.Length = 28\nshape1.Width = 139\nshape1.Height = 115\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 37\nshape2.Radius2 = 0\nshape2.Height = 110\nshape2.Placement.Base = FreeCAD.Vector(-33, -22, -16)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径27mm的球体和一个底面半径31mm、高65mm的圆锥体（位置在(-16, 15, 43)），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 27\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 31\nshape2.Radius2 = 0\nshape2.Height = 65\nshape2.Placement.Base = FreeCAD.Vector(-16, 15, 43)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径82mm、管半径18mm的圆环和一个底面半径69mm、高58mm的圆锥体（位置在(-33, 33, 39)），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 82\nshape1.Radius2 = 18\nshape2 = doc.addObject(\"Part::Cone\", \"Cone2\")\nshape2.Radius1 = 69\nshape2.Radius2 = 0\nshape2.Height = 58\nshape2.Placement.Base = FreeCAD.Vector(-33, 33, 39)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径46mm、管半径5mm的圆环和一个半径12mm、高112mm的圆柱体（位置在(23, 45, -44)，并绕轴(0.12, -0.41, 0.40)旋转9度），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Torus\", \"Torus\")\nshape1.Radius1 = 46\nshape1.Radius2 = 5\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 12\nshape2.Height = 112\nshape2.Placement.Base = FreeCAD.Vector(23, 45, -44)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.12, -0.41, 0.40), 9)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径34mm、高194mm的圆柱体中差集一个半径44mm、高88mm的圆柱体（位置在(-14, -10, 87)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 34\nbase.Height = 194\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 44\ntool.Height = 88\ntool.Placement.Base = FreeCAD.Vector(-14, -10, 87)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长143mm、宽144mm、高101mm的长方体中打孔一个半径42mm的球体（位置在(43, 67, 12)，并绕轴(-0.34, 0.12, 0.52)旋转189度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 143\nbase.Width = 144\nbase.Height = 101\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 42\ntool.Placement.Base = FreeCAD.Vector(43, 67, 12)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.34, 0.12, 0.52), 189)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径119mm、管半径24mm的圆环中切除一个半径25mm的球体（位置在(-1, 14, 11)，并绕轴(-0.68, 0.89, 1.00)旋转336度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 119\nbase.Radius2 = 24\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 25\ntool.Placement.Base = FreeCAD.Vector(-1, 14, 11)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.68, 0.89, 1.00), 336)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径105mm、管半径25mm的圆环中差集一个半径15mm、高220mm的圆柱体（位置在(9, -3, -5)，并绕轴(-0.99, 0.02, -0.89)旋转310度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 105\nbase.Radius2 = 25\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 15\ntool.Height = 220\ntool.Placement.Base = FreeCAD.Vector(9, -3, -5)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.99, 0.02, -0.89), 310)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长182mm、宽174mm、高108mm的长方体中切除一个半径32mm、高51mm的圆柱体（位置在(87, 26, 20)，并绕轴(-0.86, 0.43, -0.06)旋转85度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 182\nbase.Width = 174\nbase.Height = 108\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 32\ntool.Height = 51\ntool.Placement.Base = FreeCAD.Vector(87, 26, 20)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.86, 0.43, -0.06), 85)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长116mm、宽114mm、高52mm的长方体中切除一个长41mm、宽41mm、高71mm的长方体（位置在(29, 41, 23)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 116\nbase.Width = 114\nbase.Height = 52\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 41\ntool.Width = 41\ntool.Height = 71\ntool.Placement.Base = FreeCAD.Vector(29, 41, 23)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长123mm、宽54mm、高137mm的长方体中打孔一个长32mm、宽84mm、高65mm的长方体（位置在(12, 9, 8)，并绕轴(0.39, -0.85, 0.44)旋转62度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 123\nbase.Width = 54\nbase.Height = 137\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 32\ntool.Width = 84\ntool.Height = 65\ntool.Placement.Base = FreeCAD.Vector(12, 9, 8)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.39, -0.85, 0.44), 62)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径78mm、管半径10mm的圆环中切除一个半径37mm、高222mm的圆柱体（位置在(-3, 14, -5)，并绕轴(0.15, 0.59, -0.54)旋转41度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 78\nbase.Radius2 = 10\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 37\ntool.Height = 222\ntool.Placement.Base = FreeCAD.Vector(-3, 14, -5)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.15, 0.59, -0.54), 41)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径61mm、管半径29mm的圆环中减去一个底面半径33mm、高74mm的圆锥体（位置在(5, -13, -24)，并绕轴(-0.66, -0.43, 0.92)旋转65度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 61\nbase.Radius2 = 29\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 33\ntool.Radius2 = 0\ntool.Height = 74\ntool.Placement.Base = FreeCAD.Vector(5, -13, -24)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.66, -0.43, 0.92), 65)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长120mm、宽157mm、高113mm的长方体中减去一个底面半径12mm、高138mm的圆锥体（位置在(44, 33, 45)，并绕轴(0.16, 0.83, 0.69)旋转340度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 120\nbase.Width = 157\nbase.Height = 113\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 12\ntool.Radius2 = 0\ntool.Height = 138\ntool.Placement.Base = FreeCAD.Vector(44, 33, 45)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.16, 0.83, 0.69), 340)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径80mm、高60mm的圆柱体中减去一个半径35mm的球体（位置在(-8, 29, 25)，并绕轴(-0.43, 0.04, 0.74)旋转355度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 80\nbase.Height = 60\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 35\ntool.Placement.Base = FreeCAD.Vector(-8, 29, 25)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.43, 0.04, 0.74), 355)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径47mm、高89mm的圆柱体中切除一个长87mm、宽80mm、高38mm的长方体（位置在(-5, 20, 21)，并绕轴(0.31, 0.79, -0.64)旋转13度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 47\nbase.Height = 89\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 87\ntool.Width = 80\ntool.Height = 38\ntool.Placement.Base = FreeCAD.Vector(-5, 20, 21)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.31, 0.79, -0.64), 13)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径67mm的球体中切除一个半径27mm的球体（位置在(16, 26, -21)，并绕轴(-0.24, 0.50, 0.85)旋转282度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 67\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 27\ntool.Placement.Base = FreeCAD.Vector(16, 26, -21)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.24, 0.50, 0.85), 282)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径75mm、高88mm的圆柱体中挖除一个底面半径45mm、高123mm的圆锥体（位置在(22, -31, 29)，并绕轴(-0.21, 0.42, 0.59)旋转317度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 75\nbase.Height = 88\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 45\ntool.Radius2 = 0\ntool.Height = 123\ntool.Placement.Base = FreeCAD.Vector(22, -31, 29)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.21, 0.42, 0.59), 317)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长175mm、宽116mm、高91mm的长方体中打孔一个半径37mm、高94mm的圆柱体（位置在(69, 17, 44)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 175\nbase.Width = 116\nbase.Height = 91\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 37\ntool.Height = 94\ntool.Placement.Base = FreeCAD.Vector(69, 17, 44)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长179mm、宽91mm、高100mm的长方体中打孔一个半径49mm的球体（位置在(76, 10, 1)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 179\nbase.Width = 91\nbase.Height = 100\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 49\ntool.Placement.Base = FreeCAD.Vector(76, 10, 1)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径84mm、高82mm的圆柱体中减去一个底面半径13mm、高66mm的圆锥体（位置在(24, 6, 8)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 84\nbase.Height = 82\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 13\ntool.Radius2 = 0\ntool.Height = 66\ntool.Placement.Base = FreeCAD.Vector(24, 6, 8)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长199mm、宽164mm、高140mm的长方体中差集一个半径20mm、高232mm的圆柱体（位置在(86, 53, 32)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 199\nbase.Width = 164\nbase.Height = 140\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 20\ntool.Height = 232\ntool.Placement.Base = FreeCAD.Vector(86, 53, 32)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径86mm的球体中挖除一个半径35mm的球体（位置在(43, -26, 56)，并绕轴(-0.05, 0.56, -0.18)旋转144度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 86\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 35\ntool.Placement.Base = FreeCAD.Vector(43, -26, 56)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.05, 0.56, -0.18), 144)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长184mm、宽135mm、高189mm的长方体中挖除一个底面半径26mm、高62mm的圆锥体（位置在(23, 32, 28)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 184\nbase.Width = 135\nbase.Height = 189\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 26\ntool.Radius2 = 0\ntool.Height = 62\ntool.Placement.Base = FreeCAD.Vector(23, 32, 28)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径90mm、高123mm的圆柱体中减去一个长20mm、宽21mm、高31mm的长方体（位置在(26, -36, 20)，并绕轴(0.62, -0.65, 0.79)旋转319度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 90\nbase.Height = 123\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 20\ntool.Width = 21\ntool.Height = 31\ntool.Placement.Base = FreeCAD.Vector(26, -36, 20)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.62, -0.65, 0.79), 319)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径77mm、管半径22mm的圆环中切除一个半径25mm、高151mm的圆柱体（位置在(-3, 18, -10)，并绕轴(-0.82, -0.41, -0.42)旋转176度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 77\nbase.Radius2 = 22\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 25\ntool.Height = 151\ntool.Placement.Base = FreeCAD.Vector(-3, 18, -10)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.82, -0.41, -0.42), 176)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径118mm、管半径19mm的圆环中减去一个底面半径38mm、高68mm的圆锥体（位置在(1, 0, -1)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 118\nbase.Radius2 = 19\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 38\ntool.Radius2 = 0\ntool.Height = 68\ntool.Placement.Base = FreeCAD.Vector(1, 0, -1)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径55mm、管半径15mm的圆环中挖除一个半径10mm、高131mm的圆柱体（位置在(-5, 12, -7)，并绕轴(0.15, 0.95, -0.93)旋转226度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 55\nbase.Radius2 = 15\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 10\ntool.Height = 131\ntool.Placement.Base = FreeCAD.Vector(-5, 12, -7)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.15, 0.95, -0.93), 226)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径106mm、管半径28mm的圆环中减去一个长27mm、宽94mm、高68mm的长方体（位置在(-15, -12, 13)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 106\nbase.Radius2 = 28\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 27\ntool.Width = 94\ntool.Height = 68\ntool.Placement.Base = FreeCAD.Vector(-15, -12, 13)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长138mm、宽155mm、高112mm的长方体中差集一个半径39mm的球体（位置在(51, 73, 24)，并绕轴(-0.33, 0.48, -0.76)旋转157度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 138\nbase.Width = 155\nbase.Height = 112\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 39\ntool.Placement.Base = FreeCAD.Vector(51, 73, 24)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.33, 0.48, -0.76), 157)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径52mm、管半径23mm的圆环中减去一个长60mm、宽92mm、高72mm的长方体（位置在(2, 11, -5)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 52\nbase.Radius2 = 23\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 60\ntool.Width = 92\ntool.Height = 72\ntool.Placement.Base = FreeCAD.Vector(2, 11, -5)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径48mm、高64mm的圆柱体中挖除一个长46mm、宽43mm、高54mm的长方体（位置在(-21, 9, 13)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 48\nbase.Height = 64\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 46\ntool.Width = 43\ntool.Height = 54\ntool.Placement.Base = FreeCAD.Vector(-21, 9, 13)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径72mm、高166mm的圆柱体中差集一个长81mm、宽87mm、高79mm的长方体（位置在(-15, -36, 69)，并绕轴(0.33, 0.46, 0.48)旋转248度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 72\nbase.Height = 166\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 81\ntool.Width = 87\ntool.Height = 79\ntool.Placement.Base = FreeCAD.Vector(-15, -36, 69)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.33, 0.46, 0.48), 248)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径81mm的球体中切除一个半径50mm、高87mm的圆柱体（位置在(28, 56, 37)，并绕轴(-0.87, 0.07, 0.56)旋转99度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 81\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 50\ntool.Height = 87\ntool.Placement.Base = FreeCAD.Vector(28, 56, 37)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.87, 0.07, 0.56), 99)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径80mm、高57mm的圆柱体中减去一个半径15mm、高154mm的圆柱体（位置在(-34, 37, 0)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 80\nbase.Height = 57\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 15\ntool.Height = 154\ntool.Placement.Base = FreeCAD.Vector(-34, 37, 0)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长59mm、宽130mm、高156mm的长方体中切除一个底面半径15mm、高110mm的圆锥体（位置在(5, 10, 57)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 59\nbase.Width = 130\nbase.Height = 156\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 15\ntool.Radius2 = 0\ntool.Height = 110\ntool.Placement.Base = FreeCAD.Vector(5, 10, 57)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长119mm、宽194mm、高52mm的长方体中切除一个半径13mm、高101mm的圆柱体（位置在(24, 16, 19)，并绕轴(0.74, -0.16, 0.16)旋转280度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 119\nbase.Width = 194\nbase.Height = 52\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 13\ntool.Height = 101\ntool.Placement.Base = FreeCAD.Vector(24, 16, 19)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.74, -0.16, 0.16), 280)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径62mm的球体中差集一个半径34mm、高123mm的圆柱体（位置在(30, 9, -21)，并绕轴(-0.42, -0.97, 0.33)旋转295度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 62\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 34\ntool.Height = 123\ntool.Placement.Base = FreeCAD.Vector(30, 9, -21)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.42, -0.97, 0.33), 295)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长81mm、宽73mm、高89mm的长方体中挖除一个半径41mm、高192mm的圆柱体（位置在(19, 25, 31)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 81\nbase.Width = 73\nbase.Height = 89\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 41\ntool.Height = 192\ntool.Placement.Base = FreeCAD.Vector(19, 25, 31)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径114mm、管半径24mm的圆环中差集一个底面半径44mm、高59mm的圆锥体（位置在(0, 10, -18)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 114\nbase.Radius2 = 24\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 44\ntool.Radius2 = 0\ntool.Height = 59\ntool.Placement.Base = FreeCAD.Vector(0, 10, -18)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长83mm、宽65mm、高111mm的长方体中打孔一个长26mm、宽64mm、高57mm的长方体（位置在(3, 23, 24)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 83\nbase.Width = 65\nbase.Height = 111\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 26\ntool.Width = 64\ntool.Height = 57\ntool.Placement.Base = FreeCAD.Vector(3, 23, 24)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径68mm、高143mm的圆柱体中差集一个半径20mm的球体（位置在(-31, 31, 36)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 68\nbase.Height = 143\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 20\ntool.Placement.Base = FreeCAD.Vector(-31, 31, 36)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径92mm、高117mm的圆柱体中差集一个底面半径45mm、高85mm的圆锥体（位置在(35, -15, 3)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 92\nbase.Height = 117\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 45\ntool.Radius2 = 0\ntool.Height = 85\ntool.Placement.Base = FreeCAD.Vector(35, -15, 3)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径59mm的球体中打孔一个长36mm、宽71mm、高90mm的长方体（位置在(-6, -37, -3)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 59\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 36\ntool.Width = 71\ntool.Height = 90\ntool.Placement.Base = FreeCAD.Vector(-6, -37, -3)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径92mm的球体中差集一个半径25mm的球体（位置在(1, 47, 11)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 92\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 25\ntool.Placement.Base = FreeCAD.Vector(1, 47, 11)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径83mm、管半径23mm的圆环中打孔一个半径24mm的球体（位置在(-16, -5, -10)，并绕轴(-0.77, 0.80, -0.21)旋转336度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 83\nbase.Radius2 = 23\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 24\ntool.Placement.Base = FreeCAD.Vector(-16, -5, -10)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.77, 0.80, -0.21), 336)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径79mm的球体中打孔一个底面半径16mm、高112mm的圆锥体（位置在(-37, 17, -55)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 79\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 16\ntool.Radius2 = 0\ntool.Height = 112\ntool.Placement.Base = FreeCAD.Vector(-37, 17, -55)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径95mm的球体中减去一个半径49mm的球体（位置在(-5, -25, 33)，并绕轴(0.23, -0.33, -0.23)旋转347度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 95\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 49\ntool.Placement.Base = FreeCAD.Vector(-5, -25, 33)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.23, -0.33, -0.23), 347)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径56mm、管半径20mm的圆环中打孔一个半径41mm的球体（位置在(9, -4, 18)，并绕轴(-0.86, -0.89, 0.88)旋转231度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 56\nbase.Radius2 = 20\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 41\ntool.Placement.Base = FreeCAD.Vector(9, -4, 18)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.86, -0.89, 0.88), 231)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长77mm、宽177mm、高149mm的长方体中减去一个底面半径49mm、高130mm的圆锥体（位置在(10, 34, 48)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 77\nbase.Width = 177\nbase.Height = 149\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 49\ntool.Radius2 = 0\ntool.Height = 130\ntool.Placement.Base = FreeCAD.Vector(10, 34, 48)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径99mm、高64mm的圆柱体中挖除一个长48mm、宽98mm、高72mm的长方体（位置在(-47, -26, 1)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 99\nbase.Height = 64\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 48\ntool.Width = 98\ntool.Height = 72\ntool.Placement.Base = FreeCAD.Vector(-47, -26, 1)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径74mm的球体中挖除一个半径28mm的球体（位置在(-21, 7, -31)，并绕轴(-0.27, -0.07, -0.37)旋转327度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 74\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 28\ntool.Placement.Base = FreeCAD.Vector(-21, 7, -31)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.27, -0.07, -0.37), 327)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径73mm、高154mm的圆柱体中减去一个半径32mm的球体（位置在(20, 20, 59)，并绕轴(0.30, 0.89, -0.26)旋转316度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 73\nbase.Height = 154\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 32\ntool.Placement.Base = FreeCAD.Vector(20, 20, 59)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.30, 0.89, -0.26), 316)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长85mm、宽157mm、高84mm的长方体中挖除一个底面半径29mm、高135mm的圆锥体（位置在(23, 37, 28)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 85\nbase.Width = 157\nbase.Height = 84\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 29\ntool.Radius2 = 0\ntool.Height = 135\ntool.Placement.Base = FreeCAD.Vector(23, 37, 28)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径80mm的球体中切除一个底面半径23mm、高139mm的圆锥体（位置在(49, 40, 41)，并绕轴(0.29, 0.57, 0.79)旋转27度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 80\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 23\ntool.Radius2 = 0\ntool.Height = 139\ntool.Placement.Base = FreeCAD.Vector(49, 40, 41)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.29, 0.57, 0.79), 27)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径113mm、管半径15mm的圆环中切除一个底面半径42mm、高101mm的圆锥体（位置在(-2, -9, 4)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 113\nbase.Radius2 = 15\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 42\ntool.Radius2 = 0\ntool.Height = 101\ntool.Placement.Base = FreeCAD.Vector(-2, -9, 4)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径50mm、高58mm的圆柱体中挖除一个半径30mm的球体（位置在(0, -20, 16)，并绕轴(0.43, 0.91, -0.53)旋转266度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 50\nbase.Height = 58\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 30\ntool.Placement.Base = FreeCAD.Vector(0, -20, 16)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.43, 0.91, -0.53), 266)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径76mm的球体中切除一个半径50mm、高223mm的圆柱体（位置在(-51, -13, -29)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 76\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 50\ntool.Height = 223\ntool.Placement.Base = FreeCAD.Vector(-51, -13, -29)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径54mm的球体中打孔一个长67mm、宽20mm、高27mm的长方体（位置在(34, -35, 32)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 54\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 67\ntool.Width = 20\ntool.Height = 27\ntool.Placement.Base = FreeCAD.Vector(34, -35, 32)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径80mm、高136mm的圆柱体中挖除一个底面半径47mm、高103mm的圆锥体（位置在(19, 28, 57)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 80\nbase.Height = 136\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 47\ntool.Radius2 = 0\ntool.Height = 103\ntool.Placement.Base = FreeCAD.Vector(19, 28, 57)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径68mm、高63mm的圆柱体中切除一个底面半径21mm、高56mm的圆锥体（位置在(29, 23, 3)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 68\nbase.Height = 63\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 21\ntool.Radius2 = 0\ntool.Height = 56\ntool.Placement.Base = FreeCAD.Vector(29, 23, 3)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径107mm、管半径16mm的圆环中切除一个半径50mm的球体（位置在(15, 12, -1)，并绕轴(-0.17, -0.44, 0.87)旋转248度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 107\nbase.Radius2 = 16\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 50\ntool.Placement.Base = FreeCAD.Vector(15, 12, -1)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.17, -0.44, 0.87), 248)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径50mm、高155mm的圆柱体中切除一个长48mm、宽30mm、高34mm的长方体（位置在(20, 18, 10)，并绕轴(-0.24, -0.69, -0.76)旋转77度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 50\nbase.Height = 155\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 48\ntool.Width = 30\ntool.Height = 34\ntool.Placement.Base = FreeCAD.Vector(20, 18, 10)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.24, -0.69, -0.76), 77)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径68mm的球体中差集一个半径23mm的球体（位置在(34, -38, -24)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 68\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 23\ntool.Placement.Base = FreeCAD.Vector(34, -38, -24)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长107mm、宽80mm、高191mm的长方体中差集一个底面半径23mm、高76mm的圆锥体（位置在(37, 0, 26)，并绕轴(-0.62, 0.46, -0.29)旋转134度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 107\nbase.Width = 80\nbase.Height = 191\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 23\ntool.Radius2 = 0\ntool.Height = 76\ntool.Placement.Base = FreeCAD.Vector(37, 0, 26)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.62, 0.46, -0.29), 134)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径89mm的球体中减去一个长64mm、宽90mm、高56mm的长方体（位置在(-50, -59, 26)，并绕轴(0.53, -0.28, -0.84)旋转348度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 89\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 64\ntool.Width = 90\ntool.Height = 56\ntool.Placement.Base = FreeCAD.Vector(-50, -59, 26)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.53, -0.28, -0.84), 348)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径77mm、高145mm的圆柱体中挖除一个半径48mm的球体（位置在(-17, -14, 8)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 77\nbase.Height = 145\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 48\ntool.Placement.Base = FreeCAD.Vector(-17, -14, 8)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径88mm的球体中挖除一个半径37mm、高96mm的圆柱体（位置在(-47, -33, 39)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 88\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 37\ntool.Height = 96\ntool.Placement.Base = FreeCAD.Vector(-47, -33, 39)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径80mm的球体中减去一个长79mm、宽43mm、高27mm的长方体（位置在(25, 5, 16)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 80\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 79\ntool.Width = 43\ntool.Height = 27\ntool.Placement.Base = FreeCAD.Vector(25, 5, 16)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长85mm、宽68mm、高84mm的长方体中挖除一个半径20mm的球体（位置在(2, 28, 16)，并绕轴(-0.69, -0.68, -0.27)旋转115度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 85\nbase.Width = 68\nbase.Height = 84\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 20\ntool.Placement.Base = FreeCAD.Vector(2, 28, 16)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.69, -0.68, -0.27), 115)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长86mm、宽144mm、高199mm的长方体中切除一个半径45mm的球体（位置在(24, 26, 14)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 86\nbase.Width = 144\nbase.Height = 199\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 45\ntool.Placement.Base = FreeCAD.Vector(24, 26, 14)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径71mm、高174mm的圆柱体中打孔一个半径43mm、高215mm的圆柱体（位置在(34, -13, 36)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 71\nbase.Height = 174\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 43\ntool.Height = 215\ntool.Placement.Base = FreeCAD.Vector(34, -13, 36)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长50mm、宽127mm、高141mm的长方体中差集一个半径26mm的球体（位置在(11, 18, 1)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 50\nbase.Width = 127\nbase.Height = 141\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 26\ntool.Placement.Base = FreeCAD.Vector(11, 18, 1)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径77mm、高150mm的圆柱体中挖除一个底面半径24mm、高85mm的圆锥体（位置在(-8, -13, 28)，并绕轴(0.79, -0.69, -0.66)旋转14度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 77\nbase.Height = 150\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 24\ntool.Radius2 = 0\ntool.Height = 85\ntool.Placement.Base = FreeCAD.Vector(-8, -13, 28)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.79, -0.69, -0.66), 14)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径67mm、高91mm的圆柱体中切除一个半径24mm的球体（位置在(-12, 32, 2)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 67\nbase.Height = 91\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 24\ntool.Placement.Base = FreeCAD.Vector(-12, 32, 2)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长136mm、宽195mm、高94mm的长方体中挖除一个半径14mm、高120mm的圆柱体（位置在(59, 32, 33)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 136\nbase.Width = 195\nbase.Height = 94\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 14\ntool.Height = 120\ntool.Placement.Base = FreeCAD.Vector(59, 32, 33)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径50mm、管半径27mm的圆环中挖除一个半径47mm的球体（位置在(-4, 11, -27)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 50\nbase.Radius2 = 27\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 47\ntool.Placement.Base = FreeCAD.Vector(-4, 11, -27)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径37mm、高184mm的圆柱体中打孔一个半径24mm的球体（位置在(-16, 14, 83)，并绕轴(0.05, -0.98, 0.99)旋转298度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 37\nbase.Height = 184\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 24\ntool.Placement.Base = FreeCAD.Vector(-16, 14, 83)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.05, -0.98, 0.99), 298)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径68mm的球体中打孔一个半径24mm的球体（位置在(-26, -26, 41)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 68\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 24\ntool.Placement.Base = FreeCAD.Vector(-26, -26, 41)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径90mm、管半径17mm的圆环中切除一个长22mm、宽61mm、高51mm的长方体（位置在(-4, 2, 15)，并绕轴(-0.47, -0.83, 0.44)旋转247度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 90\nbase.Radius2 = 17\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 22\ntool.Width = 61\ntool.Height = 51\ntool.Placement.Base = FreeCAD.Vector(-4, 2, 15)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.47, -0.83, 0.44), 247)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长82mm、宽72mm、高192mm的长方体中差集一个半径38mm、高99mm的圆柱体（位置在(32, 9, 25)，并绕轴(-0.46, -0.28, 0.51)旋转119度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 82\nbase.Width = 72\nbase.Height = 192\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 38\ntool.Height = 99\ntool.Placement.Base = FreeCAD.Vector(32, 9, 25)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.46, -0.28, 0.51), 119)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长60mm、宽109mm、高132mm的长方体中切除一个底面半径25mm、高76mm的圆锥体（位置在(0, 17, 41)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 60\nbase.Width = 109\nbase.Height = 132\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 25\ntool.Radius2 = 0\ntool.Height = 76\ntool.Placement.Base = FreeCAD.Vector(0, 17, 41)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长161mm、宽199mm、高151mm的长方体中挖除一个长99mm、宽84mm、高90mm的长方体（位置在(30, 15, 53)，并绕轴(0.31, -0.63, 0.09)旋转25度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 161\nbase.Width = 199\nbase.Height = 151\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 99\ntool.Width = 84\ntool.Height = 90\ntool.Placement.Base = FreeCAD.Vector(30, 15, 53)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.31, -0.63, 0.09), 25)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径70mm的球体中减去一个半径47mm的球体（位置在(48, 47, 13)，并绕轴(-0.60, 0.83, 0.02)旋转264度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 70\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 47\ntool.Placement.Base = FreeCAD.Vector(48, 47, 13)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.60, 0.83, 0.02), 264)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径86mm、高152mm的圆柱体中差集一个半径11mm、高176mm的圆柱体（位置在(24, -43, 57)，并绕轴(-0.40, 0.13, 0.48)旋转148度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 86\nbase.Height = 152\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 11\ntool.Height = 176\ntool.Placement.Base = FreeCAD.Vector(24, -43, 57)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.40, 0.13, 0.48), 148)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长95mm、宽84mm、高60mm的长方体中切除一个长59mm、宽84mm、高36mm的长方体（位置在(26, 5, 14)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 95\nbase.Width = 84\nbase.Height = 60\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 59\ntool.Width = 84\ntool.Height = 36\ntool.Placement.Base = FreeCAD.Vector(26, 5, 14)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径57mm、高126mm的圆柱体中切除一个半径44mm的球体（位置在(9, 21, 45)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 57\nbase.Height = 126\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 44\ntool.Placement.Base = FreeCAD.Vector(9, 21, 45)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长105mm、宽167mm、高63mm的长方体中差集一个半径23mm的球体（位置在(30, 24, 4)，并绕轴(-0.15, 0.61, 0.27)旋转296度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 105\nbase.Width = 167\nbase.Height = 63\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 23\ntool.Placement.Base = FreeCAD.Vector(30, 24, 4)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.15, 0.61, 0.27), 296)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径82mm的球体中挖除一个半径25mm的球体（位置在(36, -2, -8)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 82\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 25\ntool.Placement.Base = FreeCAD.Vector(36, -2, -8)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径72mm、管半径21mm的圆环中挖除一个底面半径23mm、高59mm的圆锥体（位置在(-10, -20, -17)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 72\nbase.Radius2 = 21\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 23\ntool.Radius2 = 0\ntool.Height = 59\ntool.Placement.Base = FreeCAD.Vector(-10, -20, -17)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径50mm、高94mm的圆柱体中差集一个半径46mm的球体（位置在(-3, -12, 9)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 50\nbase.Height = 94\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 46\ntool.Placement.Base = FreeCAD.Vector(-3, -12, 9)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径73mm、高89mm的圆柱体中切除一个底面半径45mm、高114mm的圆锥体（位置在(0, -20, 34)，并绕轴(-0.87, -0.70, -0.59)旋转309度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 73\nbase.Height = 89\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 45\ntool.Radius2 = 0\ntool.Height = 114\ntool.Placement.Base = FreeCAD.Vector(0, -20, 34)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.87, -0.70, -0.59), 309)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径87mm、管半径12mm的圆环中切除一个长67mm、宽99mm、高77mm的长方体（位置在(-3, -2, 3)，并绕轴(-0.47, -0.02, -0.97)旋转100度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 87\nbase.Radius2 = 12\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 67\ntool.Width = 99\ntool.Height = 77\ntool.Placement.Base = FreeCAD.Vector(-3, -2, 3)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.47, -0.02, -0.97), 100)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长137mm、宽109mm、高120mm的长方体中切除一个半径44mm的球体（位置在(4, 51, 34)，并绕轴(0.56, -0.72, 0.96)旋转308度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 137\nbase.Width = 109\nbase.Height = 120\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 44\ntool.Placement.Base = FreeCAD.Vector(4, 51, 34)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.56, -0.72, 0.96), 308)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径60mm、管半径29mm的圆环中差集一个半径49mm的球体（位置在(16, 2, -13)，并绕轴(-0.70, -0.64, -0.21)旋转198度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 60\nbase.Radius2 = 29\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 49\ntool.Placement.Base = FreeCAD.Vector(16, 2, -13)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.70, -0.64, -0.21), 198)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个半径83mm、高150mm的圆柱体中减去一个半径47mm、高55mm的圆柱体（位置在(32, -31, 12)，并绕轴(0.30, -0.46, -0.55)旋转354度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 83\nbase.Height = 150\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 47\ntool.Height = 55\ntool.Placement.Base = FreeCAD.Vector(32, -31, 12)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.30, -0.46, -0.55), 354)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长69mm、宽156mm、高146mm的长方体中切除一个半径35mm的球体（位置在(15, 22, 6)，并绕轴(-0.64, -0.40, -0.40)旋转146度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 69\nbase.Width = 156\nbase.Height = 146\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 35\ntool.Placement.Base = FreeCAD.Vector(15, 22, 6)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.64, -0.40, -0.40), 146)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径60mm、管半径16mm的圆环中切除一个长36mm、宽65mm、高56mm的长方体（位置在(9, -20, -3)，并绕轴(-0.05, -0.51, -0.71)旋转155度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 60\nbase.Radius2 = 16\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 36\ntool.Width = 65\ntool.Height = 56\ntool.Placement.Base = FreeCAD.Vector(9, -20, -3)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.05, -0.51, -0.71), 155)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径104mm、管半径19mm的圆环中打孔一个底面半径11mm、高88mm的圆锥体（位置在(-10, -3, 12)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 104\nbase.Radius2 = 19\ntool = doc.addObject(\"Part::Cone\", \"Tool\")\ntool.Radius1 = 11\ntool.Radius2 = 0\ntool.Height = 88\ntool.Placement.Base = FreeCAD.Vector(-10, -3, 12)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径75mm、管半径11mm的圆环中挖除一个长84mm、宽40mm、高89mm的长方体（位置在(15, -13, -11)，并绕轴(0.72, 0.80, 0.34)旋转261度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 75\nbase.Radius2 = 11\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 84\ntool.Width = 40\ntool.Height = 89\ntool.Placement.Base = FreeCAD.Vector(15, -13, -11)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.72, 0.80, 0.34), 261)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长68mm、宽90mm、高78mm的长方体中切除一个半径23mm的球体（位置在(16, 31, 2)，并绕轴(-0.37, -0.09, 0.01)旋转202度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 68\nbase.Width = 90\nbase.Height = 78\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 23\ntool.Placement.Base = FreeCAD.Vector(16, 31, 2)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.37, -0.09, 0.01), 202)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长185mm、宽181mm、高154mm的长方体中挖除一个半径28mm、高233mm的圆柱体（位置在(15, 47, 46)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 185\nbase.Width = 181\nbase.Height = 154\ntool = doc.addObject(\"Part::Cylinder\", \"Tool\")\ntool.Radius = 28\ntool.Height = 233\ntool.Placement.Base = FreeCAD.Vector(15, 47, 46)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长163mm、宽137mm、高97mm的长方体中差集一个半径25mm的球体（位置在(21, 4, 43)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 163\nbase.Width = 137\nbase.Height = 97\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 25\ntool.Placement.Base = FreeCAD.Vector(21, 4, 43)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个主半径68mm、管半径22mm的圆环中挖除一个长36mm、宽41mm、高66mm的长方体（位置在(14, 3, -5)，并绕轴(0.34, 0.47, 0.99)旋转211度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Torus\", \"Base\")\nbase.Radius1 = 68\nbase.Radius2 = 22\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 36\ntool.Width = 41\ntool.Height = 66\ntool.Placement.Base = FreeCAD.Vector(14, 3, -5)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.34, 0.47, 0.99), 211)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个主半径68mm、管半径19mm的圆环和一个半径41mm的球体（位置在(8, -8, -9)）的交集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Torus\", \"Torus1\")\nobj1.Radius1 = 68\nobj1.Radius2 = 19\nobj2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nobj2.Radius = 41\nobj2.Placement.Base = FreeCAD.Vector(8, -8, -9)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个主半径50mm、管半径13mm的圆环和一个半径57mm、高58mm的圆柱体（位置在(-4, 16, -5)，并绕轴(0.45, -0.59, -0.44)旋转250度）的交集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Torus\", \"Torus1\")\nobj1.Radius1 = 50\nobj1.Radius2 = 13\nobj2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nobj2.Radius = 57\nobj2.Height = 58\nobj2.Placement.Base = FreeCAD.Vector(-4, 16, -5)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.45, -0.59, -0.44), 250)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个长68mm、宽74mm、高107mm的长方体和一个主半径76mm、管半径23mm的圆环（位置在(-8, -7, 17)）的重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Box\", \"Box1\")\nobj1.Length = 68\nobj1.Width = 74\nobj1.Height = 107\nobj2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nobj2.Radius1 = 76\nobj2.Radius2 = 23\nobj2.Placement.Base = FreeCAD.Vector(-8, -7, 17)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个主半径68mm、管半径14mm的圆环和一个半径50mm的球体（位置在(-14, 1, -12)，并绕轴(0.53, 0.49, -0.15)旋转20度）的重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Torus\", \"Torus1\")\nobj1.Radius1 = 68\nobj1.Radius2 = 14\nobj2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nobj2.Radius = 50\nobj2.Placement.Base = FreeCAD.Vector(-14, 1, -12)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.53, 0.49, -0.15), 20)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径68mm、高56mm的圆柱体和一个主半径74mm、管半径12mm的圆环（位置在(1, 0, -13)，并绕轴(-0.71, 0.69, -0.32)旋转157度）的交集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Cylinder\", \"Cylinder1\")\nobj1.Radius = 68\nobj1.Height = 56\nobj2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nobj2.Radius1 = 74\nobj2.Radius2 = 12\nobj2.Placement.Base = FreeCAD.Vector(1, 0, -13)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.71, 0.69, -0.32), 157)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个主半径88mm、管半径24mm的圆环和一个半径53mm的球体（位置在(-7, 4, -23)，并绕轴(0.79, -0.68, 0.74)旋转150度）的重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Torus\", \"Torus1\")\nobj1.Radius1 = 88\nobj1.Radius2 = 24\nobj2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nobj2.Radius = 53\nobj2.Placement.Base = FreeCAD.Vector(-7, 4, -23)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.79, -0.68, 0.74), 150)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径59mm的球体和一个半径63mm、高99mm的圆柱体（位置在(-27, -24, -27)）的相交部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Sphere\", \"Sphere1\")\nobj1.Radius = 59\nobj2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nobj2.Radius = 63\nobj2.Height = 99\nobj2.Placement.Base = FreeCAD.Vector(-27, -24, -27)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个长117mm、宽90mm、高137mm的长方体和一个半径51mm、高88mm的圆柱体（位置在(7, 10, -14)，并绕轴(-0.07, 0.91, -0.27)旋转213度）的交集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Box\", \"Box1\")\nobj1.Length = 117\nobj1.Width = 90\nobj1.Height = 137\nobj2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nobj2.Radius = 51\nobj2.Height = 88\nobj2.Placement.Base = FreeCAD.Vector(7, 10, -14)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.07, 0.91, -0.27), 213)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个长53mm、宽139mm、高121mm的长方体和一个半径74mm、高139mm的圆柱体（位置在(5, -22, -9)）的共同部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Box\", \"Box1\")\nobj1.Length = 53\nobj1.Width = 139\nobj1.Height = 121\nobj2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nobj2.Radius = 74\nobj2.Height = 139\nobj2.Placement.Base = FreeCAD.Vector(5, -22, -9)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个主半径77mm、管半径11mm的圆环和一个半径41mm的球体（位置在(15, -26, -3)，并绕轴(-0.72, 0.78, -0.55)旋转354度）的交集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Torus\", \"Torus1\")\nobj1.Radius1 = 77\nobj1.Radius2 = 11\nobj2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nobj2.Radius = 41\nobj2.Placement.Base = FreeCAD.Vector(15, -26, -3)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.72, 0.78, -0.55), 354)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个主半径58mm、管半径24mm的圆环和一个半径41mm的球体（位置在(-22, 27, -4)）的共同部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Torus\", \"Torus1\")\nobj1.Radius1 = 58\nobj1.Radius2 = 24\nobj2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nobj2.Radius = 41\nobj2.Placement.Base = FreeCAD.Vector(-22, 27, -4)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个主半径64mm、管半径10mm的圆环和一个长92mm、宽130mm、高120mm的长方体（位置在(9, -17, 10)）的共同部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Torus\", \"Torus1\")\nobj1.Radius1 = 64\nobj1.Radius2 = 10\nobj2 = doc.addObject(\"Part::Box\", \"Box2\")\nobj2.Length = 92\nobj2.Width = 130\nobj2.Height = 120\nobj2.Placement.Base = FreeCAD.Vector(9, -17, 10)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径50mm的球体和一个长68mm、宽129mm、高118mm的长方体（位置在(-29, -27, -26)，并绕轴(-0.97, -0.62, -0.05)旋转156度）的相交部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Sphere\", \"Sphere1\")\nobj1.Radius = 50\nobj2 = doc.addObject(\"Part::Box\", \"Box2\")\nobj2.Length = 68\nobj2.Width = 129\nobj2.Height = 118\nobj2.Placement.Base = FreeCAD.Vector(-29, -27, -26)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.97, -0.62, -0.05), 156)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径56mm、高134mm的圆柱体和一个长52mm、宽56mm、高58mm的长方体（位置在(2, 6, 6)，并绕轴(0.84, -0.24, -0.66)旋转278度）的相交部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Cylinder\", \"Cylinder1\")\nobj1.Radius = 56\nobj1.Height = 134\nobj2 = doc.addObject(\"Part::Box\", \"Box2\")\nobj2.Length = 52\nobj2.Width = 56\nobj2.Height = 58\nobj2.Placement.Base = FreeCAD.Vector(2, 6, 6)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.84, -0.24, -0.66), 278)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径30mm、高144mm的圆柱体和一个主半径51mm、管半径16mm的圆环（位置在(8, 12, -16)，并绕轴(0.04, -0.38, -0.19)旋转330度）的交集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Cylinder\", \"Cylinder1\")\nobj1.Radius = 30\nobj1.Height = 144\nobj2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nobj2.Radius1 = 51\nobj2.Radius2 = 16\nobj2.Placement.Base = FreeCAD.Vector(8, 12, -16)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.04, -0.38, -0.19), 330)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个主半径84mm、管半径17mm的圆环和一个半径79mm的球体（位置在(9, -17, 14)，并绕轴(0.77, -0.44, 0.69)旋转257度）的重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Torus\", \"Torus1\")\nobj1.Radius1 = 84\nobj1.Radius2 = 17\nobj2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nobj2.Radius = 79\nobj2.Placement.Base = FreeCAD.Vector(9, -17, 14)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.77, -0.44, 0.69), 257)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个主半径84mm、管半径21mm的圆环和一个半径45mm的球体（位置在(-9, 28, 5)）的共同部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Torus\", \"Torus1\")\nobj1.Radius1 = 84\nobj1.Radius2 = 21\nobj2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nobj2.Radius = 45\nobj2.Placement.Base = FreeCAD.Vector(-9, 28, 5)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径78mm、高79mm的圆柱体和一个长53mm、宽62mm、高129mm的长方体（位置在(1, 26, 15)，并绕轴(-0.25, -0.66, 0.99)旋转187度）的相交部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Cylinder\", \"Cylinder1\")\nobj1.Radius = 78\nobj1.Height = 79\nobj2 = doc.addObject(\"Part::Box\", \"Box2\")\nobj2.Length = 53\nobj2.Width = 62\nobj2.Height = 129\nobj2.Placement.Base = FreeCAD.Vector(1, 26, 15)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.25, -0.66, 0.99), 187)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个主半径87mm、管半径14mm的圆环和一个半径31mm、高83mm的圆柱体（位置在(32, 38, -9)）的共同部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Torus\", \"Torus1\")\nobj1.Radius1 = 87\nobj1.Radius2 = 14\nobj2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nobj2.Radius = 31\nobj2.Height = 83\nobj2.Placement.Base = FreeCAD.Vector(32, 38, -9)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径71mm的球体和一个半径72mm、高89mm的圆柱体（位置在(-4, -1, 34)）的重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Sphere\", \"Sphere1\")\nobj1.Radius = 71\nobj2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nobj2.Radius = 72\nobj2.Height = 89\nobj2.Placement.Base = FreeCAD.Vector(-4, -1, 34)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个长98mm、宽143mm、高72mm的长方体和一个主半径96mm、管半径30mm的圆环（位置在(-31, -29, -19)）的重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Box\", \"Box1\")\nobj1.Length = 98\nobj1.Width = 143\nobj1.Height = 72\nobj2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nobj2.Radius1 = 96\nobj2.Radius2 = 30\nobj2.Placement.Base = FreeCAD.Vector(-31, -29, -19)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径65mm、高78mm的圆柱体和一个长132mm、宽124mm、高54mm的长方体（位置在(16, -32, -8)，并绕轴(-0.29, 0.80, -0.29)旋转15度）的相交部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Cylinder\", \"Cylinder1\")\nobj1.Radius = 65\nobj1.Height = 78\nobj2 = doc.addObject(\"Part::Box\", \"Box2\")\nobj2.Length = 132\nobj2.Width = 124\nobj2.Height = 54\nobj2.Placement.Base = FreeCAD.Vector(16, -32, -8)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.29, 0.80, -0.29), 15)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个长140mm、宽90mm、高58mm的长方体和一个半径39mm、高116mm的圆柱体（位置在(-7, 10, 7)，并绕轴(-0.36, 0.82, -0.40)旋转310度）的相交部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Box\", \"Box1\")\nobj1.Length = 140\nobj1.Width = 90\nobj1.Height = 58\nobj2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nobj2.Radius = 39\nobj2.Height = 116\nobj2.Placement.Base = FreeCAD.Vector(-7, 10, 7)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.36, 0.82, -0.40), 310)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径50mm、高86mm的圆柱体和一个半径73mm的球体（位置在(-20, 10, -17)）的相交部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Cylinder\", \"Cylinder1\")\nobj1.Radius = 50\nobj1.Height = 86\nobj2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nobj2.Radius = 73\nobj2.Placement.Base = FreeCAD.Vector(-20, 10, -17)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个长110mm、宽149mm、高111mm的长方体和一个半径57mm的球体（位置在(4, 34, 33)，并绕轴(0.63, 0.59, 0.35)旋转200度）的重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Box\", \"Box1\")\nobj1.Length = 110\nobj1.Width = 149\nobj1.Height = 111\nobj2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nobj2.Radius = 57\nobj2.Placement.Base = FreeCAD.Vector(4, 34, 33)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.63, 0.59, 0.35), 200)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个长79mm、宽53mm、高144mm的长方体和一个主半径71mm、管半径16mm的圆环（位置在(-14, -26, 6)，并绕轴(0.10, 0.33, -0.96)旋转249度）的重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Box\", \"Box1\")\nobj1.Length = 79\nobj1.Width = 53\nobj1.Height = 144\nobj2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nobj2.Radius1 = 71\nobj2.Radius2 = 16\nobj2.Placement.Base = FreeCAD.Vector(-14, -26, 6)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.10, 0.33, -0.96), 249)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个长125mm、宽126mm、高118mm的长方体和一个主半径61mm、管半径29mm的圆环（位置在(-54, -48, -51)，并绕轴(0.73, -0.99, 0.76)旋转240度）的共同部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Box\", \"Box1\")\nobj1.Length = 125\nobj1.Width = 126\nobj1.Height = 118\nobj2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nobj2.Radius1 = 61\nobj2.Radius2 = 29\nobj2.Placement.Base = FreeCAD.Vector(-54, -48, -51)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.73, -0.99, 0.76), 240)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径71mm的球体和一个主半径61mm、管半径18mm的圆环（位置在(2, 36, 15)，并绕轴(0.81, -0.16, 0.13)旋转123度）的相交部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Sphere\", \"Sphere1\")\nobj1.Radius = 71\nobj2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nobj2.Radius1 = 61\nobj2.Radius2 = 18\nobj2.Placement.Base = FreeCAD.Vector(2, 36, 15)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.81, -0.16, 0.13), 123)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径77mm的球体和一个长128mm、宽117mm、高57mm的长方体（位置在(-11, -46, 34)）的交集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Sphere\", \"Sphere1\")\nobj1.Radius = 77\nobj2 = doc.addObject(\"Part::Box\", \"Box2\")\nobj2.Length = 128\nobj2.Width = 117\nobj2.Height = 57\nobj2.Placement.Base = FreeCAD.Vector(-11, -46, 34)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径65mm、高61mm的圆柱体和一个主半径69mm、管半径29mm的圆环（位置在(14, 30, -4)，并绕轴(0.04, 0.66, -0.27)旋转330度）的相交部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Cylinder\", \"Cylinder1\")\nobj1.Radius = 65\nobj1.Height = 61\nobj2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nobj2.Radius1 = 69\nobj2.Radius2 = 29\nobj2.Placement.Base = FreeCAD.Vector(14, 30, -4)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.04, 0.66, -0.27), 330)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个长80mm、宽111mm、高115mm的长方体和一个主半径94mm、管半径17mm的圆环（位置在(25, -34, 1)，并绕轴(-0.83, 0.17, 0.59)旋转131度）的重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Box\", \"Box1\")\nobj1.Length = 80\nobj1.Width = 111\nobj1.Height = 115\nobj2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nobj2.Radius1 = 94\nobj2.Radius2 = 17\nobj2.Placement.Base = FreeCAD.Vector(25, -34, 1)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.83, 0.17, 0.59), 131)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径49mm、高145mm的圆柱体和一个长143mm、宽111mm、高139mm的长方体（位置在(-20, -25, -34)）的共同部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Cylinder\", \"Cylinder1\")\nobj1.Radius = 49\nobj1.Height = 145\nobj2 = doc.addObject(\"Part::Box\", \"Box2\")\nobj2.Length = 143\nobj2.Width = 111\nobj2.Height = 139\nobj2.Placement.Base = FreeCAD.Vector(-20, -25, -34)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径41mm、高69mm的圆柱体和一个长142mm、宽100mm、高125mm的长方体（位置在(-13, -5, 10)，并绕轴(-0.29, -0.90, -0.44)旋转285度）的重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Cylinder\", \"Cylinder1\")\nobj1.Radius = 41\nobj1.Height = 69\nobj2 = doc.addObject(\"Part::Box\", \"Box2\")\nobj2.Length = 142\nobj2.Width = 100\nobj2.Height = 125\nobj2.Placement.Base = FreeCAD.Vector(-13, -5, 10)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.29, -0.90, -0.44), 285)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个长120mm、宽146mm、高93mm的长方体和一个半径57mm的球体（位置在(-6, 45, -3)）的交集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Box\", \"Box1\")\nobj1.Length = 120\nobj1.Width = 146\nobj1.Height = 93\nobj2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nobj2.Radius = 57\nobj2.Placement.Base = FreeCAD.Vector(-6, 45, -3)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个主半径90mm、管半径23mm的圆环和一个半径52mm的球体（位置在(20, 22, -21)）的重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Torus\", \"Torus1\")\nobj1.Radius1 = 90\nobj1.Radius2 = 23\nobj2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nobj2.Radius = 52\nobj2.Placement.Base = FreeCAD.Vector(20, 22, -21)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径74mm的球体和一个半径54mm、高139mm的圆柱体（位置在(47, 30, 27)，并绕轴(0.53, 0.30, 0.92)旋转29度）的重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Sphere\", \"Sphere1\")\nobj1.Radius = 74\nobj2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nobj2.Radius = 54\nobj2.Height = 139\nobj2.Placement.Base = FreeCAD.Vector(47, 30, 27)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.53, 0.30, 0.92), 29)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径71mm、高136mm的圆柱体和一个长64mm、宽89mm、高79mm的长方体（位置在(-3, -23, 7)，并绕轴(0.72, 0.40, -0.05)旋转183度）的相交部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Cylinder\", \"Cylinder1\")\nobj1.Radius = 71\nobj1.Height = 136\nobj2 = doc.addObject(\"Part::Box\", \"Box2\")\nobj2.Length = 64\nobj2.Width = 89\nobj2.Height = 79\nobj2.Placement.Base = FreeCAD.Vector(-3, -23, 7)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.72, 0.40, -0.05), 183)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个长84mm、宽74mm、高147mm的长方体和一个半径61mm的球体（位置在(-4, 14, 35)，并绕轴(-0.87, 0.68, 0.68)旋转263度）的共同部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Box\", \"Box1\")\nobj1.Length = 84\nobj1.Width = 74\nobj1.Height = 147\nobj2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nobj2.Radius = 61\nobj2.Placement.Base = FreeCAD.Vector(-4, 14, 35)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.87, 0.68, 0.68), 263)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个长60mm、宽99mm、高51mm的长方体和一个主半径75mm、管半径26mm的圆环（位置在(5, -19, -20)）的共同部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Box\", \"Box1\")\nobj1.Length = 60\nobj1.Width = 99\nobj1.Height = 51\nobj2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nobj2.Radius1 = 75\nobj2.Radius2 = 26\nobj2.Placement.Base = FreeCAD.Vector(5, -19, -20)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个长91mm、宽115mm、高112mm的长方体和一个半径55mm、高145mm的圆柱体（位置在(-38, -27, 28)）的交集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Box\", \"Box1\")\nobj1.Length = 91\nobj1.Width = 115\nobj1.Height = 112\nobj2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nobj2.Radius = 55\nobj2.Height = 145\nobj2.Placement.Base = FreeCAD.Vector(-38, -27, 28)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径45mm的球体和一个长60mm、宽95mm、高147mm的长方体（位置在(22, -31, -7)，并绕轴(-0.02, 1.00, -0.69)旋转9度）的交集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Sphere\", \"Sphere1\")\nobj1.Radius = 45\nobj2 = doc.addObject(\"Part::Box\", \"Box2\")\nobj2.Length = 60\nobj2.Width = 95\nobj2.Height = 147\nobj2.Placement.Base = FreeCAD.Vector(22, -31, -7)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.02, 1.00, -0.69), 9)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个主半径53mm、管半径26mm的圆环和一个半径63mm、高60mm的圆柱体（位置在(17, -9, -3)，并绕轴(-0.94, 0.40, 0.98)旋转307度）的相交部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Torus\", \"Torus1\")\nobj1.Radius1 = 53\nobj1.Radius2 = 26\nobj2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nobj2.Radius = 63\nobj2.Height = 60\nobj2.Placement.Base = FreeCAD.Vector(17, -9, -3)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.94, 0.40, 0.98), 307)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个长134mm、宽91mm、高75mm的长方体和一个半径46mm、高104mm的圆柱体（位置在(0, 2, 10)）的共同部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Box\", \"Box1\")\nobj1.Length = 134\nobj1.Width = 91\nobj1.Height = 75\nobj2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nobj2.Radius = 46\nobj2.Height = 104\nobj2.Placement.Base = FreeCAD.Vector(0, 2, 10)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径47mm的球体和一个主半径96mm、管半径13mm的圆环（位置在(-15, -9, -3)）的重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Sphere\", \"Sphere1\")\nobj1.Radius = 47\nobj2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nobj2.Radius1 = 96\nobj2.Radius2 = 13\nobj2.Placement.Base = FreeCAD.Vector(-15, -9, -3)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径66mm、高67mm的圆柱体和一个主半径100mm、管半径25mm的圆环（位置在(-25, -16, -11)，并绕轴(0.63, -0.89, 0.18)旋转124度）的共同部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Cylinder\", \"Cylinder1\")\nobj1.Radius = 66\nobj1.Height = 67\nobj2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nobj2.Radius1 = 100\nobj2.Radius2 = 25\nobj2.Placement.Base = FreeCAD.Vector(-25, -16, -11)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.63, -0.89, 0.18), 124)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径45mm、高76mm的圆柱体和一个长53mm、宽119mm、高106mm的长方体（位置在(3, -1, -10)，并绕轴(0.73, -0.98, -0.07)旋转199度）的交集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Cylinder\", \"Cylinder1\")\nobj1.Radius = 45\nobj1.Height = 76\nobj2 = doc.addObject(\"Part::Box\", \"Box2\")\nobj2.Length = 53\nobj2.Width = 119\nobj2.Height = 106\nobj2.Placement.Base = FreeCAD.Vector(3, -1, -10)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.73, -0.98, -0.07), 199)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个长136mm、宽58mm、高93mm的长方体和一个主半径87mm、管半径26mm的圆环（位置在(-27, -9, -17)，并绕轴(0.89, -0.88, -0.33)旋转290度）的共同部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Box\", \"Box1\")\nobj1.Length = 136\nobj1.Width = 58\nobj1.Height = 93\nobj2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nobj2.Radius1 = 87\nobj2.Radius2 = 26\nobj2.Placement.Base = FreeCAD.Vector(-27, -9, -17)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.89, -0.88, -0.33), 290)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个主半径66mm、管半径10mm的圆环和一个长52mm、宽130mm、高108mm的长方体（位置在(23, 32, -3)，并绕轴(-0.01, 0.51, -0.74)旋转177度）的交集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Torus\", \"Torus1\")\nobj1.Radius1 = 66\nobj1.Radius2 = 10\nobj2 = doc.addObject(\"Part::Box\", \"Box2\")\nobj2.Length = 52\nobj2.Width = 130\nobj2.Height = 108\nobj2.Placement.Base = FreeCAD.Vector(23, 32, -3)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.01, 0.51, -0.74), 177)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径71mm、高81mm的圆柱体和一个主半径53mm、管半径18mm的圆环（位置在(-4, 3, -17)，并绕轴(0.59, 0.21, 0.98)旋转52度）的相交部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Cylinder\", \"Cylinder1\")\nobj1.Radius = 71\nobj1.Height = 81\nobj2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nobj2.Radius1 = 53\nobj2.Radius2 = 18\nobj2.Placement.Base = FreeCAD.Vector(-4, 3, -17)\nobj2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.59, 0.21, 0.98), 52)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个半径35mm、高56mm的圆柱体和一个主半径71mm、管半径28mm的圆环（位置在(1, 17, -7)）的重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Cylinder\", \"Cylinder1\")\nobj1.Radius = 35\nobj1.Height = 56\nobj2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nobj2.Radius1 = 71\nobj2.Radius2 = 28\nobj2.Placement.Base = FreeCAD.Vector(1, 17, -7)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长144mm、宽58mm、高54mm的长方体，然后与一个半径29mm、高122mm的圆柱体（位置在(-17, -44, -17)）保留重叠部分，然后与一个长34mm、宽72mm、高36mm的长方体（位置在(34, -50, -33)，并绕轴(0.88, -0.82, -0.30)旋转119度）取共同部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 144\nbase.Width = 58\nbase.Height = 54\ntool1 = doc.addObject(\"Part::Cylinder\", \"Tool1\")\ntool1.Radius = 29\ntool1.Height = 122\ntool1.Placement.Base = FreeCAD.Vector(-17, -44, -17)\nresult1 = doc.addObject(\"Part::Common\", \"Common1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Box\", \"Tool2\")\ntool2.Length = 34\ntool2.Width = 72\ntool2.Height = 36\ntool2.Placement.Base = FreeCAD.Vector(34, -50, -33)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.88, -0.82, -0.30), 119)\nresult2 = doc.addObject(\"Part::Common\", \"Common2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径57mm的球体，然后将一个长62mm、宽27mm、高32mm的长方体（位置在(44, 33, 41)）添加到结果中，然后将一个长86mm、宽53mm、高62mm的长方体（位置在(23, 50, 22)，并绕轴(-0.64, 0.67, -0.26)旋转303度）添加到结果中。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 57\ntool1 = doc.addObject(\"Part::Box\", \"Tool1\")\ntool1.Length = 62\ntool1.Width = 27\ntool1.Height = 32\ntool1.Placement.Base = FreeCAD.Vector(44, 33, 41)\nresult1 = doc.addObject(\"Part::Fuse\", \"Fuse1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Box\", \"Tool2\")\ntool2.Length = 86\ntool2.Width = 53\ntool2.Height = 62\ntool2.Placement.Base = FreeCAD.Vector(23, 50, 22)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.64, 0.67, -0.26), 303)\nresult2 = doc.addObject(\"Part::Fuse\", \"Fuse2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径77mm的球体，然后从结果中切除一个半径22mm的球体（位置在(-10, -2, 21)），然后与一个底面半径15mm、高64mm的圆锥体（位置在(37, -14, -47)，并绕轴(0.72, -0.52, -0.83)旋转31度）求交集，然后与一个半径36mm的球体（位置在(50, -37, -37)）取共同部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 77\ntool1 = doc.addObject(\"Part::Sphere\", \"Tool1\")\ntool1.Radius = 22\ntool1.Placement.Base = FreeCAD.Vector(-10, -2, 21)\nresult1 = doc.addObject(\"Part::Cut\", \"Cut1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cone\", \"Tool2\")\ntool2.Radius1 = 15\ntool2.Radius2 = 0\ntool2.Height = 64\ntool2.Placement.Base = FreeCAD.Vector(37, -14, -47)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.72, -0.52, -0.83), 31)\nresult2 = doc.addObject(\"Part::Common\", \"Common2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Sphere\", \"Tool3\")\ntool3.Radius = 36\ntool3.Placement.Base = FreeCAD.Vector(50, -37, -37)\nresult3 = doc.addObject(\"Part::Common\", \"Common3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长76mm、宽85mm、高88mm的长方体，然后从结果中切除一个底面半径48mm、高47mm的圆锥体（位置在(-36, 41, -32)，并绕轴(-0.47, 0.93, -0.65)旋转314度），然后与一个半径31mm的球体（位置在(-6, 29, -42)，并绕轴(-0.23, 0.43, 0.77)旋转113度）保留重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 76\nbase.Width = 85\nbase.Height = 88\ntool1 = doc.addObject(\"Part::Cone\", \"Tool1\")\ntool1.Radius1 = 48\ntool1.Radius2 = 0\ntool1.Height = 47\ntool1.Placement.Base = FreeCAD.Vector(-36, 41, -32)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.47, 0.93, -0.65), 314)\nresult1 = doc.addObject(\"Part::Cut\", \"Cut1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Sphere\", \"Tool2\")\ntool2.Radius = 31\ntool2.Placement.Base = FreeCAD.Vector(-6, 29, -42)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.23, 0.43, 0.77), 113)\nresult2 = doc.addObject(\"Part::Common\", \"Common2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径76mm、高54mm的圆柱体，然后将一个长43mm、宽89mm、高20mm的长方体（位置在(-17, 13, 11)）融合到结果中，然后从结果中减去一个长28mm、宽60mm、高70mm的长方体（位置在(-5, -21, 10)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 76\nbase.Height = 54\ntool1 = doc.addObject(\"Part::Box\", \"Tool1\")\ntool1.Length = 43\ntool1.Width = 89\ntool1.Height = 20\ntool1.Placement.Base = FreeCAD.Vector(-17, 13, 11)\nresult1 = doc.addObject(\"Part::Fuse\", \"Fuse1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Box\", \"Tool2\")\ntool2.Length = 28\ntool2.Width = 60\ntool2.Height = 70\ntool2.Placement.Base = FreeCAD.Vector(-5, -21, 10)\nresult2 = doc.addObject(\"Part::Cut\", \"Cut2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径80mm、高138mm的圆柱体，然后从结果中减去一个半径45mm、高72mm的圆柱体（位置在(4, -19, 17)），然后从结果中打孔一个半径27mm的球体（位置在(1, -24, -10)），然后与一个半径40mm、高37mm的圆柱体（位置在(32, 16, -49)）取共同部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 80\nbase.Height = 138\ntool1 = doc.addObject(\"Part::Cylinder\", \"Tool1\")\ntool1.Radius = 45\ntool1.Height = 72\ntool1.Placement.Base = FreeCAD.Vector(4, -19, 17)\nresult1 = doc.addObject(\"Part::Cut\", \"Cut1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Sphere\", \"Tool2\")\ntool2.Radius = 27\ntool2.Placement.Base = FreeCAD.Vector(1, -24, -10)\nresult2 = doc.addObject(\"Part::Cut\", \"Cut2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Cylinder\", \"Tool3\")\ntool3.Radius = 40\ntool3.Height = 37\ntool3.Placement.Base = FreeCAD.Vector(32, 16, -49)\nresult3 = doc.addObject(\"Part::Common\", \"Common3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径30mm、高75mm的圆柱体，然后将一个半径26mm、高138mm的圆柱体（位置在(-29, -12, -29)，并绕轴(0.91, 0.65, 0.86)旋转57度）合并到结果中，然后从结果中打孔一个底面半径19mm、高64mm的圆锥体（位置在(9, -44, -10)），然后将一个半径25mm、高76mm的圆柱体（位置在(47, -34, 34)，并绕轴(-0.85, 0.69, 0.10)旋转213度）并入到结果中。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 30\nbase.Height = 75\ntool1 = doc.addObject(\"Part::Cylinder\", \"Tool1\")\ntool1.Radius = 26\ntool1.Height = 138\ntool1.Placement.Base = FreeCAD.Vector(-29, -12, -29)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.91, 0.65, 0.86), 57)\nresult1 = doc.addObject(\"Part::Fuse\", \"Fuse1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cone\", \"Tool2\")\ntool2.Radius1 = 19\ntool2.Radius2 = 0\ntool2.Height = 64\ntool2.Placement.Base = FreeCAD.Vector(9, -44, -10)\nresult2 = doc.addObject(\"Part::Cut\", \"Cut2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Cylinder\", \"Tool3\")\ntool3.Radius = 25\ntool3.Height = 76\ntool3.Placement.Base = FreeCAD.Vector(47, -34, 34)\ntool3.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.85, 0.69, 0.10), 213)\nresult3 = doc.addObject(\"Part::Fuse\", \"Fuse3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长150mm、宽50mm、高55mm的长方体，然后与一个半径21mm、高66mm的圆柱体（位置在(-30, 36, 38)，并绕轴(-0.09, 0.44, -0.67)旋转245度）取共同部分，然后从结果中减去一个半径20mm的球体（位置在(5, 44, -2)，并绕轴(-0.16, -0.00, 0.23)旋转200度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 150\nbase.Width = 50\nbase.Height = 55\ntool1 = doc.addObject(\"Part::Cylinder\", \"Tool1\")\ntool1.Radius = 21\ntool1.Height = 66\ntool1.Placement.Base = FreeCAD.Vector(-30, 36, 38)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.09, 0.44, -0.67), 245)\nresult1 = doc.addObject(\"Part::Common\", \"Common1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Sphere\", \"Tool2\")\ntool2.Radius = 20\ntool2.Placement.Base = FreeCAD.Vector(5, 44, -2)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.16, -0.00, 0.23), 200)\nresult2 = doc.addObject(\"Part::Cut\", \"Cut2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长146mm、宽107mm、高106mm的长方体，然后将一个底面半径33mm、高83mm的圆锥体（位置在(29, 44, 45)，并绕轴(-0.26, 0.62, -0.42)旋转341度）合并到结果中，然后与一个半径40mm的球体（位置在(-42, 25, 25)，并绕轴(0.70, -0.35, -0.06)旋转128度）保留重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 146\nbase.Width = 107\nbase.Height = 106\ntool1 = doc.addObject(\"Part::Cone\", \"Tool1\")\ntool1.Radius1 = 33\ntool1.Radius2 = 0\ntool1.Height = 83\ntool1.Placement.Base = FreeCAD.Vector(29, 44, 45)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.26, 0.62, -0.42), 341)\nresult1 = doc.addObject(\"Part::Fuse\", \"Fuse1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Sphere\", \"Tool2\")\ntool2.Radius = 40\ntool2.Placement.Base = FreeCAD.Vector(-42, 25, 25)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.70, -0.35, -0.06), 128)\nresult2 = doc.addObject(\"Part::Common\", \"Common2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径53mm的球体，然后与一个底面半径30mm、高95mm的圆锥体（位置在(-47, -35, 9)）取共同部分，然后与一个半径45mm、高106mm的圆柱体（位置在(-26, -47, -6)）取共同部分，然后从结果中切除一个长83mm、宽67mm、高42mm的长方体（位置在(1, 43, 9)，并绕轴(0.11, 0.98, -0.03)旋转276度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 53\ntool1 = doc.addObject(\"Part::Cone\", \"Tool1\")\ntool1.Radius1 = 30\ntool1.Radius2 = 0\ntool1.Height = 95\ntool1.Placement.Base = FreeCAD.Vector(-47, -35, 9)\nresult1 = doc.addObject(\"Part::Common\", \"Common1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cylinder\", \"Tool2\")\ntool2.Radius = 45\ntool2.Height = 106\ntool2.Placement.Base = FreeCAD.Vector(-26, -47, -6)\nresult2 = doc.addObject(\"Part::Common\", \"Common2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Box\", \"Tool3\")\ntool3.Length = 83\ntool3.Width = 67\ntool3.Height = 42\ntool3.Placement.Base = FreeCAD.Vector(1, 43, 9)\ntool3.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.11, 0.98, -0.03), 276)\nresult3 = doc.addObject(\"Part::Cut\", \"Cut3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长142mm、宽124mm、高113mm的长方体，然后与一个底面半径49mm、高96mm的圆锥体（位置在(-17, -10, 45)，并绕轴(0.06, -0.13, -0.88)旋转143度）取共同部分，然后从结果中减去一个底面半径30mm、高84mm的圆锥体（位置在(33, -16, 28)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 142\nbase.Width = 124\nbase.Height = 113\ntool1 = doc.addObject(\"Part::Cone\", \"Tool1\")\ntool1.Radius1 = 49\ntool1.Radius2 = 0\ntool1.Height = 96\ntool1.Placement.Base = FreeCAD.Vector(-17, -10, 45)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.06, -0.13, -0.88), 143)\nresult1 = doc.addObject(\"Part::Common\", \"Common1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cone\", \"Tool2\")\ntool2.Radius1 = 30\ntool2.Radius2 = 0\ntool2.Height = 84\ntool2.Placement.Base = FreeCAD.Vector(33, -16, 28)\nresult2 = doc.addObject(\"Part::Cut\", \"Cut2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长146mm、宽141mm、高110mm的长方体，然后与一个底面半径16mm、高99mm的圆锥体（位置在(41, -40, 28)，并绕轴(0.97, -0.60, -0.45)旋转192度）求交集，然后与一个半径31mm的球体（位置在(-16, -49, -23)）保留重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 146\nbase.Width = 141\nbase.Height = 110\ntool1 = doc.addObject(\"Part::Cone\", \"Tool1\")\ntool1.Radius1 = 16\ntool1.Radius2 = 0\ntool1.Height = 99\ntool1.Placement.Base = FreeCAD.Vector(41, -40, 28)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.97, -0.60, -0.45), 192)\nresult1 = doc.addObject(\"Part::Common\", \"Common1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Sphere\", \"Tool2\")\ntool2.Radius = 31\ntool2.Placement.Base = FreeCAD.Vector(-16, -49, -23)\nresult2 = doc.addObject(\"Part::Common\", \"Common2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径55mm、高130mm的圆柱体，然后从结果中挖除一个长87mm、宽40mm、高70mm的长方体（位置在(-5, 18, 17)，并绕轴(-0.38, -0.24, 0.01)旋转138度），然后将一个底面半径34mm、高37mm的圆锥体（位置在(35, -29, -7)）合并到结果中。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 55\nbase.Height = 130\ntool1 = doc.addObject(\"Part::Box\", \"Tool1\")\ntool1.Length = 87\ntool1.Width = 40\ntool1.Height = 70\ntool1.Placement.Base = FreeCAD.Vector(-5, 18, 17)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.38, -0.24, 0.01), 138)\nresult1 = doc.addObject(\"Part::Cut\", \"Cut1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cone\", \"Tool2\")\ntool2.Radius1 = 34\ntool2.Radius2 = 0\ntool2.Height = 37\ntool2.Placement.Base = FreeCAD.Vector(35, -29, -7)\nresult2 = doc.addObject(\"Part::Fuse\", \"Fuse2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长76mm、宽86mm、高82mm的长方体，然后与一个半径42mm、高80mm的圆柱体（位置在(-4, 0, 38)）取共同部分，然后将一个半径36mm、高87mm的圆柱体（位置在(49, 44, -15)，并绕轴(0.01, 0.05, -0.79)旋转1度）融合到结果中，然后将一个长51mm、宽22mm、高83mm的长方体（位置在(-34, -17, 36)，并绕轴(0.75, -0.09, 0.73)旋转204度）合并到结果中。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 76\nbase.Width = 86\nbase.Height = 82\ntool1 = doc.addObject(\"Part::Cylinder\", \"Tool1\")\ntool1.Radius = 42\ntool1.Height = 80\ntool1.Placement.Base = FreeCAD.Vector(-4, 0, 38)\nresult1 = doc.addObject(\"Part::Common\", \"Common1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cylinder\", \"Tool2\")\ntool2.Radius = 36\ntool2.Height = 87\ntool2.Placement.Base = FreeCAD.Vector(49, 44, -15)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.01, 0.05, -0.79), 1)\nresult2 = doc.addObject(\"Part::Fuse\", \"Fuse2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Box\", \"Tool3\")\ntool3.Length = 51\ntool3.Width = 22\ntool3.Height = 83\ntool3.Placement.Base = FreeCAD.Vector(-34, -17, 36)\ntool3.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.75, -0.09, 0.73), 204)\nresult3 = doc.addObject(\"Part::Fuse\", \"Fuse3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长57mm、宽146mm、高96mm的长方体，然后与一个半径31mm、高101mm的圆柱体（位置在(33, -15, 22)）求交集，然后从结果中切除一个长30mm、宽46mm、高91mm的长方体（位置在(-45, -14, 1)），然后将一个半径15mm的球体（位置在(-44, -18, -16)）融合到结果中。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 57\nbase.Width = 146\nbase.Height = 96\ntool1 = doc.addObject(\"Part::Cylinder\", \"Tool1\")\ntool1.Radius = 31\ntool1.Height = 101\ntool1.Placement.Base = FreeCAD.Vector(33, -15, 22)\nresult1 = doc.addObject(\"Part::Common\", \"Common1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Box\", \"Tool2\")\ntool2.Length = 30\ntool2.Width = 46\ntool2.Height = 91\ntool2.Placement.Base = FreeCAD.Vector(-45, -14, 1)\nresult2 = doc.addObject(\"Part::Cut\", \"Cut2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Sphere\", \"Tool3\")\ntool3.Radius = 15\ntool3.Placement.Base = FreeCAD.Vector(-44, -18, -16)\nresult3 = doc.addObject(\"Part::Fuse\", \"Fuse3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径68mm的球体，然后将一个半径40mm、高90mm的圆柱体（位置在(-6, 19, 0)，并绕轴(-0.50, 0.05, 0.93)旋转26度）添加到结果中，然后与一个半径41mm、高47mm的圆柱体（位置在(32, -30, 11)）求交集，然后将一个半径29mm的球体（位置在(-24, -20, 47)，并绕轴(-0.04, 0.16, -0.38)旋转221度）添加到结果中。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 68\ntool1 = doc.addObject(\"Part::Cylinder\", \"Tool1\")\ntool1.Radius = 40\ntool1.Height = 90\ntool1.Placement.Base = FreeCAD.Vector(-6, 19, 0)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.50, 0.05, 0.93), 26)\nresult1 = doc.addObject(\"Part::Fuse\", \"Fuse1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cylinder\", \"Tool2\")\ntool2.Radius = 41\ntool2.Height = 47\ntool2.Placement.Base = FreeCAD.Vector(32, -30, 11)\nresult2 = doc.addObject(\"Part::Common\", \"Common2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Sphere\", \"Tool3\")\ntool3.Radius = 29\ntool3.Placement.Base = FreeCAD.Vector(-24, -20, 47)\ntool3.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.04, 0.16, -0.38), 221)\nresult3 = doc.addObject(\"Part::Fuse\", \"Fuse3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径57mm、高110mm的圆柱体，然后将一个半径45mm、高73mm的圆柱体（位置在(-36, 34, 19)）并入到结果中，然后与一个半径29mm的球体（位置在(-39, -24, -41)，并绕轴(-0.06, 0.81, 0.35)旋转195度）保留重叠部分，然后将一个半径49mm、高60mm的圆柱体（位置在(-20, 46, -39)）融合到结果中。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 57\nbase.Height = 110\ntool1 = doc.addObject(\"Part::Cylinder\", \"Tool1\")\ntool1.Radius = 45\ntool1.Height = 73\ntool1.Placement.Base = FreeCAD.Vector(-36, 34, 19)\nresult1 = doc.addObject(\"Part::Fuse\", \"Fuse1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Sphere\", \"Tool2\")\ntool2.Radius = 29\ntool2.Placement.Base = FreeCAD.Vector(-39, -24, -41)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.06, 0.81, 0.35), 195)\nresult2 = doc.addObject(\"Part::Common\", \"Common2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Cylinder\", \"Tool3\")\ntool3.Radius = 49\ntool3.Height = 60\ntool3.Placement.Base = FreeCAD.Vector(-20, 46, -39)\nresult3 = doc.addObject(\"Part::Fuse\", \"Fuse3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径36mm、高98mm的圆柱体，然后从结果中减去一个底面半径36mm、高45mm的圆锥体（位置在(33, 6, -22)，并绕轴(0.64, 0.12, 0.80)旋转124度），然后与一个半径30mm的球体（位置在(40, -44, 19)）求交集，然后从结果中减去一个底面半径10mm、高83mm的圆锥体（位置在(12, -6, 23)，并绕轴(0.96, 0.51, -0.57)旋转191度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 36\nbase.Height = 98\ntool1 = doc.addObject(\"Part::Cone\", \"Tool1\")\ntool1.Radius1 = 36\ntool1.Radius2 = 0\ntool1.Height = 45\ntool1.Placement.Base = FreeCAD.Vector(33, 6, -22)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.64, 0.12, 0.80), 124)\nresult1 = doc.addObject(\"Part::Cut\", \"Cut1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Sphere\", \"Tool2\")\ntool2.Radius = 30\ntool2.Placement.Base = FreeCAD.Vector(40, -44, 19)\nresult2 = doc.addObject(\"Part::Common\", \"Common2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Cone\", \"Tool3\")\ntool3.Radius1 = 10\ntool3.Radius2 = 0\ntool3.Height = 83\ntool3.Placement.Base = FreeCAD.Vector(12, -6, 23)\ntool3.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.96, 0.51, -0.57), 191)\nresult3 = doc.addObject(\"Part::Cut\", \"Cut3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长109mm、宽109mm、高138mm的长方体，然后与一个半径32mm的球体（位置在(16, -48, -35)）保留重叠部分，然后将一个半径36mm的球体（位置在(41, -11, -14)，并绕轴(0.38, -0.99, 0.53)旋转267度）合并到结果中，然后将一个半径32mm的球体（位置在(-14, -7, -26)，并绕轴(0.00, 0.40, 0.58)旋转214度）融合到结果中。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 109\nbase.Width = 109\nbase.Height = 138\ntool1 = doc.addObject(\"Part::Sphere\", \"Tool1\")\ntool1.Radius = 32\ntool1.Placement.Base = FreeCAD.Vector(16, -48, -35)\nresult1 = doc.addObject(\"Part::Common\", \"Common1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Sphere\", \"Tool2\")\ntool2.Radius = 36\ntool2.Placement.Base = FreeCAD.Vector(41, -11, -14)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.38, -0.99, 0.53), 267)\nresult2 = doc.addObject(\"Part::Fuse\", \"Fuse2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Sphere\", \"Tool3\")\ntool3.Radius = 32\ntool3.Placement.Base = FreeCAD.Vector(-14, -7, -26)\ntool3.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.00, 0.40, 0.58), 214)\nresult3 = doc.addObject(\"Part::Fuse\", \"Fuse3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长145mm、宽146mm、高82mm的长方体，然后将一个长71mm、宽75mm、高29mm的长方体（位置在(-3, 39, 12)）添加到结果中，然后从结果中切除一个半径26mm的球体（位置在(15, -29, 45)），然后将一个长60mm、宽65mm、高41mm的长方体（位置在(-44, 19, -5)，并绕轴(0.78, 0.77, 0.27)旋转295度）添加到结果中。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 145\nbase.Width = 146\nbase.Height = 82\ntool1 = doc.addObject(\"Part::Box\", \"Tool1\")\ntool1.Length = 71\ntool1.Width = 75\ntool1.Height = 29\ntool1.Placement.Base = FreeCAD.Vector(-3, 39, 12)\nresult1 = doc.addObject(\"Part::Fuse\", \"Fuse1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Sphere\", \"Tool2\")\ntool2.Radius = 26\ntool2.Placement.Base = FreeCAD.Vector(15, -29, 45)\nresult2 = doc.addObject(\"Part::Cut\", \"Cut2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Box\", \"Tool3\")\ntool3.Length = 60\ntool3.Width = 65\ntool3.Height = 41\ntool3.Placement.Base = FreeCAD.Vector(-44, 19, -5)\ntool3.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.78, 0.77, 0.27), 295)\nresult3 = doc.addObject(\"Part::Fuse\", \"Fuse3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长106mm、宽84mm、高55mm的长方体，然后与一个半径29mm、高83mm的圆柱体（位置在(-10, 4, 15)，并绕轴(-0.22, 0.08, 0.37)旋转17度）求交集，然后与一个底面半径49mm、高32mm的圆锥体（位置在(-30, 8, 5)，并绕轴(-0.39, 0.01, 0.67)旋转274度）求交集，然后与一个长60mm、宽96mm、高74mm的长方体（位置在(16, 44, -16)）求交集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 106\nbase.Width = 84\nbase.Height = 55\ntool1 = doc.addObject(\"Part::Cylinder\", \"Tool1\")\ntool1.Radius = 29\ntool1.Height = 83\ntool1.Placement.Base = FreeCAD.Vector(-10, 4, 15)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.22, 0.08, 0.37), 17)\nresult1 = doc.addObject(\"Part::Common\", \"Common1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cone\", \"Tool2\")\ntool2.Radius1 = 49\ntool2.Radius2 = 0\ntool2.Height = 32\ntool2.Placement.Base = FreeCAD.Vector(-30, 8, 5)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.39, 0.01, 0.67), 274)\nresult2 = doc.addObject(\"Part::Common\", \"Common2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Box\", \"Tool3\")\ntool3.Length = 60\ntool3.Width = 96\ntool3.Height = 74\ntool3.Placement.Base = FreeCAD.Vector(16, 44, -16)\nresult3 = doc.addObject(\"Part::Common\", \"Common3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长124mm、宽92mm、高87mm的长方体，然后将一个底面半径17mm、高52mm的圆锥体（位置在(-30, 18, 25)）合并到结果中，然后与一个长43mm、宽64mm、高86mm的长方体（位置在(-18, 7, -16)，并绕轴(-0.61, 0.25, 0.69)旋转84度）求交集，然后将一个长34mm、宽66mm、高74mm的长方体（位置在(38, -11, -29)，并绕轴(-0.55, -0.31, 0.94)旋转12度）并入到结果中。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 124\nbase.Width = 92\nbase.Height = 87\ntool1 = doc.addObject(\"Part::Cone\", \"Tool1\")\ntool1.Radius1 = 17\ntool1.Radius2 = 0\ntool1.Height = 52\ntool1.Placement.Base = FreeCAD.Vector(-30, 18, 25)\nresult1 = doc.addObject(\"Part::Fuse\", \"Fuse1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Box\", \"Tool2\")\ntool2.Length = 43\ntool2.Width = 64\ntool2.Height = 86\ntool2.Placement.Base = FreeCAD.Vector(-18, 7, -16)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.61, 0.25, 0.69), 84)\nresult2 = doc.addObject(\"Part::Common\", \"Common2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Box\", \"Tool3\")\ntool3.Length = 34\ntool3.Width = 66\ntool3.Height = 74\ntool3.Placement.Base = FreeCAD.Vector(38, -11, -29)\ntool3.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.55, -0.31, 0.94), 12)\nresult3 = doc.addObject(\"Part::Fuse\", \"Fuse3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径43mm的球体，然后从结果中挖除一个半径28mm的球体（位置在(-13, 15, 3)，并绕轴(0.50, -0.63, -0.07)旋转94度），然后将一个长98mm、宽53mm、高55mm的长方体（位置在(-2, -17, 34)）并入到结果中，然后从结果中挖除一个长71mm、宽93mm、高79mm的长方体（位置在(45, 3, -5)，并绕轴(-0.28, -0.01, 0.71)旋转342度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 43\ntool1 = doc.addObject(\"Part::Sphere\", \"Tool1\")\ntool1.Radius = 28\ntool1.Placement.Base = FreeCAD.Vector(-13, 15, 3)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.50, -0.63, -0.07), 94)\nresult1 = doc.addObject(\"Part::Cut\", \"Cut1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Box\", \"Tool2\")\ntool2.Length = 98\ntool2.Width = 53\ntool2.Height = 55\ntool2.Placement.Base = FreeCAD.Vector(-2, -17, 34)\nresult2 = doc.addObject(\"Part::Fuse\", \"Fuse2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Box\", \"Tool3\")\ntool3.Length = 71\ntool3.Width = 93\ntool3.Height = 79\ntool3.Placement.Base = FreeCAD.Vector(45, 3, -5)\ntool3.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.28, -0.01, 0.71), 342)\nresult3 = doc.addObject(\"Part::Cut\", \"Cut3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长60mm、宽147mm、高141mm的长方体，然后将一个长66mm、宽34mm、高48mm的长方体（位置在(0, 8, -35)，并绕轴(0.03, -0.71, 0.27)旋转98度）添加到结果中，然后与一个半径36mm、高36mm的圆柱体（位置在(-16, 44, -44)）求交集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 60\nbase.Width = 147\nbase.Height = 141\ntool1 = doc.addObject(\"Part::Box\", \"Tool1\")\ntool1.Length = 66\ntool1.Width = 34\ntool1.Height = 48\ntool1.Placement.Base = FreeCAD.Vector(0, 8, -35)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.03, -0.71, 0.27), 98)\nresult1 = doc.addObject(\"Part::Fuse\", \"Fuse1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cylinder\", \"Tool2\")\ntool2.Radius = 36\ntool2.Height = 36\ntool2.Placement.Base = FreeCAD.Vector(-16, 44, -44)\nresult2 = doc.addObject(\"Part::Common\", \"Common2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径44mm、高96mm的圆柱体，然后与一个长73mm、宽29mm、高28mm的长方体（位置在(-31, 4, -8)）保留重叠部分，然后从结果中减去一个底面半径18mm、高43mm的圆锥体（位置在(-25, 22, 36)），然后与一个半径34mm的球体（位置在(33, 14, 14)，并绕轴(-0.60, -0.09, -0.84)旋转145度）取共同部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 44\nbase.Height = 96\ntool1 = doc.addObject(\"Part::Box\", \"Tool1\")\ntool1.Length = 73\ntool1.Width = 29\ntool1.Height = 28\ntool1.Placement.Base = FreeCAD.Vector(-31, 4, -8)\nresult1 = doc.addObject(\"Part::Common\", \"Common1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cone\", \"Tool2\")\ntool2.Radius1 = 18\ntool2.Radius2 = 0\ntool2.Height = 43\ntool2.Placement.Base = FreeCAD.Vector(-25, 22, 36)\nresult2 = doc.addObject(\"Part::Cut\", \"Cut2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Sphere\", \"Tool3\")\ntool3.Radius = 34\ntool3.Placement.Base = FreeCAD.Vector(33, 14, 14)\ntool3.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.60, -0.09, -0.84), 145)\nresult3 = doc.addObject(\"Part::Common\", \"Common3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长100mm、宽72mm、高63mm的长方体，然后从结果中减去一个长73mm、宽26mm、高86mm的长方体（位置在(-31, -17, 21)，并绕轴(-0.03, -0.78, -0.42)旋转285度），然后将一个底面半径41mm、高85mm的圆锥体（位置在(18, 12, 29)）并入到结果中。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 100\nbase.Width = 72\nbase.Height = 63\ntool1 = doc.addObject(\"Part::Box\", \"Tool1\")\ntool1.Length = 73\ntool1.Width = 26\ntool1.Height = 86\ntool1.Placement.Base = FreeCAD.Vector(-31, -17, 21)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.03, -0.78, -0.42), 285)\nresult1 = doc.addObject(\"Part::Cut\", \"Cut1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cone\", \"Tool2\")\ntool2.Radius1 = 41\ntool2.Radius2 = 0\ntool2.Height = 85\ntool2.Placement.Base = FreeCAD.Vector(18, 12, 29)\nresult2 = doc.addObject(\"Part::Fuse\", \"Fuse2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径57mm的球体，然后从结果中减去一个长75mm、宽99mm、高53mm的长方体（位置在(27, 4, -43)，并绕轴(0.59, -0.31, -0.57)旋转61度），然后与一个底面半径43mm、高63mm的圆锥体（位置在(-25, 7, -20)，并绕轴(0.82, 0.04, -0.86)旋转229度）求交集，然后与一个底面半径18mm、高94mm的圆锥体（位置在(-29, -36, 23)）求交集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 57\ntool1 = doc.addObject(\"Part::Box\", \"Tool1\")\ntool1.Length = 75\ntool1.Width = 99\ntool1.Height = 53\ntool1.Placement.Base = FreeCAD.Vector(27, 4, -43)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.59, -0.31, -0.57), 61)\nresult1 = doc.addObject(\"Part::Cut\", \"Cut1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cone\", \"Tool2\")\ntool2.Radius1 = 43\ntool2.Radius2 = 0\ntool2.Height = 63\ntool2.Placement.Base = FreeCAD.Vector(-25, 7, -20)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.82, 0.04, -0.86), 229)\nresult2 = doc.addObject(\"Part::Common\", \"Common2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Cone\", \"Tool3\")\ntool3.Radius1 = 18\ntool3.Radius2 = 0\ntool3.Height = 94\ntool3.Placement.Base = FreeCAD.Vector(-29, -36, 23)\nresult3 = doc.addObject(\"Part::Common\", \"Common3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径80mm的球体，然后从结果中打孔一个底面半径44mm、高69mm的圆锥体（位置在(9, -37, -17)），然后与一个底面半径19mm、高60mm的圆锥体（位置在(-32, -26, 14)）保留重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 80\ntool1 = doc.addObject(\"Part::Cone\", \"Tool1\")\ntool1.Radius1 = 44\ntool1.Radius2 = 0\ntool1.Height = 69\ntool1.Placement.Base = FreeCAD.Vector(9, -37, -17)\nresult1 = doc.addObject(\"Part::Cut\", \"Cut1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cone\", \"Tool2\")\ntool2.Radius1 = 19\ntool2.Radius2 = 0\ntool2.Height = 60\ntool2.Placement.Base = FreeCAD.Vector(-32, -26, 14)\nresult2 = doc.addObject(\"Part::Common\", \"Common2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径76mm、高128mm的圆柱体，然后从结果中打孔一个半径14mm、高88mm的圆柱体（位置在(-11, 18, -1)，并绕轴(-0.18, -1.00, -0.73)旋转215度），然后将一个长30mm、宽97mm、高27mm的长方体（位置在(40, -27, -42)）并入到结果中，然后将一个长22mm、宽82mm、高32mm的长方体（位置在(-19, 15, 24)，并绕轴(0.60, -0.56, 0.43)旋转327度）融合到结果中。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 76\nbase.Height = 128\ntool1 = doc.addObject(\"Part::Cylinder\", \"Tool1\")\ntool1.Radius = 14\ntool1.Height = 88\ntool1.Placement.Base = FreeCAD.Vector(-11, 18, -1)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.18, -1.00, -0.73), 215)\nresult1 = doc.addObject(\"Part::Cut\", \"Cut1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Box\", \"Tool2\")\ntool2.Length = 30\ntool2.Width = 97\ntool2.Height = 27\ntool2.Placement.Base = FreeCAD.Vector(40, -27, -42)\nresult2 = doc.addObject(\"Part::Fuse\", \"Fuse2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Box\", \"Tool3\")\ntool3.Length = 22\ntool3.Width = 82\ntool3.Height = 32\ntool3.Placement.Base = FreeCAD.Vector(-19, 15, 24)\ntool3.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.60, -0.56, 0.43), 327)\nresult3 = doc.addObject(\"Part::Fuse\", \"Fuse3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长102mm、宽61mm、高50mm的长方体，然后将一个长70mm、宽39mm、高58mm的长方体（位置在(-41, -34, 10)，并绕轴(-0.15, -0.56, 0.77)旋转34度）融合到结果中，然后与一个半径50mm、高115mm的圆柱体（位置在(-43, 5, 50)，并绕轴(0.16, 0.32, 0.55)旋转132度）保留重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 102\nbase.Width = 61\nbase.Height = 50\ntool1 = doc.addObject(\"Part::Box\", \"Tool1\")\ntool1.Length = 70\ntool1.Width = 39\ntool1.Height = 58\ntool1.Placement.Base = FreeCAD.Vector(-41, -34, 10)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.15, -0.56, 0.77), 34)\nresult1 = doc.addObject(\"Part::Fuse\", \"Fuse1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cylinder\", \"Tool2\")\ntool2.Radius = 50\ntool2.Height = 115\ntool2.Placement.Base = FreeCAD.Vector(-43, 5, 50)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.16, 0.32, 0.55), 132)\nresult2 = doc.addObject(\"Part::Common\", \"Common2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径52mm的球体，然后将一个半径16mm、高131mm的圆柱体（位置在(44, 17, -30)）合并到结果中，然后将一个半径38mm的球体（位置在(-43, 36, -37)）添加到结果中，然后将一个半径13mm、高149mm的圆柱体（位置在(-4, -27, 49)）添加到结果中。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 52\ntool1 = doc.addObject(\"Part::Cylinder\", \"Tool1\")\ntool1.Radius = 16\ntool1.Height = 131\ntool1.Placement.Base = FreeCAD.Vector(44, 17, -30)\nresult1 = doc.addObject(\"Part::Fuse\", \"Fuse1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Sphere\", \"Tool2\")\ntool2.Radius = 38\ntool2.Placement.Base = FreeCAD.Vector(-43, 36, -37)\nresult2 = doc.addObject(\"Part::Fuse\", \"Fuse2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Cylinder\", \"Tool3\")\ntool3.Radius = 13\ntool3.Height = 149\ntool3.Placement.Base = FreeCAD.Vector(-4, -27, 49)\nresult3 = doc.addObject(\"Part::Fuse\", \"Fuse3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径43mm、高69mm的圆柱体，然后将一个半径27mm的球体（位置在(-23, 23, -35)）添加到结果中，然后将一个半径30mm的球体（位置在(-22, 14, -33)，并绕轴(-0.29, -0.20, -0.84)旋转326度）合并到结果中，然后与一个长50mm、宽50mm、高69mm的长方体（位置在(20, -39, -37)）保留重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 43\nbase.Height = 69\ntool1 = doc.addObject(\"Part::Sphere\", \"Tool1\")\ntool1.Radius = 27\ntool1.Placement.Base = FreeCAD.Vector(-23, 23, -35)\nresult1 = doc.addObject(\"Part::Fuse\", \"Fuse1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Sphere\", \"Tool2\")\ntool2.Radius = 30\ntool2.Placement.Base = FreeCAD.Vector(-22, 14, -33)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.29, -0.20, -0.84), 326)\nresult2 = doc.addObject(\"Part::Fuse\", \"Fuse2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Box\", \"Tool3\")\ntool3.Length = 50\ntool3.Width = 50\ntool3.Height = 69\ntool3.Placement.Base = FreeCAD.Vector(20, -39, -37)\nresult3 = doc.addObject(\"Part::Common\", \"Common3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长125mm、宽109mm、高142mm的长方体，然后将一个半径34mm的球体（位置在(31, 2, 32)）并入到结果中，然后从结果中切除一个长68mm、宽48mm、高25mm的长方体（位置在(-40, -30, -5)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 125\nbase.Width = 109\nbase.Height = 142\ntool1 = doc.addObject(\"Part::Sphere\", \"Tool1\")\ntool1.Radius = 34\ntool1.Placement.Base = FreeCAD.Vector(31, 2, 32)\nresult1 = doc.addObject(\"Part::Fuse\", \"Fuse1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Box\", \"Tool2\")\ntool2.Length = 68\ntool2.Width = 48\ntool2.Height = 25\ntool2.Placement.Base = FreeCAD.Vector(-40, -30, -5)\nresult2 = doc.addObject(\"Part::Cut\", \"Cut2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径68mm的球体，然后与一个半径40mm的球体（位置在(-24, 32, 23)）保留重叠部分，然后从结果中打孔一个底面半径40mm、高98mm的圆锥体（位置在(-9, -36, -30)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 68\ntool1 = doc.addObject(\"Part::Sphere\", \"Tool1\")\ntool1.Radius = 40\ntool1.Placement.Base = FreeCAD.Vector(-24, 32, 23)\nresult1 = doc.addObject(\"Part::Common\", \"Common1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cone\", \"Tool2\")\ntool2.Radius1 = 40\ntool2.Radius2 = 0\ntool2.Height = 98\ntool2.Placement.Base = FreeCAD.Vector(-9, -36, -30)\nresult2 = doc.addObject(\"Part::Cut\", \"Cut2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长57mm、宽115mm、高145mm的长方体，然后从结果中挖除一个半径36mm、高95mm的圆柱体（位置在(47, -41, -20)，并绕轴(0.51, -0.07, -0.85)旋转102度），然后与一个长70mm、宽35mm、高66mm的长方体（位置在(-9, 19, 32)，并绕轴(-0.10, 0.71, -0.85)旋转118度）求交集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 57\nbase.Width = 115\nbase.Height = 145\ntool1 = doc.addObject(\"Part::Cylinder\", \"Tool1\")\ntool1.Radius = 36\ntool1.Height = 95\ntool1.Placement.Base = FreeCAD.Vector(47, -41, -20)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.51, -0.07, -0.85), 102)\nresult1 = doc.addObject(\"Part::Cut\", \"Cut1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Box\", \"Tool2\")\ntool2.Length = 70\ntool2.Width = 35\ntool2.Height = 66\ntool2.Placement.Base = FreeCAD.Vector(-9, 19, 32)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.10, 0.71, -0.85), 118)\nresult2 = doc.addObject(\"Part::Common\", \"Common2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径42mm、高134mm的圆柱体，然后从结果中切除一个长28mm、宽28mm、高85mm的长方体（位置在(36, -47, -50)），然后将一个长99mm、宽51mm、高63mm的长方体（位置在(3, -24, -13)，并绕轴(-0.57, -0.16, 0.82)旋转11度）融合到结果中，然后与一个半径38mm的球体（位置在(7, -8, 13)）求交集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 42\nbase.Height = 134\ntool1 = doc.addObject(\"Part::Box\", \"Tool1\")\ntool1.Length = 28\ntool1.Width = 28\ntool1.Height = 85\ntool1.Placement.Base = FreeCAD.Vector(36, -47, -50)\nresult1 = doc.addObject(\"Part::Cut\", \"Cut1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Box\", \"Tool2\")\ntool2.Length = 99\ntool2.Width = 51\ntool2.Height = 63\ntool2.Placement.Base = FreeCAD.Vector(3, -24, -13)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.57, -0.16, 0.82), 11)\nresult2 = doc.addObject(\"Part::Fuse\", \"Fuse2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Sphere\", \"Tool3\")\ntool3.Radius = 38\ntool3.Placement.Base = FreeCAD.Vector(7, -8, 13)\nresult3 = doc.addObject(\"Part::Common\", \"Common3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径60mm、高115mm的圆柱体，然后与一个半径44mm、高124mm的圆柱体（位置在(-20, -38, 27)，并绕轴(0.02, 0.96, -0.55)旋转165度）保留重叠部分，然后从结果中减去一个长29mm、宽55mm、高20mm的长方体（位置在(-11, -26, 4)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 60\nbase.Height = 115\ntool1 = doc.addObject(\"Part::Cylinder\", \"Tool1\")\ntool1.Radius = 44\ntool1.Height = 124\ntool1.Placement.Base = FreeCAD.Vector(-20, -38, 27)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.02, 0.96, -0.55), 165)\nresult1 = doc.addObject(\"Part::Common\", \"Common1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Box\", \"Tool2\")\ntool2.Length = 29\ntool2.Width = 55\ntool2.Height = 20\ntool2.Placement.Base = FreeCAD.Vector(-11, -26, 4)\nresult2 = doc.addObject(\"Part::Cut\", \"Cut2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径66mm、高107mm的圆柱体，然后与一个长95mm、宽21mm、高69mm的长方体（位置在(48, 8, 36)，并绕轴(-0.83, 0.77, 0.15)旋转230度）保留重叠部分，然后与一个半径22mm的球体（位置在(-17, -8, 27)，并绕轴(-0.56, -0.13, -0.68)旋转292度）取共同部分，然后与一个半径37mm的球体（位置在(-45, 26, 48)，并绕轴(0.88, 0.73, 0.39)旋转113度）取共同部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 66\nbase.Height = 107\ntool1 = doc.addObject(\"Part::Box\", \"Tool1\")\ntool1.Length = 95\ntool1.Width = 21\ntool1.Height = 69\ntool1.Placement.Base = FreeCAD.Vector(48, 8, 36)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.83, 0.77, 0.15), 230)\nresult1 = doc.addObject(\"Part::Common\", \"Common1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Sphere\", \"Tool2\")\ntool2.Radius = 22\ntool2.Placement.Base = FreeCAD.Vector(-17, -8, 27)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.56, -0.13, -0.68), 292)\nresult2 = doc.addObject(\"Part::Common\", \"Common2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Sphere\", \"Tool3\")\ntool3.Radius = 37\ntool3.Placement.Base = FreeCAD.Vector(-45, 26, 48)\ntool3.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.88, 0.73, 0.39), 113)\nresult3 = doc.addObject(\"Part::Common\", \"Common3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径68mm、高90mm的圆柱体，然后将一个半径37mm的球体（位置在(-43, 28, 26)）并入到结果中，然后与一个半径11mm、高54mm的圆柱体（位置在(-47, -27, 4)，并绕轴(0.13, 0.01, 0.21)旋转27度）保留重叠部分，然后与一个半径25mm、高102mm的圆柱体（位置在(13, 24, 25)）保留重叠部分。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 68\nbase.Height = 90\ntool1 = doc.addObject(\"Part::Sphere\", \"Tool1\")\ntool1.Radius = 37\ntool1.Placement.Base = FreeCAD.Vector(-43, 28, 26)\nresult1 = doc.addObject(\"Part::Fuse\", \"Fuse1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cylinder\", \"Tool2\")\ntool2.Radius = 11\ntool2.Height = 54\ntool2.Placement.Base = FreeCAD.Vector(-47, -27, 4)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.13, 0.01, 0.21), 27)\nresult2 = doc.addObject(\"Part::Common\", \"Common2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Cylinder\", \"Tool3\")\ntool3.Radius = 25\ntool3.Height = 102\ntool3.Placement.Base = FreeCAD.Vector(13, 24, 25)\nresult3 = doc.addObject(\"Part::Common\", \"Common3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径65mm的球体，然后与一个半径39mm、高96mm的圆柱体（位置在(42, -30, 47)）求交集，然后将一个底面半径24mm、高79mm的圆锥体（位置在(28, 0, 18)）合并到结果中。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 65\ntool1 = doc.addObject(\"Part::Cylinder\", \"Tool1\")\ntool1.Radius = 39\ntool1.Height = 96\ntool1.Placement.Base = FreeCAD.Vector(42, -30, 47)\nresult1 = doc.addObject(\"Part::Common\", \"Common1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cone\", \"Tool2\")\ntool2.Radius1 = 24\ntool2.Radius2 = 0\ntool2.Height = 79\ntool2.Placement.Base = FreeCAD.Vector(28, 0, 18)\nresult2 = doc.addObject(\"Part::Fuse\", \"Fuse2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长67mm、宽76mm、高90mm的长方体，然后与一个底面半径47mm、高74mm的圆锥体（位置在(15, -5, -29)，并绕轴(-0.39, -0.47, 0.12)旋转106度）取共同部分，然后从结果中打孔一个半径29mm的球体（位置在(-15, 6, -1)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 67\nbase.Width = 76\nbase.Height = 90\ntool1 = doc.addObject(\"Part::Cone\", \"Tool1\")\ntool1.Radius1 = 47\ntool1.Radius2 = 0\ntool1.Height = 74\ntool1.Placement.Base = FreeCAD.Vector(15, -5, -29)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.39, -0.47, 0.12), 106)\nresult1 = doc.addObject(\"Part::Common\", \"Common1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Sphere\", \"Tool2\")\ntool2.Radius = 29\ntool2.Placement.Base = FreeCAD.Vector(-15, 6, -1)\nresult2 = doc.addObject(\"Part::Cut\", \"Cut2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径48mm的球体，然后与一个半径18mm的球体（位置在(50, 45, 49)）求交集，然后从结果中挖除一个半径21mm、高99mm的圆柱体（位置在(-43, -48, -19)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 48\ntool1 = doc.addObject(\"Part::Sphere\", \"Tool1\")\ntool1.Radius = 18\ntool1.Placement.Base = FreeCAD.Vector(50, 45, 49)\nresult1 = doc.addObject(\"Part::Common\", \"Common1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cylinder\", \"Tool2\")\ntool2.Radius = 21\ntool2.Height = 99\ntool2.Placement.Base = FreeCAD.Vector(-43, -48, -19)\nresult2 = doc.addObject(\"Part::Cut\", \"Cut2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径80mm的球体，然后将一个半径15mm、高100mm的圆柱体（位置在(14, 7, 27)）并入到结果中，然后将一个底面半径14mm、高99mm的圆锥体（位置在(12, 39, 42)）添加到结果中，然后将一个半径11mm、高62mm的圆柱体（位置在(-3, -47, 8)）添加到结果中。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 80\ntool1 = doc.addObject(\"Part::Cylinder\", \"Tool1\")\ntool1.Radius = 15\ntool1.Height = 100\ntool1.Placement.Base = FreeCAD.Vector(14, 7, 27)\nresult1 = doc.addObject(\"Part::Fuse\", \"Fuse1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cone\", \"Tool2\")\ntool2.Radius1 = 14\ntool2.Radius2 = 0\ntool2.Height = 99\ntool2.Placement.Base = FreeCAD.Vector(12, 39, 42)\nresult2 = doc.addObject(\"Part::Fuse\", \"Fuse2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Cylinder\", \"Tool3\")\ntool3.Radius = 11\ntool3.Height = 62\ntool3.Placement.Base = FreeCAD.Vector(-3, -47, 8)\nresult3 = doc.addObject(\"Part::Fuse\", \"Fuse3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长128mm、宽128mm、高97mm的长方体，然后与一个长81mm、宽74mm、高26mm的长方体（位置在(39, 36, 11)）保留重叠部分，然后从结果中切除一个长49mm、宽88mm、高96mm的长方体（位置在(16, -9, 41)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 128\nbase.Width = 128\nbase.Height = 97\ntool1 = doc.addObject(\"Part::Box\", \"Tool1\")\ntool1.Length = 81\ntool1.Width = 74\ntool1.Height = 26\ntool1.Placement.Base = FreeCAD.Vector(39, 36, 11)\nresult1 = doc.addObject(\"Part::Common\", \"Common1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Box\", \"Tool2\")\ntool2.Length = 49\ntool2.Width = 88\ntool2.Height = 96\ntool2.Placement.Base = FreeCAD.Vector(16, -9, 41)\nresult2 = doc.addObject(\"Part::Cut\", \"Cut2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径68mm的球体，然后将一个半径37mm、高73mm的圆柱体（位置在(-43, 48, -6)，并绕轴(0.23, -0.08, -0.60)旋转30度）合并到结果中，然后将一个底面半径12mm、高78mm的圆锥体（位置在(-3, -32, 31)，并绕轴(0.16, -0.37, -0.30)旋转271度）融合到结果中。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 68\ntool1 = doc.addObject(\"Part::Cylinder\", \"Tool1\")\ntool1.Radius = 37\ntool1.Height = 73\ntool1.Placement.Base = FreeCAD.Vector(-43, 48, -6)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.23, -0.08, -0.60), 30)\nresult1 = doc.addObject(\"Part::Fuse\", \"Fuse1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cone\", \"Tool2\")\ntool2.Radius1 = 12\ntool2.Radius2 = 0\ntool2.Height = 78\ntool2.Placement.Base = FreeCAD.Vector(-3, -32, 31)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.16, -0.37, -0.30), 271)\nresult2 = doc.addObject(\"Part::Fuse\", \"Fuse2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径38mm、高67mm的圆柱体，然后将一个长60mm、宽96mm、高32mm的长方体（位置在(-2, -47, -19)）融合到结果中，然后从结果中打孔一个半径49mm、高88mm的圆柱体（位置在(34, -16, -32)，并绕轴(0.37, -0.29, 0.40)旋转56度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 38\nbase.Height = 67\ntool1 = doc.addObject(\"Part::Box\", \"Tool1\")\ntool1.Length = 60\ntool1.Width = 96\ntool1.Height = 32\ntool1.Placement.Base = FreeCAD.Vector(-2, -47, -19)\nresult1 = doc.addObject(\"Part::Fuse\", \"Fuse1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cylinder\", \"Tool2\")\ntool2.Radius = 49\ntool2.Height = 88\ntool2.Placement.Base = FreeCAD.Vector(34, -16, -32)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.37, -0.29, 0.40), 56)\nresult2 = doc.addObject(\"Part::Cut\", \"Cut2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径68mm的球体，然后与一个长77mm、宽27mm、高44mm的长方体（位置在(-14, -7, 26)）求交集，然后从结果中减去一个半径15mm、高49mm的圆柱体（位置在(29, -43, 49)），然后与一个半径45mm、高54mm的圆柱体（位置在(1, -32, 36)，并绕轴(0.33, -0.68, 0.81)旋转41度）求交集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 68\ntool1 = doc.addObject(\"Part::Box\", \"Tool1\")\ntool1.Length = 77\ntool1.Width = 27\ntool1.Height = 44\ntool1.Placement.Base = FreeCAD.Vector(-14, -7, 26)\nresult1 = doc.addObject(\"Part::Common\", \"Common1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cylinder\", \"Tool2\")\ntool2.Radius = 15\ntool2.Height = 49\ntool2.Placement.Base = FreeCAD.Vector(29, -43, 49)\nresult2 = doc.addObject(\"Part::Cut\", \"Cut2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Cylinder\", \"Tool3\")\ntool3.Radius = 45\ntool3.Height = 54\ntool3.Placement.Base = FreeCAD.Vector(1, -32, 36)\ntool3.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.33, -0.68, 0.81), 41)\nresult3 = doc.addObject(\"Part::Common\", \"Common3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径43mm的球体，然后从结果中切除一个半径35mm的球体（位置在(-5, -2, 1)，并绕轴(-0.16, 0.50, 0.18)旋转342度），然后将一个半径21mm、高108mm的圆柱体（位置在(-35, -3, -36)）添加到结果中。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Sphere\", \"Base\")\nbase.Radius = 43\ntool1 = doc.addObject(\"Part::Sphere\", \"Tool1\")\ntool1.Radius = 35\ntool1.Placement.Base = FreeCAD.Vector(-5, -2, 1)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.16, 0.50, 0.18), 342)\nresult1 = doc.addObject(\"Part::Cut\", \"Cut1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Cylinder\", \"Tool2\")\ntool2.Radius = 21\ntool2.Height = 108\ntool2.Placement.Base = FreeCAD.Vector(-35, -3, -36)\nresult2 = doc.addObject(\"Part::Fuse\", \"Fuse2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径34mm、高132mm的圆柱体，然后与一个长67mm、宽25mm、高24mm的长方体（位置在(-21, -4, -3)，并绕轴(0.59, 0.60, -0.15)旋转150度）保留重叠部分，然后从结果中减去一个长71mm、宽61mm、高64mm的长方体（位置在(29, 47, 50)），然后将一个半径20mm、高148mm的圆柱体（位置在(44, 15, -50)，并绕轴(0.54, 0.92, -0.24)旋转335度）融合到结果中。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 34\nbase.Height = 132\ntool1 = doc.addObject(\"Part::Box\", \"Tool1\")\ntool1.Length = 67\ntool1.Width = 25\ntool1.Height = 24\ntool1.Placement.Base = FreeCAD.Vector(-21, -4, -3)\ntool1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.59, 0.60, -0.15), 150)\nresult1 = doc.addObject(\"Part::Common\", \"Common1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Box\", \"Tool2\")\ntool2.Length = 71\ntool2.Width = 61\ntool2.Height = 64\ntool2.Placement.Base = FreeCAD.Vector(29, 47, 50)\nresult2 = doc.addObject(\"Part::Cut\", \"Cut2\")\nresult2.Base = result1\nresult2.Tool = tool2\ntool3 = doc.addObject(\"Part::Cylinder\", \"Tool3\")\ntool3.Radius = 20\ntool3.Height = 148\ntool3.Placement.Base = FreeCAD.Vector(44, 15, -50)\ntool3.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.54, 0.92, -0.24), 335)\nresult3 = doc.addObject(\"Part::Fuse\", \"Fuse3\")\nresult3.Base = result2\nresult3.Tool = tool3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径33mm、高113mm的圆柱体，然后将一个半径33mm的球体（位置在(-20, 40, 25)）添加到结果中，然后与一个长60mm、宽100mm、高43mm的长方体（位置在(-35, 14, 35)，并绕轴(0.21, -0.05, 0.01)旋转253度）求交集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"MultiBool\")\nbase = doc.addObject(\"Part::Cylinder\", \"Base\")\nbase.Radius = 33\nbase.Height = 113\ntool1 = doc.addObject(\"Part::Sphere\", \"Tool1\")\ntool1.Radius = 33\ntool1.Placement.Base = FreeCAD.Vector(-20, 40, 25)\nresult1 = doc.addObject(\"Part::Fuse\", \"Fuse1\")\nresult1.Base = base\nresult1.Tool = tool1\ntool2 = doc.addObject(\"Part::Box\", \"Tool2\")\ntool2.Length = 60\ntool2.Width = 100\ntool2.Height = 43\ntool2.Placement.Base = FreeCAD.Vector(-35, 14, 35)\ntool2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.21, -0.05, 0.01), 253)\nresult2 = doc.addObject(\"Part::Common\", \"Common2\")\nresult2.Base = result1\nresult2.Tool = tool2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为33.0mm、角度为90.0度的直线，起点在(7, -45)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(7, -45, 0), FreeCAD.Vector(7, -12, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(14, -36)到点(50, 32)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(14, -36, 0), FreeCAD.Vector(50, 32, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(-16, -39)到点(23, 32)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-16, -39, 0), FreeCAD.Vector(23, 32, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(-42, 23)到点(2, -15)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-42, 23, 0), FreeCAD.Vector(2, -15, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(37, 35)到点(-31, 24)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(37, 35, 0), FreeCAD.Vector(-31, 24, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(45, -31)到点(15, -20)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(45, -31, 0), FreeCAD.Vector(15, -20, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为86.33mm、角度为295.4度的直线，起点在(-45, 36)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-45, 36, 0), FreeCAD.Vector(-8, -42, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为48.01mm、角度为125.7度的直线，起点在(47, -42)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(47, -42, 0), FreeCAD.Vector(19, -3, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为7.28mm、角度为254.1度的直线，起点在(-8, -19)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-8, -19, 0), FreeCAD.Vector(-10, -26, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(-10, 2)到点(-27, -11)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-10, 2, 0), FreeCAD.Vector(-27, -11, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(45, 41)到点(-45, -19)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(45, 41, 0), FreeCAD.Vector(-45, -19, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(-30, -24)到点(-39, 28)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-30, -24, 0), FreeCAD.Vector(-39, 28, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(46, -22)到点(-37, -5)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(46, -22, 0), FreeCAD.Vector(-37, -5, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(-2, -11)到点(39, 36)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-2, -11, 0), FreeCAD.Vector(39, 36, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为100.72mm、角度为29.1度的直线，起点在(-42, -6)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-42, -6, 0), FreeCAD.Vector(46, 43, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(40, -37)到点(4, -16)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(40, -37, 0), FreeCAD.Vector(4, -16, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为27.86mm、角度为339.0度的直线，起点在(-34, -13)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-34, -13, 0), FreeCAD.Vector(-8, -23, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为48.92mm、角度为220.9度的直线，起点在(13, -7)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(13, -7, 0), FreeCAD.Vector(-24, -39, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为81.27mm、角度为341.3度的直线，起点在(-37, -3)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-37, -3, 0), FreeCAD.Vector(40, -29, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为31.02mm、角度为178.2度的直线，起点在(28, -44)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(28, -44, 0), FreeCAD.Vector(-3, -43, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(4, 0)到点(44, 3)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(4, 0, 0), FreeCAD.Vector(44, 3, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为39.12mm、角度为57.5度的直线，起点在(-29, 2)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-29, 2, 0), FreeCAD.Vector(-8, 35, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为81.44mm、角度为245.3度的直线，起点在(37, 49)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(37, 49, 0), FreeCAD.Vector(3, -25, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(-35, -35)到点(-29, 50)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-35, -35, 0), FreeCAD.Vector(-29, 50, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(14, 38)到点(22, -34)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(14, 38, 0), FreeCAD.Vector(22, -34, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为22.83mm、角度为151.2度的直线，起点在(24, -2)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(24, -2, 0), FreeCAD.Vector(4, 9, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为74.25mm、角度为64.5度的直线，起点在(-11, -39)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-11, -39, 0), FreeCAD.Vector(21, 28, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(28, -17)到点(-4, -13)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(28, -17, 0), FreeCAD.Vector(-4, -13, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(-17, 24)到点(-8, 7)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-17, 24, 0), FreeCAD.Vector(-8, 7, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(-23, 2)到点(-5, -14)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-23, 2, 0), FreeCAD.Vector(-5, -14, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为16.28mm、角度为10.6度的直线，起点在(28, 33)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(28, 33, 0), FreeCAD.Vector(44, 36, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(19, 29)到点(-36, -50)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(19, 29, 0), FreeCAD.Vector(-36, -50, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为98.79mm、角度为338.6度的直线，起点在(-45, 17)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-45, 17, 0), FreeCAD.Vector(47, -19, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为68.03mm、角度为245.7度的直线，起点在(4, 26)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(4, 26, 0), FreeCAD.Vector(-24, -36, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(22, 3)到点(-30, -18)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(22, 3, 0), FreeCAD.Vector(-30, -18, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为50.21mm、角度为134.2度的直线，起点在(32, -32)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(32, -32, 0), FreeCAD.Vector(-3, 4, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为54.82mm、角度为308.3度的直线，起点在(1, 46)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(1, 46, 0), FreeCAD.Vector(35, 3, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(-48, 10)到点(-46, -50)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-48, 10, 0), FreeCAD.Vector(-46, -50, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为42.01mm、角度为178.6度的直线，起点在(21, 38)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(21, 38, 0), FreeCAD.Vector(-21, 39, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(-27, 18)到点(36, 36)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-27, 18, 0), FreeCAD.Vector(36, 36, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为3.61mm、角度为326.3度的直线，起点在(-39, -27)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-39, -27, 0), FreeCAD.Vector(-36, -29, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(-6, -27)到点(5, 41)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-6, -27, 0), FreeCAD.Vector(5, 41, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(-45, -12)到点(-3, 44)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-45, -12, 0), FreeCAD.Vector(-3, 44, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(22, -47)到点(18, 27)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(22, -47, 0), FreeCAD.Vector(18, 27, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为32.25mm、角度为187.1度的直线，起点在(16, 34)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(16, 34, 0), FreeCAD.Vector(-16, 30, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(-26, 3)到点(-38, 49)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-26, 3, 0), FreeCAD.Vector(-38, 49, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为22.47mm、角度为302.3度的直线，起点在(36, -24)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(36, -24, 0), FreeCAD.Vector(48, -43, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(29, 16)到点(40, 2)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(29, 16, 0), FreeCAD.Vector(40, 2, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(-22, -25)到点(21, -15)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-22, -25, 0), FreeCAD.Vector(21, -15, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(20, -1)到点(-17, 37)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(20, -1, 0), FreeCAD.Vector(-17, 37, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为46.84mm、角度为163.9度的直线，起点在(48, -10)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(48, -10, 0), FreeCAD.Vector(3, 3, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为95.02mm、角度为139.3度的直线，起点在(23, -41)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(23, -41, 0), FreeCAD.Vector(-49, 21, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为38.47mm、角度为189.0度的直线，起点在(40, -25)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(40, -25, 0), FreeCAD.Vector(2, -31, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为11.18mm、角度为259.7度的直线，起点在(13, 0)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(13, 0, 0), FreeCAD.Vector(11, -11, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为12.21mm、角度为215.0度的直线，起点在(-26, 24)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-26, 24, 0), FreeCAD.Vector(-36, 17, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(46, 4)到点(-12, 49)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(46, 4, 0), FreeCAD.Vector(-12, 49, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(14, -30)到点(7, 44)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(14, -30, 0), FreeCAD.Vector(7, 44, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(50, 33)到点(-46, 36)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(50, 33, 0), FreeCAD.Vector(-46, 36, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为18.36mm、角度为240.6度的直线，起点在(10, -2)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(10, -2, 0), FreeCAD.Vector(1, -18, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条从点(-16, 43)到点(27, 7)的直线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(-16, 43, 0), FreeCAD.Vector(27, 7, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个左下角在点(-17, 20)、宽62mm、高47mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-17, 20, 0), FreeCAD.Vector(45, 20, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(45, 20, 0), FreeCAD.Vector(45, 67, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(45, 67, 0), FreeCAD.Vector(-17, 67, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-17, 67, 0), FreeCAD.Vector(-17, 20, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个左下角在点(11, -47)、宽62mm、高97mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(11, -47, 0), FreeCAD.Vector(73, -47, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(73, -47, 0), FreeCAD.Vector(73, 50, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(73, 50, 0), FreeCAD.Vector(11, 50, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(11, 50, 0), FreeCAD.Vector(11, -47, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个对角点分别为(-10, -49)和(35, -20)的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-10, -49, 0), FreeCAD.Vector(35, -49, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(35, -49, 0), FreeCAD.Vector(35, -20, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(35, -20, 0), FreeCAD.Vector(-10, -20, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-10, -20, 0), FreeCAD.Vector(-10, -49, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个对角点分别为(18, 7)和(47, 93)的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(18, 7, 0), FreeCAD.Vector(47, 7, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(47, 7, 0), FreeCAD.Vector(47, 93, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(47, 93, 0), FreeCAD.Vector(18, 93, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(18, 93, 0), FreeCAD.Vector(18, 7, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个对角点分别为(10, -29)和(104, -12)的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(10, -29, 0), FreeCAD.Vector(104, -29, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(104, -29, 0), FreeCAD.Vector(104, -12, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(104, -12, 0), FreeCAD.Vector(10, -12, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(10, -12, 0), FreeCAD.Vector(10, -29, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(19, -1)、宽73mm、高30mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-17.5, -16.0, 0), FreeCAD.Vector(55.5, -16.0, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(55.5, -16.0, 0), FreeCAD.Vector(55.5, 14.0, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(55.5, 14.0, 0), FreeCAD.Vector(-17.5, 14.0, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-17.5, 14.0, 0), FreeCAD.Vector(-17.5, -16.0, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-23, 11)、宽39mm、高59mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-42.5, -18.5, 0), FreeCAD.Vector(-3.5, -18.5, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-3.5, -18.5, 0), FreeCAD.Vector(-3.5, 40.5, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(-3.5, 40.5, 0), FreeCAD.Vector(-42.5, 40.5, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-42.5, 40.5, 0), FreeCAD.Vector(-42.5, -18.5, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个对角点分别为(-27, -18)和(-1, 10)的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-27, -18, 0), FreeCAD.Vector(-1, -18, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-1, -18, 0), FreeCAD.Vector(-1, 10, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(-1, 10, 0), FreeCAD.Vector(-27, 10, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-27, 10, 0), FreeCAD.Vector(-27, -18, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(4, -1)、宽48mm、高39mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-20.0, -20.5, 0), FreeCAD.Vector(28.0, -20.5, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(28.0, -20.5, 0), FreeCAD.Vector(28.0, 18.5, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(28.0, 18.5, 0), FreeCAD.Vector(-20.0, 18.5, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-20.0, 18.5, 0), FreeCAD.Vector(-20.0, -20.5, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个对角点分别为(24, -40)和(39, -9)的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(24, -40, 0), FreeCAD.Vector(39, -40, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(39, -40, 0), FreeCAD.Vector(39, -9, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(39, -9, 0), FreeCAD.Vector(24, -9, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(24, -9, 0), FreeCAD.Vector(24, -40, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个左下角在点(-14, -35)、宽27mm、高87mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-14, -35, 0), FreeCAD.Vector(13, -35, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(13, -35, 0), FreeCAD.Vector(13, 52, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(13, 52, 0), FreeCAD.Vector(-14, 52, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-14, 52, 0), FreeCAD.Vector(-14, -35, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(7, -21)、宽41mm、高83mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-13.5, -62.5, 0), FreeCAD.Vector(27.5, -62.5, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(27.5, -62.5, 0), FreeCAD.Vector(27.5, 20.5, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(27.5, 20.5, 0), FreeCAD.Vector(-13.5, 20.5, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-13.5, 20.5, 0), FreeCAD.Vector(-13.5, -62.5, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个对角点分别为(0, -44)和(75, -28)的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(0, -44, 0), FreeCAD.Vector(75, -44, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(75, -44, 0), FreeCAD.Vector(75, -28, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(75, -28, 0), FreeCAD.Vector(0, -28, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(0, -28, 0), FreeCAD.Vector(0, -44, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个左下角在点(-32, 2)、宽63mm、高38mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-32, 2, 0), FreeCAD.Vector(31, 2, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(31, 2, 0), FreeCAD.Vector(31, 40, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(31, 40, 0), FreeCAD.Vector(-32, 40, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-32, 40, 0), FreeCAD.Vector(-32, 2, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个对角点分别为(27, -20)和(81, 12)的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(27, -20, 0), FreeCAD.Vector(81, -20, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(81, -20, 0), FreeCAD.Vector(81, 12, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(81, 12, 0), FreeCAD.Vector(27, 12, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(27, 12, 0), FreeCAD.Vector(27, -20, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个对角点分别为(-26, 9)和(49, 50)的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-26, 9, 0), FreeCAD.Vector(49, 9, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(49, 9, 0), FreeCAD.Vector(49, 50, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(49, 50, 0), FreeCAD.Vector(-26, 50, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-26, 50, 0), FreeCAD.Vector(-26, 9, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个左下角在点(17, -42)、宽18mm、高48mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(17, -42, 0), FreeCAD.Vector(35, -42, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(35, -42, 0), FreeCAD.Vector(35, 6, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(35, 6, 0), FreeCAD.Vector(17, 6, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(17, 6, 0), FreeCAD.Vector(17, -42, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(15, -13)、宽10mm、高73mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(10.0, -49.5, 0), FreeCAD.Vector(20.0, -49.5, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(20.0, -49.5, 0), FreeCAD.Vector(20.0, 23.5, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(20.0, 23.5, 0), FreeCAD.Vector(10.0, 23.5, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(10.0, 23.5, 0), FreeCAD.Vector(10.0, -49.5, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个左下角在点(26, 17)、宽95mm、高79mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(26, 17, 0), FreeCAD.Vector(121, 17, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(121, 17, 0), FreeCAD.Vector(121, 96, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(121, 96, 0), FreeCAD.Vector(26, 96, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(26, 96, 0), FreeCAD.Vector(26, 17, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个对角点分别为(0, 10)和(99, 99)的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(0, 10, 0), FreeCAD.Vector(99, 10, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(99, 10, 0), FreeCAD.Vector(99, 99, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(99, 99, 0), FreeCAD.Vector(0, 99, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(0, 99, 0), FreeCAD.Vector(0, 10, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个左下角在点(-26, -26)、宽58mm、高20mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-26, -26, 0), FreeCAD.Vector(32, -26, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(32, -26, 0), FreeCAD.Vector(32, -6, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(32, -6, 0), FreeCAD.Vector(-26, -6, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-26, -6, 0), FreeCAD.Vector(-26, -26, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个左下角在点(27, -16)、宽48mm、高77mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(27, -16, 0), FreeCAD.Vector(75, -16, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(75, -16, 0), FreeCAD.Vector(75, 61, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(75, 61, 0), FreeCAD.Vector(27, 61, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(27, 61, 0), FreeCAD.Vector(27, -16, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(26, 12)、宽29mm、高79mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(11.5, -27.5, 0), FreeCAD.Vector(40.5, -27.5, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(40.5, -27.5, 0), FreeCAD.Vector(40.5, 51.5, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(40.5, 51.5, 0), FreeCAD.Vector(11.5, 51.5, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(11.5, 51.5, 0), FreeCAD.Vector(11.5, -27.5, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个对角点分别为(-16, -45)和(82, -1)的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-16, -45, 0), FreeCAD.Vector(82, -45, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(82, -45, 0), FreeCAD.Vector(82, -1, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(82, -1, 0), FreeCAD.Vector(-16, -1, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-16, -1, 0), FreeCAD.Vector(-16, -45, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(3, 10)、宽97mm、高43mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-45.5, -11.5, 0), FreeCAD.Vector(51.5, -11.5, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(51.5, -11.5, 0), FreeCAD.Vector(51.5, 31.5, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(51.5, 31.5, 0), FreeCAD.Vector(-45.5, 31.5, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-45.5, 31.5, 0), FreeCAD.Vector(-45.5, -11.5, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(3, 12)、宽54mm、高87mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-24.0, -31.5, 0), FreeCAD.Vector(30.0, -31.5, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(30.0, -31.5, 0), FreeCAD.Vector(30.0, 55.5, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(30.0, 55.5, 0), FreeCAD.Vector(-24.0, 55.5, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-24.0, 55.5, 0), FreeCAD.Vector(-24.0, -31.5, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(6, -2)、宽88mm、高75mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-38.0, -39.5, 0), FreeCAD.Vector(50.0, -39.5, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(50.0, -39.5, 0), FreeCAD.Vector(50.0, 35.5, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(50.0, 35.5, 0), FreeCAD.Vector(-38.0, 35.5, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-38.0, 35.5, 0), FreeCAD.Vector(-38.0, -39.5, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(13, 16)、宽73mm、高40mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-23.5, -4.0, 0), FreeCAD.Vector(49.5, -4.0, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(49.5, -4.0, 0), FreeCAD.Vector(49.5, 36.0, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(49.5, 36.0, 0), FreeCAD.Vector(-23.5, 36.0, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-23.5, 36.0, 0), FreeCAD.Vector(-23.5, -4.0, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-17, -21)、宽57mm、高96mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-45.5, -69.0, 0), FreeCAD.Vector(11.5, -69.0, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(11.5, -69.0, 0), FreeCAD.Vector(11.5, 27.0, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(11.5, 27.0, 0), FreeCAD.Vector(-45.5, 27.0, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-45.5, 27.0, 0), FreeCAD.Vector(-45.5, -69.0, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个左下角在点(-13, 14)、宽20mm、高30mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-13, 14, 0), FreeCAD.Vector(7, 14, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(7, 14, 0), FreeCAD.Vector(7, 44, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(7, 44, 0), FreeCAD.Vector(-13, 44, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-13, 44, 0), FreeCAD.Vector(-13, 14, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个对角点分别为(-48, -1)和(-34, 70)的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-48, -1, 0), FreeCAD.Vector(-34, -1, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-34, -1, 0), FreeCAD.Vector(-34, 70, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(-34, 70, 0), FreeCAD.Vector(-48, 70, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-48, 70, 0), FreeCAD.Vector(-48, -1, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个对角点分别为(-4, 27)和(90, 54)的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-4, 27, 0), FreeCAD.Vector(90, 27, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(90, 27, 0), FreeCAD.Vector(90, 54, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(90, 54, 0), FreeCAD.Vector(-4, 54, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-4, 54, 0), FreeCAD.Vector(-4, 27, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个对角点分别为(-20, 27)和(33, 60)的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-20, 27, 0), FreeCAD.Vector(33, 27, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(33, 27, 0), FreeCAD.Vector(33, 60, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(33, 60, 0), FreeCAD.Vector(-20, 60, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-20, 60, 0), FreeCAD.Vector(-20, 27, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(1, 29)、宽20mm、高61mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-9.0, -1.5, 0), FreeCAD.Vector(11.0, -1.5, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(11.0, -1.5, 0), FreeCAD.Vector(11.0, 59.5, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(11.0, 59.5, 0), FreeCAD.Vector(-9.0, 59.5, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-9.0, 59.5, 0), FreeCAD.Vector(-9.0, -1.5, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个对角点分别为(-31, 1)和(-14, 27)的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-31, 1, 0), FreeCAD.Vector(-14, 1, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-14, 1, 0), FreeCAD.Vector(-14, 27, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(-14, 27, 0), FreeCAD.Vector(-31, 27, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-31, 27, 0), FreeCAD.Vector(-31, 1, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(17, 4)、宽46mm、高30mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-6.0, -11.0, 0), FreeCAD.Vector(40.0, -11.0, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(40.0, -11.0, 0), FreeCAD.Vector(40.0, 19.0, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(40.0, 19.0, 0), FreeCAD.Vector(-6.0, 19.0, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-6.0, 19.0, 0), FreeCAD.Vector(-6.0, -11.0, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个对角点分别为(17, -50)和(54, 43)的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(17, -50, 0), FreeCAD.Vector(54, -50, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(54, -50, 0), FreeCAD.Vector(54, 43, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(54, 43, 0), FreeCAD.Vector(17, 43, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(17, 43, 0), FreeCAD.Vector(17, -50, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个对角点分别为(20, -3)和(34, 23)的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(20, -3, 0), FreeCAD.Vector(34, -3, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(34, -3, 0), FreeCAD.Vector(34, 23, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(34, 23, 0), FreeCAD.Vector(20, 23, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(20, 23, 0), FreeCAD.Vector(20, -3, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个左下角在点(-22, 13)、宽61mm、高89mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-22, 13, 0), FreeCAD.Vector(39, 13, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(39, 13, 0), FreeCAD.Vector(39, 102, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(39, 102, 0), FreeCAD.Vector(-22, 102, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-22, 102, 0), FreeCAD.Vector(-22, 13, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(8, -15)、宽46mm、高63mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-15.0, -46.5, 0), FreeCAD.Vector(31.0, -46.5, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(31.0, -46.5, 0), FreeCAD.Vector(31.0, 16.5, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(31.0, 16.5, 0), FreeCAD.Vector(-15.0, 16.5, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-15.0, 16.5, 0), FreeCAD.Vector(-15.0, -46.5, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(12, -4)、宽35mm、高69mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-5.5, -38.5, 0), FreeCAD.Vector(29.5, -38.5, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(29.5, -38.5, 0), FreeCAD.Vector(29.5, 30.5, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(29.5, 30.5, 0), FreeCAD.Vector(-5.5, 30.5, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-5.5, 30.5, 0), FreeCAD.Vector(-5.5, -38.5, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(17, -4)、宽51mm、高15mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-8.5, -11.5, 0), FreeCAD.Vector(42.5, -11.5, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(42.5, -11.5, 0), FreeCAD.Vector(42.5, 3.5, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(42.5, 3.5, 0), FreeCAD.Vector(-8.5, 3.5, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-8.5, 3.5, 0), FreeCAD.Vector(-8.5, -11.5, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个对角点分别为(-9, -25)和(67, 36)的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-9, -25, 0), FreeCAD.Vector(67, -25, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(67, -25, 0), FreeCAD.Vector(67, 36, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(67, 36, 0), FreeCAD.Vector(-9, 36, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-9, 36, 0), FreeCAD.Vector(-9, -25, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(19, 16)、宽80mm、高35mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-21.0, -1.5, 0), FreeCAD.Vector(59.0, -1.5, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(59.0, -1.5, 0), FreeCAD.Vector(59.0, 33.5, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(59.0, 33.5, 0), FreeCAD.Vector(-21.0, 33.5, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-21.0, 33.5, 0), FreeCAD.Vector(-21.0, -1.5, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-12, 1)、宽36mm、高66mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-30.0, -32.0, 0), FreeCAD.Vector(6.0, -32.0, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(6.0, -32.0, 0), FreeCAD.Vector(6.0, 34.0, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(6.0, 34.0, 0), FreeCAD.Vector(-30.0, 34.0, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-30.0, 34.0, 0), FreeCAD.Vector(-30.0, -32.0, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(1, 6)、宽33mm、高46mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-15.5, -17.0, 0), FreeCAD.Vector(17.5, -17.0, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(17.5, -17.0, 0), FreeCAD.Vector(17.5, 29.0, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(17.5, 29.0, 0), FreeCAD.Vector(-15.5, 29.0, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-15.5, 29.0, 0), FreeCAD.Vector(-15.5, -17.0, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个对角点分别为(-26, 19)和(59, 96)的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-26, 19, 0), FreeCAD.Vector(59, 19, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(59, 19, 0), FreeCAD.Vector(59, 96, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(59, 96, 0), FreeCAD.Vector(-26, 96, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-26, 96, 0), FreeCAD.Vector(-26, 19, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个对角点分别为(-17, -6)和(28, 65)的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-17, -6, 0), FreeCAD.Vector(28, -6, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(28, -6, 0), FreeCAD.Vector(28, 65, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(28, 65, 0), FreeCAD.Vector(-17, 65, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-17, 65, 0), FreeCAD.Vector(-17, -6, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个左下角在点(14, 5)、宽77mm、高93mm的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(14, 5, 0), FreeCAD.Vector(91, 5, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(91, 5, 0), FreeCAD.Vector(91, 98, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(91, 98, 0), FreeCAD.Vector(14, 98, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(14, 98, 0), FreeCAD.Vector(14, 5, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个对角点分别为(-35, -16)和(-11, 0)的矩形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Rectangle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制矩形的四条边\nline1 = Part.LineSegment(FreeCAD.Vector(-35, -16, 0), FreeCAD.Vector(-11, -16, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-11, -16, 0), FreeCAD.Vector(-11, 0, 0))\nline3 = Part.LineSegment(FreeCAD.Vector(-11, 0, 0), FreeCAD.Vector(-35, 0, 0))\nline4 = Part.LineSegment(FreeCAD.Vector(-35, 0, 0), FreeCAD.Vector(-35, -16, 0))\nsketch.addGeometry(line1, False)\nsketch.addGeometry(line2, False)\nsketch.addGeometry(line3, False)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-41, 50), (44, 48), (42, -22)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-41, 50, 0), FreeCAD.Vector(44, 48, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(44, 48, 0), FreeCAD.Vector(42, -22, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(42, -22, 0), FreeCAD.Vector(-41, 50, 0))\nsketch.addGeometry(line3, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-7, 32), (-10, -27), (-43, 40), (5, 37), (27, 29), (36, 31), (-22, 32)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-7, 32, 0), FreeCAD.Vector(-10, -27, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-10, -27, 0), FreeCAD.Vector(-43, 40, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-43, 40, 0), FreeCAD.Vector(5, 37, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(5, 37, 0), FreeCAD.Vector(27, 29, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(27, 29, 0), FreeCAD.Vector(36, 31, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(36, 31, 0), FreeCAD.Vector(-22, 32, 0))\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(FreeCAD.Vector(-22, 32, 0), FreeCAD.Vector(-7, 32, 0))\nsketch.addGeometry(line7, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-46, 25), (-14, -25), (-48, -27), (-8, 22), (-5, 38), (24, 20), (-49, -4)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-46, 25, 0), FreeCAD.Vector(-14, -25, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-14, -25, 0), FreeCAD.Vector(-48, -27, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-48, -27, 0), FreeCAD.Vector(-8, 22, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-8, 22, 0), FreeCAD.Vector(-5, 38, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(-5, 38, 0), FreeCAD.Vector(24, 20, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(24, 20, 0), FreeCAD.Vector(-49, -4, 0))\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(FreeCAD.Vector(-49, -4, 0), FreeCAD.Vector(-46, 25, 0))\nsketch.addGeometry(line7, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(29, 10), (-17, 14), (-14, 16), (44, 18), (43, -9), (17, -34), (-21, -23)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(29, 10, 0), FreeCAD.Vector(-17, 14, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-17, 14, 0), FreeCAD.Vector(-14, 16, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-14, 16, 0), FreeCAD.Vector(44, 18, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(44, 18, 0), FreeCAD.Vector(43, -9, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(43, -9, 0), FreeCAD.Vector(17, -34, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(17, -34, 0), FreeCAD.Vector(-21, -23, 0))\nsketch.addGeometry(line6, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-18, -21), (18, 34), (-6, 37), (-49, 32)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-18, -21, 0), FreeCAD.Vector(18, 34, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(18, 34, 0), FreeCAD.Vector(-6, 37, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-6, 37, 0), FreeCAD.Vector(-49, 32, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-49, 32, 0), FreeCAD.Vector(-18, -21, 0))\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-15, -46), (27, 25), (-50, -16), (-34, -7), (3, 4)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-15, -46, 0), FreeCAD.Vector(27, 25, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(27, 25, 0), FreeCAD.Vector(-50, -16, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-50, -16, 0), FreeCAD.Vector(-34, -7, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-34, -7, 0), FreeCAD.Vector(3, 4, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(3, 4, 0), FreeCAD.Vector(-15, -46, 0))\nsketch.addGeometry(line5, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-50, 28), (-1, -12), (35, 16), (0, -17), (32, -17), (14, 1), (20, -37)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-50, 28, 0), FreeCAD.Vector(-1, -12, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-1, -12, 0), FreeCAD.Vector(35, 16, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(35, 16, 0), FreeCAD.Vector(0, -17, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(0, -17, 0), FreeCAD.Vector(32, -17, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(32, -17, 0), FreeCAD.Vector(14, 1, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(14, 1, 0), FreeCAD.Vector(20, -37, 0))\nsketch.addGeometry(line6, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-19, -49), (5, 14), (13, -6), (-31, -49), (-24, -30), (-28, -21)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-19, -49, 0), FreeCAD.Vector(5, 14, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(5, 14, 0), FreeCAD.Vector(13, -6, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(13, -6, 0), FreeCAD.Vector(-31, -49, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-31, -49, 0), FreeCAD.Vector(-24, -30, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(-24, -30, 0), FreeCAD.Vector(-28, -21, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(-28, -21, 0), FreeCAD.Vector(-19, -49, 0))\nsketch.addGeometry(line6, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(32, 14), (27, -21), (0, 47), (24, 32), (23, 16), (-21, 16), (-44, -45)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(32, 14, 0), FreeCAD.Vector(27, -21, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(27, -21, 0), FreeCAD.Vector(0, 47, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(0, 47, 0), FreeCAD.Vector(24, 32, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(24, 32, 0), FreeCAD.Vector(23, 16, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(23, 16, 0), FreeCAD.Vector(-21, 16, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(-21, 16, 0), FreeCAD.Vector(-44, -45, 0))\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(FreeCAD.Vector(-44, -45, 0), FreeCAD.Vector(32, 14, 0))\nsketch.addGeometry(line7, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(11, -45), (-20, -8), (-22, -21), (-31, -1)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(11, -45, 0), FreeCAD.Vector(-20, -8, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-20, -8, 0), FreeCAD.Vector(-22, -21, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-22, -21, 0), FreeCAD.Vector(-31, -1, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-31, -1, 0), FreeCAD.Vector(11, -45, 0))\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-19, -45), (-19, -32), (-5, -22)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-19, -45, 0), FreeCAD.Vector(-19, -32, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-19, -32, 0), FreeCAD.Vector(-5, -22, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-5, -22, 0), FreeCAD.Vector(-19, -45, 0))\nsketch.addGeometry(line3, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(34, 43), (-19, 20), (-14, 29), (-34, 30), (43, 26), (18, 1)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(34, 43, 0), FreeCAD.Vector(-19, 20, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-19, 20, 0), FreeCAD.Vector(-14, 29, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-14, 29, 0), FreeCAD.Vector(-34, 30, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-34, 30, 0), FreeCAD.Vector(43, 26, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(43, 26, 0), FreeCAD.Vector(18, 1, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(18, 1, 0), FreeCAD.Vector(34, 43, 0))\nsketch.addGeometry(line6, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-13, -34), (25, 11), (-5, -40)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-13, -34, 0), FreeCAD.Vector(25, 11, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(25, 11, 0), FreeCAD.Vector(-5, -40, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-5, -40, 0), FreeCAD.Vector(-13, -34, 0))\nsketch.addGeometry(line3, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-21, -48), (29, -4), (16, -37), (-13, 46)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-21, -48, 0), FreeCAD.Vector(29, -4, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(29, -4, 0), FreeCAD.Vector(16, -37, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(16, -37, 0), FreeCAD.Vector(-13, 46, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-13, 46, 0), FreeCAD.Vector(-21, -48, 0))\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-28, 7), (-26, -50), (-17, -27), (-16, -47), (27, 43), (-39, -7)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-28, 7, 0), FreeCAD.Vector(-26, -50, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-26, -50, 0), FreeCAD.Vector(-17, -27, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-17, -27, 0), FreeCAD.Vector(-16, -47, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-16, -47, 0), FreeCAD.Vector(27, 43, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(27, 43, 0), FreeCAD.Vector(-39, -7, 0))\nsketch.addGeometry(line5, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(5, 12), (-29, 49), (-21, 17), (-29, 38), (46, 25), (44, 43), (3, -7), (47, -6)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(5, 12, 0), FreeCAD.Vector(-29, 49, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-29, 49, 0), FreeCAD.Vector(-21, 17, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-21, 17, 0), FreeCAD.Vector(-29, 38, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-29, 38, 0), FreeCAD.Vector(46, 25, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(46, 25, 0), FreeCAD.Vector(44, 43, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(44, 43, 0), FreeCAD.Vector(3, -7, 0))\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(FreeCAD.Vector(3, -7, 0), FreeCAD.Vector(47, -6, 0))\nsketch.addGeometry(line7, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-17, -24), (0, 14), (15, -7), (5, 45), (18, -33), (35, -38), (13, 12), (-25, -32)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-17, -24, 0), FreeCAD.Vector(0, 14, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(0, 14, 0), FreeCAD.Vector(15, -7, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(15, -7, 0), FreeCAD.Vector(5, 45, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(5, 45, 0), FreeCAD.Vector(18, -33, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(18, -33, 0), FreeCAD.Vector(35, -38, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(35, -38, 0), FreeCAD.Vector(13, 12, 0))\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(FreeCAD.Vector(13, 12, 0), FreeCAD.Vector(-25, -32, 0))\nsketch.addGeometry(line7, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(29, 9), (39, 32), (-7, 15), (4, -20), (-4, 36), (-44, -25)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(29, 9, 0), FreeCAD.Vector(39, 32, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(39, 32, 0), FreeCAD.Vector(-7, 15, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-7, 15, 0), FreeCAD.Vector(4, -20, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(4, -20, 0), FreeCAD.Vector(-4, 36, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(-4, 36, 0), FreeCAD.Vector(-44, -25, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(-44, -25, 0), FreeCAD.Vector(29, 9, 0))\nsketch.addGeometry(line6, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(9, -6), (45, -17), (-27, -34), (12, 42), (20, -16)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(9, -6, 0), FreeCAD.Vector(45, -17, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(45, -17, 0), FreeCAD.Vector(-27, -34, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-27, -34, 0), FreeCAD.Vector(12, 42, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(12, 42, 0), FreeCAD.Vector(20, -16, 0))\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(45, 19), (-46, -39), (17, 9), (19, 37), (18, -17), (-49, -8), (36, 47)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(45, 19, 0), FreeCAD.Vector(-46, -39, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-46, -39, 0), FreeCAD.Vector(17, 9, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(17, 9, 0), FreeCAD.Vector(19, 37, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(19, 37, 0), FreeCAD.Vector(18, -17, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(18, -17, 0), FreeCAD.Vector(-49, -8, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(-49, -8, 0), FreeCAD.Vector(36, 47, 0))\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(FreeCAD.Vector(36, 47, 0), FreeCAD.Vector(45, 19, 0))\nsketch.addGeometry(line7, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(31, -38), (44, 39), (-47, 21), (-43, 27), (42, 5)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(31, -38, 0), FreeCAD.Vector(44, 39, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(44, 39, 0), FreeCAD.Vector(-47, 21, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-47, 21, 0), FreeCAD.Vector(-43, 27, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-43, 27, 0), FreeCAD.Vector(42, 5, 0))\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-10, -1), (-25, 41), (-19, 39)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-10, -1, 0), FreeCAD.Vector(-25, 41, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-25, 41, 0), FreeCAD.Vector(-19, 39, 0))\nsketch.addGeometry(line2, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(17, -23), (45, -43), (32, 29), (14, 7), (31, 7)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(17, -23, 0), FreeCAD.Vector(45, -43, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(45, -43, 0), FreeCAD.Vector(32, 29, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(32, 29, 0), FreeCAD.Vector(14, 7, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(14, 7, 0), FreeCAD.Vector(31, 7, 0))\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(47, 36), (-17, -21), (11, -14), (-7, 41), (-4, 22), (16, -1), (-35, 33)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(47, 36, 0), FreeCAD.Vector(-17, -21, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-17, -21, 0), FreeCAD.Vector(11, -14, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(11, -14, 0), FreeCAD.Vector(-7, 41, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-7, 41, 0), FreeCAD.Vector(-4, 22, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(-4, 22, 0), FreeCAD.Vector(16, -1, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(16, -1, 0), FreeCAD.Vector(-35, 33, 0))\nsketch.addGeometry(line6, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(24, 4), (24, -34), (-11, -32)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(24, 4, 0), FreeCAD.Vector(24, -34, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(24, -34, 0), FreeCAD.Vector(-11, -32, 0))\nsketch.addGeometry(line2, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(13, 34), (-25, -31), (24, -42), (17, -23), (46, -36), (16, 37)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(13, 34, 0), FreeCAD.Vector(-25, -31, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-25, -31, 0), FreeCAD.Vector(24, -42, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(24, -42, 0), FreeCAD.Vector(17, -23, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(17, -23, 0), FreeCAD.Vector(46, -36, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(46, -36, 0), FreeCAD.Vector(16, 37, 0))\nsketch.addGeometry(line5, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-42, -17), (12, -12), (-11, -28), (17, -46), (6, 17), (9, 5)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-42, -17, 0), FreeCAD.Vector(12, -12, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(12, -12, 0), FreeCAD.Vector(-11, -28, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-11, -28, 0), FreeCAD.Vector(17, -46, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(17, -46, 0), FreeCAD.Vector(6, 17, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(6, 17, 0), FreeCAD.Vector(9, 5, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(9, 5, 0), FreeCAD.Vector(-42, -17, 0))\nsketch.addGeometry(line6, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(24, -15), (-18, 32), (-11, -32), (-6, -26), (-29, 18), (0, -40), (-18, 21), (-29, 41)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(24, -15, 0), FreeCAD.Vector(-18, 32, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-18, 32, 0), FreeCAD.Vector(-11, -32, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-11, -32, 0), FreeCAD.Vector(-6, -26, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-6, -26, 0), FreeCAD.Vector(-29, 18, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(-29, 18, 0), FreeCAD.Vector(0, -40, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(0, -40, 0), FreeCAD.Vector(-18, 21, 0))\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(FreeCAD.Vector(-18, 21, 0), FreeCAD.Vector(-29, 41, 0))\nsketch.addGeometry(line7, False)\nline8 = Part.LineSegment(FreeCAD.Vector(-29, 41, 0), FreeCAD.Vector(24, -15, 0))\nsketch.addGeometry(line8, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-23, -44), (-24, 3), (35, 30), (-12, -47), (-33, 30)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-23, -44, 0), FreeCAD.Vector(-24, 3, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-24, 3, 0), FreeCAD.Vector(35, 30, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(35, 30, 0), FreeCAD.Vector(-12, -47, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-12, -47, 0), FreeCAD.Vector(-33, 30, 0))\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-9, 10), (10, 17), (9, 21)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-9, 10, 0), FreeCAD.Vector(10, 17, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(10, 17, 0), FreeCAD.Vector(9, 21, 0))\nsketch.addGeometry(line2, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(20, 12), (2, 27), (-49, -8)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(20, 12, 0), FreeCAD.Vector(2, 27, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(2, 27, 0), FreeCAD.Vector(-49, -8, 0))\nsketch.addGeometry(line2, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(14, -33), (-49, 17), (24, -24), (23, 26), (-13, 29), (44, 28), (-10, -23), (-37, -1)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(14, -33, 0), FreeCAD.Vector(-49, 17, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-49, 17, 0), FreeCAD.Vector(24, -24, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(24, -24, 0), FreeCAD.Vector(23, 26, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(23, 26, 0), FreeCAD.Vector(-13, 29, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(-13, 29, 0), FreeCAD.Vector(44, 28, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(44, 28, 0), FreeCAD.Vector(-10, -23, 0))\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(FreeCAD.Vector(-10, -23, 0), FreeCAD.Vector(-37, -1, 0))\nsketch.addGeometry(line7, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(12, 25), (-32, 15), (-32, 50), (-46, -4), (5, 43), (21, -1), (-17, -31)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(12, 25, 0), FreeCAD.Vector(-32, 15, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-32, 15, 0), FreeCAD.Vector(-32, 50, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-32, 50, 0), FreeCAD.Vector(-46, -4, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-46, -4, 0), FreeCAD.Vector(5, 43, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(5, 43, 0), FreeCAD.Vector(21, -1, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(21, -1, 0), FreeCAD.Vector(-17, -31, 0))\nsketch.addGeometry(line6, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(22, 19), (-32, 29), (4, -30)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(22, 19, 0), FreeCAD.Vector(-32, 29, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-32, 29, 0), FreeCAD.Vector(4, -30, 0))\nsketch.addGeometry(line2, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-49, -26), (14, -44), (4, 19), (-19, -13), (44, -15)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-49, -26, 0), FreeCAD.Vector(14, -44, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(14, -44, 0), FreeCAD.Vector(4, 19, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(4, 19, 0), FreeCAD.Vector(-19, -13, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-19, -13, 0), FreeCAD.Vector(44, -15, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(44, -15, 0), FreeCAD.Vector(-49, -26, 0))\nsketch.addGeometry(line5, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(23, 47), (31, 3), (-5, 26), (39, -40), (24, -50)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(23, 47, 0), FreeCAD.Vector(31, 3, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(31, 3, 0), FreeCAD.Vector(-5, 26, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-5, 26, 0), FreeCAD.Vector(39, -40, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(39, -40, 0), FreeCAD.Vector(24, -50, 0))\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-22, 30), (-44, -36), (27, 14), (38, -17), (-10, 22), (-34, -7), (45, 5), (-32, 24)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-22, 30, 0), FreeCAD.Vector(-44, -36, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-44, -36, 0), FreeCAD.Vector(27, 14, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(27, 14, 0), FreeCAD.Vector(38, -17, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(38, -17, 0), FreeCAD.Vector(-10, 22, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(-10, 22, 0), FreeCAD.Vector(-34, -7, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(-34, -7, 0), FreeCAD.Vector(45, 5, 0))\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(FreeCAD.Vector(45, 5, 0), FreeCAD.Vector(-32, 24, 0))\nsketch.addGeometry(line7, False)\nline8 = Part.LineSegment(FreeCAD.Vector(-32, 24, 0), FreeCAD.Vector(-22, 30, 0))\nsketch.addGeometry(line8, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-19, 41), (20, 13), (-32, -29), (-43, -50)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-19, 41, 0), FreeCAD.Vector(20, 13, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(20, 13, 0), FreeCAD.Vector(-32, -29, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-32, -29, 0), FreeCAD.Vector(-43, -50, 0))\nsketch.addGeometry(line3, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-21, -15), (33, -42), (46, 29), (43, 13), (-2, 1)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-21, -15, 0), FreeCAD.Vector(33, -42, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(33, -42, 0), FreeCAD.Vector(46, 29, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(46, 29, 0), FreeCAD.Vector(43, 13, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(43, 13, 0), FreeCAD.Vector(-2, 1, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(-2, 1, 0), FreeCAD.Vector(-21, -15, 0))\nsketch.addGeometry(line5, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(35, -13), (8, 11), (-33, 18), (49, 49), (36, 23), (7, 40), (18, -4)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(35, -13, 0), FreeCAD.Vector(8, 11, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(8, 11, 0), FreeCAD.Vector(-33, 18, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-33, 18, 0), FreeCAD.Vector(49, 49, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(49, 49, 0), FreeCAD.Vector(36, 23, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(36, 23, 0), FreeCAD.Vector(7, 40, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(7, 40, 0), FreeCAD.Vector(18, -4, 0))\nsketch.addGeometry(line6, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-25, 30), (-37, 44), (31, -49), (-8, 41), (-32, 25), (50, -35)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-25, 30, 0), FreeCAD.Vector(-37, 44, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-37, 44, 0), FreeCAD.Vector(31, -49, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(31, -49, 0), FreeCAD.Vector(-8, 41, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-8, 41, 0), FreeCAD.Vector(-32, 25, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(-32, 25, 0), FreeCAD.Vector(50, -35, 0))\nsketch.addGeometry(line5, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(17, 21), (-27, 3), (-7, 25)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(17, 21, 0), FreeCAD.Vector(-27, 3, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-27, 3, 0), FreeCAD.Vector(-7, 25, 0))\nsketch.addGeometry(line2, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(8, -48), (20, 31), (28, 1), (-22, -49)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(8, -48, 0), FreeCAD.Vector(20, 31, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(20, 31, 0), FreeCAD.Vector(28, 1, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(28, 1, 0), FreeCAD.Vector(-22, -49, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-22, -49, 0), FreeCAD.Vector(8, -48, 0))\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-25, -44), (-5, 29), (-4, 17), (-41, -10), (13, 39), (22, 10)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-25, -44, 0), FreeCAD.Vector(-5, 29, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-5, 29, 0), FreeCAD.Vector(-4, 17, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-4, 17, 0), FreeCAD.Vector(-41, -10, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-41, -10, 0), FreeCAD.Vector(13, 39, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(13, 39, 0), FreeCAD.Vector(22, 10, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(22, 10, 0), FreeCAD.Vector(-25, -44, 0))\nsketch.addGeometry(line6, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(31, 46), (-9, 2), (-48, 29), (-27, -43), (-3, -4), (41, 34), (-7, -45), (9, -2)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(31, 46, 0), FreeCAD.Vector(-9, 2, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-9, 2, 0), FreeCAD.Vector(-48, 29, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-48, 29, 0), FreeCAD.Vector(-27, -43, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-27, -43, 0), FreeCAD.Vector(-3, -4, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(-3, -4, 0), FreeCAD.Vector(41, 34, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(41, 34, 0), FreeCAD.Vector(-7, -45, 0))\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(FreeCAD.Vector(-7, -45, 0), FreeCAD.Vector(9, -2, 0))\nsketch.addGeometry(line7, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(48, 41), (-13, -49), (-10, 33)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(48, 41, 0), FreeCAD.Vector(-13, -49, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-13, -49, 0), FreeCAD.Vector(-10, 33, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-10, 33, 0), FreeCAD.Vector(48, 41, 0))\nsketch.addGeometry(line3, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-7, -27), (-21, -43), (-34, -23), (45, 13)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-7, -27, 0), FreeCAD.Vector(-21, -43, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-21, -43, 0), FreeCAD.Vector(-34, -23, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-34, -23, 0), FreeCAD.Vector(45, 13, 0))\nsketch.addGeometry(line3, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(7, 13), (29, 41), (-11, 32), (-5, -17), (-6, 12), (0, -29), (-11, -11), (-20, -15)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(7, 13, 0), FreeCAD.Vector(29, 41, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(29, 41, 0), FreeCAD.Vector(-11, 32, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-11, 32, 0), FreeCAD.Vector(-5, -17, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-5, -17, 0), FreeCAD.Vector(-6, 12, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(-6, 12, 0), FreeCAD.Vector(0, -29, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(0, -29, 0), FreeCAD.Vector(-11, -11, 0))\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(FreeCAD.Vector(-11, -11, 0), FreeCAD.Vector(-20, -15, 0))\nsketch.addGeometry(line7, False)\nline8 = Part.LineSegment(FreeCAD.Vector(-20, -15, 0), FreeCAD.Vector(7, 13, 0))\nsketch.addGeometry(line8, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(38, -27), (-27, 44), (41, 35)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(38, -27, 0), FreeCAD.Vector(-27, 44, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-27, 44, 0), FreeCAD.Vector(41, 35, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(41, 35, 0), FreeCAD.Vector(38, -27, 0))\nsketch.addGeometry(line3, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(25, -27), (-23, 38), (-4, -10), (5, -35), (10, 41), (-34, -6)的开放折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(25, -27, 0), FreeCAD.Vector(-23, 38, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(-23, 38, 0), FreeCAD.Vector(-4, -10, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-4, -10, 0), FreeCAD.Vector(5, -35, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(5, -35, 0), FreeCAD.Vector(10, 41, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(10, 41, 0), FreeCAD.Vector(-34, -6, 0))\nsketch.addGeometry(line5, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(12, 8)、半径为17mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(12, 8, 0), FreeCAD.Vector(0, 0, 1), 17)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个经过点(12, 15)、(26, 3)和(17, -26)的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆\np1 = FreeCAD.Vector(12, 15, 0)\np2 = FreeCAD.Vector(26, 3, 0)\np3 = FreeCAD.Vector(17, -26, 0)\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\ncircle = Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-1, -13)、直径为36mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(-1, -13, 0), FreeCAD.Vector(0, 0, 1), 18)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个经过点(0, 45)、(3, -2)和(-34, 14)的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆\np1 = FreeCAD.Vector(0, 45, 0)\np2 = FreeCAD.Vector(3, -2, 0)\np3 = FreeCAD.Vector(-34, 14, 0)\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\ncircle = Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-24, 20)、直径为16mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(-24, 20, 0), FreeCAD.Vector(0, 0, 1), 8)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(16, -12)、半径为38mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(16, -12, 0), FreeCAD.Vector(0, 0, 1), 38)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(28, 15)、半径为20mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(28, 15, 0), FreeCAD.Vector(0, 0, 1), 20)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(23, -30)、半径为9mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(23, -30, 0), FreeCAD.Vector(0, 0, 1), 9)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个经过点(-29, 32)、(34, 43)和(24, -33)的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆\np1 = FreeCAD.Vector(-29, 32, 0)\np2 = FreeCAD.Vector(34, 43, 0)\np3 = FreeCAD.Vector(24, -33, 0)\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\ncircle = Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个经过点(-33, 39)、(3, -21)和(-47, 46)的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆\np1 = FreeCAD.Vector(-33, 39, 0)\np2 = FreeCAD.Vector(3, -21, 0)\np3 = FreeCAD.Vector(-47, 46, 0)\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\ncircle = Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个经过点(38, 23)、(3, 9)和(38, 24)的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆\np1 = FreeCAD.Vector(38, 23, 0)\np2 = FreeCAD.Vector(3, 9, 0)\np3 = FreeCAD.Vector(38, 24, 0)\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\ncircle = Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个经过点(-16, -41)、(24, -46)和(-40, -15)的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆\np1 = FreeCAD.Vector(-16, -41, 0)\np2 = FreeCAD.Vector(24, -46, 0)\np3 = FreeCAD.Vector(-40, -15, 0)\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\ncircle = Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(14, -34)、直径为82mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(14, -34, 0), FreeCAD.Vector(0, 0, 1), 41)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(36, -25)、直径为18mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(36, -25, 0), FreeCAD.Vector(0, 0, 1), 9)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个经过点(9, -4)、(-50, -25)和(2, 12)的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆\np1 = FreeCAD.Vector(9, -4, 0)\np2 = FreeCAD.Vector(-50, -25, 0)\np3 = FreeCAD.Vector(2, 12, 0)\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\ncircle = Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-7, -37)、半径为11mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(-7, -37, 0), FreeCAD.Vector(0, 0, 1), 11)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(6, -19)、半径为10mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(6, -19, 0), FreeCAD.Vector(0, 0, 1), 10)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-35, -5)、半径为31mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(-35, -5, 0), FreeCAD.Vector(0, 0, 1), 31)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个经过点(32, -26)、(-18, -31)和(-31, -40)的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆\np1 = FreeCAD.Vector(32, -26, 0)\np2 = FreeCAD.Vector(-18, -31, 0)\np3 = FreeCAD.Vector(-31, -40, 0)\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\ncircle = Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-16, 6)、直径为20mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(-16, 6, 0), FreeCAD.Vector(0, 0, 1), 10)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个经过点(-21, -45)、(29, 20)和(-19, -25)的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆\np1 = FreeCAD.Vector(-21, -45, 0)\np2 = FreeCAD.Vector(29, 20, 0)\np3 = FreeCAD.Vector(-19, -25, 0)\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\ncircle = Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-36, 25)、直径为34mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(-36, 25, 0), FreeCAD.Vector(0, 0, 1), 17)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(33, -34)、直径为84mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(33, -34, 0), FreeCAD.Vector(0, 0, 1), 42)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-37, 22)、直径为96mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(-37, 22, 0), FreeCAD.Vector(0, 0, 1), 48)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-16, -20)、直径为68mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(-16, -20, 0), FreeCAD.Vector(0, 0, 1), 34)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-4, 7)、直径为46mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(-4, 7, 0), FreeCAD.Vector(0, 0, 1), 23)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(6, -37)、半径为22mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(6, -37, 0), FreeCAD.Vector(0, 0, 1), 22)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个经过点(-29, 49)、(-48, 41)和(-1, 50)的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆\np1 = FreeCAD.Vector(-29, 49, 0)\np2 = FreeCAD.Vector(-48, 41, 0)\np3 = FreeCAD.Vector(-1, 50, 0)\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\ncircle = Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个经过点(-30, 28)、(22, -49)和(-9, -42)的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆\np1 = FreeCAD.Vector(-30, 28, 0)\np2 = FreeCAD.Vector(22, -49, 0)\np3 = FreeCAD.Vector(-9, -42, 0)\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\ncircle = Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个经过点(22, -12)、(3, -14)和(-40, -45)的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆\np1 = FreeCAD.Vector(22, -12, 0)\np2 = FreeCAD.Vector(3, -14, 0)\np3 = FreeCAD.Vector(-40, -45, 0)\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\ncircle = Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个经过点(32, -20)、(40, 42)和(-10, -37)的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆\np1 = FreeCAD.Vector(32, -20, 0)\np2 = FreeCAD.Vector(40, 42, 0)\np3 = FreeCAD.Vector(-10, -37, 0)\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\ncircle = Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个经过点(26, -49)、(-7, -45)和(-1, -37)的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆\np1 = FreeCAD.Vector(26, -49, 0)\np2 = FreeCAD.Vector(-7, -45, 0)\np3 = FreeCAD.Vector(-1, -37, 0)\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\ncircle = Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个经过点(26, -1)、(5, 9)和(4, -40)的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆\np1 = FreeCAD.Vector(26, -1, 0)\np2 = FreeCAD.Vector(5, 9, 0)\np3 = FreeCAD.Vector(4, -40, 0)\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\ncircle = Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个经过点(42, 30)、(-45, 38)和(-10, -30)的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆\np1 = FreeCAD.Vector(42, 30, 0)\np2 = FreeCAD.Vector(-45, 38, 0)\np3 = FreeCAD.Vector(-10, -30, 0)\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\ncircle = Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个经过点(-37, -6)、(29, 11)和(8, -23)的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆\np1 = FreeCAD.Vector(-37, -6, 0)\np2 = FreeCAD.Vector(29, 11, 0)\np3 = FreeCAD.Vector(8, -23, 0)\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\ncircle = Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-12, -20)、直径为68mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(-12, -20, 0), FreeCAD.Vector(0, 0, 1), 34)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(3, -29)、半径为24mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(3, -29, 0), FreeCAD.Vector(0, 0, 1), 24)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(37, -12)、直径为32mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(37, -12, 0), FreeCAD.Vector(0, 0, 1), 16)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(34, 11)、半径为14mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(34, 11, 0), FreeCAD.Vector(0, 0, 1), 14)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-18, 34)、半径为36mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(-18, 34, 0), FreeCAD.Vector(0, 0, 1), 36)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个经过点(-33, -7)、(-33, 2)和(48, -48)的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆\np1 = FreeCAD.Vector(-33, -7, 0)\np2 = FreeCAD.Vector(-33, 2, 0)\np3 = FreeCAD.Vector(48, -48, 0)\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\ncircle = Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个经过点(20, -9)、(-35, -11)和(-3, -3)的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆\np1 = FreeCAD.Vector(20, -9, 0)\np2 = FreeCAD.Vector(-35, -11, 0)\np3 = FreeCAD.Vector(-3, -3, 0)\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\ncircle = Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(11, 10)、半径为34mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(11, 10, 0), FreeCAD.Vector(0, 0, 1), 34)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-10, -18)、直径为94mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(-10, -18, 0), FreeCAD.Vector(0, 0, 1), 47)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(27, -39)、直径为82mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(27, -39, 0), FreeCAD.Vector(0, 0, 1), 41)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个经过点(39, 45)、(26, 43)和(17, 30)的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆\np1 = FreeCAD.Vector(39, 45, 0)\np2 = FreeCAD.Vector(26, 43, 0)\np3 = FreeCAD.Vector(17, 30, 0)\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\ncircle = Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-17, -10)、直径为82mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(-17, -10, 0), FreeCAD.Vector(0, 0, 1), 41)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(9, -32)、半径为18mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(9, -32, 0), FreeCAD.Vector(0, 0, 1), 18)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-9, 31)、直径为48mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(-9, 31, 0), FreeCAD.Vector(0, 0, 1), 24)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-34, -9)、半径为40mm的圆。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Circle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncircle = Part.Circle(FreeCAD.Vector(-34, -9, 0), FreeCAD.Vector(0, 0, 1), 40)\nsketch.addGeometry(circle, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(0, 11)、半径为36mm、起始角度300度、终止角度330度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(0, 11, 0)\nstart = FreeCAD.Vector(18.00, -20.18, 0)\nend = FreeCAD.Vector(31.18, -7.00, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 36), math.radians(300), math.radians(330))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(26, 15)、经过点(13, -46)、终点为(-15, 46)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(26, 15, 0)  # 起点\np2 = FreeCAD.Vector(13, -46, 0)  # 中间点\np3 = FreeCAD.Vector(-15, 46, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(49, -21)、经过点(8, 46)、终点为(-19, -43)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(49, -21, 0)  # 起点\np2 = FreeCAD.Vector(8, 46, 0)  # 中间点\np3 = FreeCAD.Vector(-19, -43, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(23, 0)、半径为10mm、起始角度297度、终止角度327度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(23, 0, 0)\nstart = FreeCAD.Vector(27.54, -8.91, 0)\nend = FreeCAD.Vector(31.39, -5.45, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 10), math.radians(297), math.radians(327))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-19, -29)、半径为25mm、起始角度186度、终止角度216度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(-19, -29, 0)\nstart = FreeCAD.Vector(-43.86, -31.61, 0)\nend = FreeCAD.Vector(-39.23, -43.69, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 25), math.radians(186), math.radians(216))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(-40, -24)、经过点(33, -46)、终点为(10, -29)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(-40, -24, 0)  # 起点\np2 = FreeCAD.Vector(33, -46, 0)  # 中间点\np3 = FreeCAD.Vector(10, -29, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(40, 43)、经过点(-43, -34)、终点为(-49, -29)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(40, 43, 0)  # 起点\np2 = FreeCAD.Vector(-43, -34, 0)  # 中间点\np3 = FreeCAD.Vector(-49, -29, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(12, 6)、经过点(36, 11)、终点为(-5, 23)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(12, 6, 0)  # 起点\np2 = FreeCAD.Vector(36, 11, 0)  # 中间点\np3 = FreeCAD.Vector(-5, 23, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(-2, 6)、经过点(-9, -4)、终点为(-18, -12)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(-2, 6, 0)  # 起点\np2 = FreeCAD.Vector(-9, -4, 0)  # 中间点\np3 = FreeCAD.Vector(-18, -12, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-13, -6)、半径为45mm、起始角度79度、终止角度315度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(-13, -6, 0)\nstart = FreeCAD.Vector(-4.41, 38.17, 0)\nend = FreeCAD.Vector(18.82, -37.82, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 45), math.radians(79), math.radians(315))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-32, -6)、半径为15mm、起始角度131度、终止角度161度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(-32, -6, 0)\nstart = FreeCAD.Vector(-41.84, 5.32, 0)\nend = FreeCAD.Vector(-46.18, -1.12, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 15), math.radians(131), math.radians(161))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(26, -22)、半径为33mm、起始角度284度、终止角度314度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(26, -22, 0)\nstart = FreeCAD.Vector(33.98, -54.02, 0)\nend = FreeCAD.Vector(48.92, -45.74, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 33), math.radians(284), math.radians(314))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-31, 19)、半径为49mm、起始角度325度、终止角度355度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(-31, 19, 0)\nstart = FreeCAD.Vector(9.14, -9.11, 0)\nend = FreeCAD.Vector(17.81, 14.73, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 49), math.radians(325), math.radians(355))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(29, 1)、经过点(-40, 10)、终点为(-6, 9)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(29, 1, 0)  # 起点\np2 = FreeCAD.Vector(-40, 10, 0)  # 中间点\np3 = FreeCAD.Vector(-6, 9, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-10, -6)、半径为44mm、起始角度317度、终止角度347度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(-10, -6, 0)\nstart = FreeCAD.Vector(22.18, -36.01, 0)\nend = FreeCAD.Vector(32.87, -15.90, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 44), math.radians(317), math.radians(347))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-11, -34)、半径为15mm、起始角度257度、终止角度287度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(-11, -34, 0)\nstart = FreeCAD.Vector(-14.37, -48.62, 0)\nend = FreeCAD.Vector(-6.61, -48.34, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 15), math.radians(257), math.radians(287))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(11, -19)、半径为17mm、起始角度68度、终止角度316度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(11, -19, 0)\nstart = FreeCAD.Vector(17.37, -3.24, 0)\nend = FreeCAD.Vector(23.23, -30.81, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 17), math.radians(68), math.radians(316))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(6, -17)、经过点(49, 5)、终点为(39, 23)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(6, -17, 0)  # 起点\np2 = FreeCAD.Vector(49, 5, 0)  # 中间点\np3 = FreeCAD.Vector(39, 23, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(28, 21)、经过点(-31, -13)、终点为(47, 26)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(28, 21, 0)  # 起点\np2 = FreeCAD.Vector(-31, -13, 0)  # 中间点\np3 = FreeCAD.Vector(47, 26, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-7, 29)、半径为34mm、起始角度89度、终止角度329度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(-7, 29, 0)\nstart = FreeCAD.Vector(-6.41, 62.99, 0)\nend = FreeCAD.Vector(22.14, 11.49, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 34), math.radians(89), math.radians(329))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(26, 0)、半径为17mm、起始角度122度、终止角度223度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(26, 0, 0)\nstart = FreeCAD.Vector(16.99, 14.42, 0)\nend = FreeCAD.Vector(13.57, -11.59, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 17), math.radians(122), math.radians(223))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(5, -9)、半径为30mm、起始角度78度、终止角度324度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(5, -9, 0)\nstart = FreeCAD.Vector(11.24, 20.34, 0)\nend = FreeCAD.Vector(29.27, -26.63, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 30), math.radians(78), math.radians(324))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(-31, 31)、经过点(-47, -8)、终点为(-18, -2)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(-31, 31, 0)  # 起点\np2 = FreeCAD.Vector(-47, -8, 0)  # 中间点\np3 = FreeCAD.Vector(-18, -2, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(-49, 11)、经过点(-14, 47)、终点为(10, 25)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(-49, 11, 0)  # 起点\np2 = FreeCAD.Vector(-14, 47, 0)  # 中间点\np3 = FreeCAD.Vector(10, 25, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-4, 37)、半径为15mm、起始角度145度、终止角度175度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(-4, 37, 0)\nstart = FreeCAD.Vector(-16.29, 45.60, 0)\nend = FreeCAD.Vector(-18.94, 38.31, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 15), math.radians(145), math.radians(175))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(-15, -18)、经过点(-3, -43)、终点为(-29, 19)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(-15, -18, 0)  # 起点\np2 = FreeCAD.Vector(-3, -43, 0)  # 中间点\np3 = FreeCAD.Vector(-29, 19, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(7, 10)、经过点(34, 19)、终点为(26, -13)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(7, 10, 0)  # 起点\np2 = FreeCAD.Vector(34, 19, 0)  # 中间点\np3 = FreeCAD.Vector(26, -13, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(-5, 34)、经过点(11, 46)、终点为(33, 18)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(-5, 34, 0)  # 起点\np2 = FreeCAD.Vector(11, 46, 0)  # 中间点\np3 = FreeCAD.Vector(33, 18, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(14, -17)、半径为30mm、起始角度215度、终止角度245度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(14, -17, 0)\nstart = FreeCAD.Vector(-10.57, -34.21, 0)\nend = FreeCAD.Vector(1.32, -44.19, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 30), math.radians(215), math.radians(245))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(-9, 15)、经过点(-16, 24)、终点为(-4, 36)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(-9, 15, 0)  # 起点\np2 = FreeCAD.Vector(-16, 24, 0)  # 中间点\np3 = FreeCAD.Vector(-4, 36, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(-8, 50)、经过点(-23, -30)、终点为(33, 28)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(-8, 50, 0)  # 起点\np2 = FreeCAD.Vector(-23, -30, 0)  # 中间点\np3 = FreeCAD.Vector(33, 28, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(-17, 45)、经过点(-29, -24)、终点为(2, -17)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(-17, 45, 0)  # 起点\np2 = FreeCAD.Vector(-29, -24, 0)  # 中间点\np3 = FreeCAD.Vector(2, -17, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(38, -19)、半径为42mm、起始角度188度、终止角度256度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(38, -19, 0)\nstart = FreeCAD.Vector(-3.59, -24.85, 0)\nend = FreeCAD.Vector(27.84, -59.75, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 42), math.radians(188), math.radians(256))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(-39, -50)、经过点(25, 35)、终点为(-2, 20)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(-39, -50, 0)  # 起点\np2 = FreeCAD.Vector(25, 35, 0)  # 中间点\np3 = FreeCAD.Vector(-2, 20, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(27, 36)、经过点(-31, 33)、终点为(33, -30)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(27, 36, 0)  # 起点\np2 = FreeCAD.Vector(-31, 33, 0)  # 中间点\np3 = FreeCAD.Vector(33, -30, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(-10, -18)、经过点(39, 39)、终点为(35, -31)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(-10, -18, 0)  # 起点\np2 = FreeCAD.Vector(39, 39, 0)  # 中间点\np3 = FreeCAD.Vector(35, -31, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(-14, -44)、经过点(46, 28)、终点为(-34, 43)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(-14, -44, 0)  # 起点\np2 = FreeCAD.Vector(46, 28, 0)  # 中间点\np3 = FreeCAD.Vector(-34, 43, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-6, 38)、半径为43mm、起始角度37度、终止角度185度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(-6, 38, 0)\nstart = FreeCAD.Vector(28.34, 63.88, 0)\nend = FreeCAD.Vector(-48.84, 34.25, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 43), math.radians(37), math.radians(185))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(-5, 24)、经过点(-13, -8)、终点为(24, -24)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(-5, 24, 0)  # 起点\np2 = FreeCAD.Vector(-13, -8, 0)  # 中间点\np3 = FreeCAD.Vector(24, -24, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-17, -4)、半径为29mm、起始角度86度、终止角度209度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(-17, -4, 0)\nstart = FreeCAD.Vector(-14.98, 24.93, 0)\nend = FreeCAD.Vector(-42.36, -18.06, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 29), math.radians(86), math.radians(209))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(-22, -19)、经过点(-50, -5)、终点为(-40, 41)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(-22, -19, 0)  # 起点\np2 = FreeCAD.Vector(-50, -5, 0)  # 中间点\np3 = FreeCAD.Vector(-40, 41, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(-7, -12)、经过点(48, -46)、终点为(32, -14)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(-7, -12, 0)  # 起点\np2 = FreeCAD.Vector(48, -46, 0)  # 中间点\np3 = FreeCAD.Vector(32, -14, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(-26, 10)、经过点(-49, -31)、终点为(12, -26)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(-26, 10, 0)  # 起点\np2 = FreeCAD.Vector(-49, -31, 0)  # 中间点\np3 = FreeCAD.Vector(12, -26, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-2, -18)、半径为38mm、起始角度237度、终止角度355度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(-2, -18, 0)\nstart = FreeCAD.Vector(-22.70, -49.87, 0)\nend = FreeCAD.Vector(35.86, -21.31, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 38), math.radians(237), math.radians(355))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(32, -17)、半径为50mm、起始角度296度、终止角度326度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(32, -17, 0)\nstart = FreeCAD.Vector(53.92, -61.94, 0)\nend = FreeCAD.Vector(73.45, -44.96, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 50), math.radians(296), math.radians(326))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(16, -16)、半径为35mm、起始角度45度、终止角度126度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(16, -16, 0)\nstart = FreeCAD.Vector(40.75, 8.75, 0)\nend = FreeCAD.Vector(-4.57, 12.32, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 35), math.radians(45), math.radians(126))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(3, 28)、半径为46mm、起始角度272度、终止角度302度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(3, 28, 0)\nstart = FreeCAD.Vector(4.61, -17.97, 0)\nend = FreeCAD.Vector(27.38, -11.01, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 46), math.radians(272), math.radians(302))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-9, 4)、半径为36mm、起始角度77度、终止角度352度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(-9, 4, 0)\nstart = FreeCAD.Vector(-0.90, 39.08, 0)\nend = FreeCAD.Vector(26.65, -1.01, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 36), math.radians(77), math.radians(352))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(40, -35)、半径为25mm、起始角度44度、终止角度113度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(40, -35, 0)\nstart = FreeCAD.Vector(57.98, -17.63, 0)\nend = FreeCAD.Vector(30.23, -11.99, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 25), math.radians(44), math.radians(113))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(-36, -27)、经过点(15, 27)、终点为(-44, 11)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(-36, -27, 0)  # 起点\np2 = FreeCAD.Vector(15, 27, 0)  # 中间点\np3 = FreeCAD.Vector(-44, 11, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(32, 5), (21, 25), (-2, 26), (-22, 13), (-26, -13), (-7, -26), (23, -28)的7边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(32, 5, 0)\nv2 = FreeCAD.Vector(21, 25, 0)\nv3 = FreeCAD.Vector(-2, 26, 0)\nv4 = FreeCAD.Vector(-22, 13, 0)\nv5 = FreeCAD.Vector(-26, -13, 0)\nv6 = FreeCAD.Vector(-7, -26, 0)\nv7 = FreeCAD.Vector(23, -28, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v4)\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(v4, v5)\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(v5, v6)\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(v6, v7)\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(v7, v1)\nsketch.addGeometry(line7, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(26, -4), (27, 18), (0, 27), (-15, 21), (-23, 5), (-26, -14), (-12, -26), (9, -35), (19, -19)的9边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(26, -4, 0)\nv2 = FreeCAD.Vector(27, 18, 0)\nv3 = FreeCAD.Vector(0, 27, 0)\nv4 = FreeCAD.Vector(-15, 21, 0)\nv5 = FreeCAD.Vector(-23, 5, 0)\nv6 = FreeCAD.Vector(-26, -14, 0)\nv7 = FreeCAD.Vector(-12, -26, 0)\nv8 = FreeCAD.Vector(9, -35, 0)\nv9 = FreeCAD.Vector(19, -19, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v4)\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(v4, v5)\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(v5, v6)\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(v6, v7)\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(v7, v8)\nsketch.addGeometry(line7, False)\nline8 = Part.LineSegment(v8, v9)\nsketch.addGeometry(line8, False)\nline9 = Part.LineSegment(v9, v1)\nsketch.addGeometry(line9, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(31, 2), (-13, 24), (-11, -25)的3边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(31, 2, 0)\nv2 = FreeCAD.Vector(-13, 24, 0)\nv3 = FreeCAD.Vector(-11, -25, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v1)\nsketch.addGeometry(line3, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-5, -6)、外接圆半径为45mm的正6边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制正6边形\ncenter = FreeCAD.Vector(-5, -6, 0)\nradius = 45\nsides = 6\n# 计算各个顶点\nvertices = []\nfor i in range(sides):\n    angle = 2 * math.pi * i / sides\n    x = center.x + radius * math.cos(angle)\n    y = center.y + radius * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加各边\nfor i in range(sides):\n    line = Part.LineSegment(vertices[i], vertices[(i+1) % sides])\n    sketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(2, -9)、外接圆半径为41mm的正7边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制正7边形\ncenter = FreeCAD.Vector(2, -9, 0)\nradius = 41\nsides = 7\n# 计算各个顶点\nvertices = []\nfor i in range(sides):\n    angle = 2 * math.pi * i / sides\n    x = center.x + radius * math.cos(angle)\n    y = center.y + radius * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加各边\nfor i in range(sides):\n    line = Part.LineSegment(vertices[i], vertices[(i+1) % sides])\n    sketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(32, -1), (22, 19), (-9, 32), (-28, 15), (-29, -8), (-5, -34), (19, -23)的7边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(32, -1, 0)\nv2 = FreeCAD.Vector(22, 19, 0)\nv3 = FreeCAD.Vector(-9, 32, 0)\nv4 = FreeCAD.Vector(-28, 15, 0)\nv5 = FreeCAD.Vector(-29, -8, 0)\nv6 = FreeCAD.Vector(-5, -34, 0)\nv7 = FreeCAD.Vector(19, -23, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v4)\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(v4, v5)\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(v5, v6)\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(v6, v7)\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(v7, v1)\nsketch.addGeometry(line7, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(32, 0), (26, 18), (11, 29), (-12, 34), (-28, 13), (-26, 4), (-23, -20), (-6, -32), (4, -33), (22, -16)的10边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(32, 0, 0)\nv2 = FreeCAD.Vector(26, 18, 0)\nv3 = FreeCAD.Vector(11, 29, 0)\nv4 = FreeCAD.Vector(-12, 34, 0)\nv5 = FreeCAD.Vector(-28, 13, 0)\nv6 = FreeCAD.Vector(-26, 4, 0)\nv7 = FreeCAD.Vector(-23, -20, 0)\nv8 = FreeCAD.Vector(-6, -32, 0)\nv9 = FreeCAD.Vector(4, -33, 0)\nv10 = FreeCAD.Vector(22, -16, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v4)\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(v4, v5)\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(v5, v6)\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(v6, v7)\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(v7, v8)\nsketch.addGeometry(line7, False)\nline8 = Part.LineSegment(v8, v9)\nsketch.addGeometry(line8, False)\nline9 = Part.LineSegment(v9, v10)\nsketch.addGeometry(line9, False)\nline10 = Part.LineSegment(v10, v1)\nsketch.addGeometry(line10, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(25, 2), (20, 20), (-1, 29), (-18, 23), (-35, 5), (-18, -21), (4, -29), (24, -26)的8边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(25, 2, 0)\nv2 = FreeCAD.Vector(20, 20, 0)\nv3 = FreeCAD.Vector(-1, 29, 0)\nv4 = FreeCAD.Vector(-18, 23, 0)\nv5 = FreeCAD.Vector(-35, 5, 0)\nv6 = FreeCAD.Vector(-18, -21, 0)\nv7 = FreeCAD.Vector(4, -29, 0)\nv8 = FreeCAD.Vector(24, -26, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v4)\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(v4, v5)\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(v5, v6)\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(v6, v7)\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(v7, v8)\nsketch.addGeometry(line7, False)\nline8 = Part.LineSegment(v8, v1)\nsketch.addGeometry(line8, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(27, 5), (4, 33), (-20, 20), (-26, -21), (13, -33)的5边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(27, 5, 0)\nv2 = FreeCAD.Vector(4, 33, 0)\nv3 = FreeCAD.Vector(-20, 20, 0)\nv4 = FreeCAD.Vector(-26, -21, 0)\nv5 = FreeCAD.Vector(13, -33, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v4)\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(v4, v5)\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(v5, v1)\nsketch.addGeometry(line5, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(23, -9)、外接圆半径为13mm的正3边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制正3边形\ncenter = FreeCAD.Vector(23, -9, 0)\nradius = 13\nsides = 3\n# 计算各个顶点\nvertices = []\nfor i in range(sides):\n    angle = 2 * math.pi * i / sides\n    x = center.x + radius * math.cos(angle)\n    y = center.y + radius * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加各边\nfor i in range(sides):\n    line = Part.LineSegment(vertices[i], vertices[(i+1) % sides])\n    sketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(12, 10)、外接圆半径为12mm的正8边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制正8边形\ncenter = FreeCAD.Vector(12, 10, 0)\nradius = 12\nsides = 8\n# 计算各个顶点\nvertices = []\nfor i in range(sides):\n    angle = 2 * math.pi * i / sides\n    x = center.x + radius * math.cos(angle)\n    y = center.y + radius * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加各边\nfor i in range(sides):\n    line = Part.LineSegment(vertices[i], vertices[(i+1) % sides])\n    sketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-1, -16)、外接圆半径为14mm的正3边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制正3边形\ncenter = FreeCAD.Vector(-1, -16, 0)\nradius = 14\nsides = 3\n# 计算各个顶点\nvertices = []\nfor i in range(sides):\n    angle = 2 * math.pi * i / sides\n    x = center.x + radius * math.cos(angle)\n    y = center.y + radius * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加各边\nfor i in range(sides):\n    line = Part.LineSegment(vertices[i], vertices[(i+1) % sides])\n    sketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(31, -5), (13, 27), (-25, 19), (-24, -22), (8, -31)的5边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(31, -5, 0)\nv2 = FreeCAD.Vector(13, 27, 0)\nv3 = FreeCAD.Vector(-25, 19, 0)\nv4 = FreeCAD.Vector(-24, -22, 0)\nv5 = FreeCAD.Vector(8, -31, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v4)\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(v4, v5)\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(v5, v1)\nsketch.addGeometry(line5, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(7, -11)、外接圆半径为34mm的正7边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制正7边形\ncenter = FreeCAD.Vector(7, -11, 0)\nradius = 34\nsides = 7\n# 计算各个顶点\nvertices = []\nfor i in range(sides):\n    angle = 2 * math.pi * i / sides\n    x = center.x + radius * math.cos(angle)\n    y = center.y + radius * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加各边\nfor i in range(sides):\n    line = Part.LineSegment(vertices[i], vertices[(i+1) % sides])\n    sketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(14, 16)、外接圆半径为28mm的正4边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制正4边形\ncenter = FreeCAD.Vector(14, 16, 0)\nradius = 28\nsides = 4\n# 计算各个顶点\nvertices = []\nfor i in range(sides):\n    angle = 2 * math.pi * i / sides\n    x = center.x + radius * math.cos(angle)\n    y = center.y + radius * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加各边\nfor i in range(sides):\n    line = Part.LineSegment(vertices[i], vertices[(i+1) % sides])\n    sketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(8, -17)、外接圆半径为42mm的正10边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制正10边形\ncenter = FreeCAD.Vector(8, -17, 0)\nradius = 42\nsides = 10\n# 计算各个顶点\nvertices = []\nfor i in range(sides):\n    angle = 2 * math.pi * i / sides\n    x = center.x + radius * math.cos(angle)\n    y = center.y + radius * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加各边\nfor i in range(sides):\n    line = Part.LineSegment(vertices[i], vertices[(i+1) % sides])\n    sketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(30, -22)、外接圆半径为40mm的正6边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制正6边形\ncenter = FreeCAD.Vector(30, -22, 0)\nradius = 40\nsides = 6\n# 计算各个顶点\nvertices = []\nfor i in range(sides):\n    angle = 2 * math.pi * i / sides\n    x = center.x + radius * math.cos(angle)\n    y = center.y + radius * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加各边\nfor i in range(sides):\n    line = Part.LineSegment(vertices[i], vertices[(i+1) % sides])\n    sketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(15, -1)、外接圆半径为12mm的正3边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制正3边形\ncenter = FreeCAD.Vector(15, -1, 0)\nradius = 12\nsides = 3\n# 计算各个顶点\nvertices = []\nfor i in range(sides):\n    angle = 2 * math.pi * i / sides\n    x = center.x + radius * math.cos(angle)\n    y = center.y + radius * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加各边\nfor i in range(sides):\n    line = Part.LineSegment(vertices[i], vertices[(i+1) % sides])\n    sketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(5, -5)、外接圆半径为40mm的正10边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制正10边形\ncenter = FreeCAD.Vector(5, -5, 0)\nradius = 40\nsides = 10\n# 计算各个顶点\nvertices = []\nfor i in range(sides):\n    angle = 2 * math.pi * i / sides\n    x = center.x + radius * math.cos(angle)\n    y = center.y + radius * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加各边\nfor i in range(sides):\n    line = Part.LineSegment(vertices[i], vertices[(i+1) % sides])\n    sketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(33, -1), (-19, 26), (-20, -27)的3边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(33, -1, 0)\nv2 = FreeCAD.Vector(-19, 26, 0)\nv3 = FreeCAD.Vector(-20, -27, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v1)\nsketch.addGeometry(line3, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(25, 0), (6, 24), (-29, 13), (-27, -14), (13, -26)的5边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(25, 0, 0)\nv2 = FreeCAD.Vector(6, 24, 0)\nv3 = FreeCAD.Vector(-29, 13, 0)\nv4 = FreeCAD.Vector(-27, -14, 0)\nv5 = FreeCAD.Vector(13, -26, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v4)\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(v4, v5)\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(v5, v1)\nsketch.addGeometry(line5, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(29, -16)、外接圆半径为39mm的正5边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制正5边形\ncenter = FreeCAD.Vector(29, -16, 0)\nradius = 39\nsides = 5\n# 计算各个顶点\nvertices = []\nfor i in range(sides):\n    angle = 2 * math.pi * i / sides\n    x = center.x + radius * math.cos(angle)\n    y = center.y + radius * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加各边\nfor i in range(sides):\n    line = Part.LineSegment(vertices[i], vertices[(i+1) % sides])\n    sketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-1, 3)、外接圆半径为12mm的正3边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制正3边形\ncenter = FreeCAD.Vector(-1, 3, 0)\nradius = 12\nsides = 3\n# 计算各个顶点\nvertices = []\nfor i in range(sides):\n    angle = 2 * math.pi * i / sides\n    x = center.x + radius * math.cos(angle)\n    y = center.y + radius * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加各边\nfor i in range(sides):\n    line = Part.LineSegment(vertices[i], vertices[(i+1) % sides])\n    sketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(35, 2), (23, 20), (-4, 28), (-26, 13), (-30, -15), (-2, -26), (21, -24)的7边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(35, 2, 0)\nv2 = FreeCAD.Vector(23, 20, 0)\nv3 = FreeCAD.Vector(-4, 28, 0)\nv4 = FreeCAD.Vector(-26, 13, 0)\nv5 = FreeCAD.Vector(-30, -15, 0)\nv6 = FreeCAD.Vector(-2, -26, 0)\nv7 = FreeCAD.Vector(21, -24, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v4)\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(v4, v5)\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(v5, v6)\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(v6, v7)\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(v7, v1)\nsketch.addGeometry(line7, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(9, 26)、外接圆半径为48mm的正8边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制正8边形\ncenter = FreeCAD.Vector(9, 26, 0)\nradius = 48\nsides = 8\n# 计算各个顶点\nvertices = []\nfor i in range(sides):\n    angle = 2 * math.pi * i / sides\n    x = center.x + radius * math.cos(angle)\n    y = center.y + radius * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加各边\nfor i in range(sides):\n    line = Part.LineSegment(vertices[i], vertices[(i+1) % sides])\n    sketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(31, -4), (17, 19), (4, 35), (-22, 17), (-26, -2), (-21, -23), (-1, -35), (21, -22)的8边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(31, -4, 0)\nv2 = FreeCAD.Vector(17, 19, 0)\nv3 = FreeCAD.Vector(4, 35, 0)\nv4 = FreeCAD.Vector(-22, 17, 0)\nv5 = FreeCAD.Vector(-26, -2, 0)\nv6 = FreeCAD.Vector(-21, -23, 0)\nv7 = FreeCAD.Vector(-1, -35, 0)\nv8 = FreeCAD.Vector(21, -22, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v4)\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(v4, v5)\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(v5, v6)\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(v6, v7)\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(v7, v8)\nsketch.addGeometry(line7, False)\nline8 = Part.LineSegment(v8, v1)\nsketch.addGeometry(line8, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(32, -1), (4, 25), (-28, 2), (-1, -34)的4边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(32, -1, 0)\nv2 = FreeCAD.Vector(4, 25, 0)\nv3 = FreeCAD.Vector(-28, 2, 0)\nv4 = FreeCAD.Vector(-1, -34, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v4)\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(v4, v1)\nsketch.addGeometry(line4, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(35, -3), (5, 24), (-29, 17), (-26, -17), (10, -33)的5边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(35, -3, 0)\nv2 = FreeCAD.Vector(5, 24, 0)\nv3 = FreeCAD.Vector(-29, 17, 0)\nv4 = FreeCAD.Vector(-26, -17, 0)\nv5 = FreeCAD.Vector(10, -33, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v4)\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(v4, v5)\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(v5, v1)\nsketch.addGeometry(line5, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(0, 3)、外接圆半径为24mm的正9边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制正9边形\ncenter = FreeCAD.Vector(0, 3, 0)\nradius = 24\nsides = 9\n# 计算各个顶点\nvertices = []\nfor i in range(sides):\n    angle = 2 * math.pi * i / sides\n    x = center.x + radius * math.cos(angle)\n    y = center.y + radius * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加各边\nfor i in range(sides):\n    line = Part.LineSegment(vertices[i], vertices[(i+1) % sides])\n    sketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(25, 8)、外接圆半径为40mm的正3边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制正3边形\ncenter = FreeCAD.Vector(25, 8, 0)\nradius = 40\nsides = 3\n# 计算各个顶点\nvertices = []\nfor i in range(sides):\n    angle = 2 * math.pi * i / sides\n    x = center.x + radius * math.cos(angle)\n    y = center.y + radius * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加各边\nfor i in range(sides):\n    line = Part.LineSegment(vertices[i], vertices[(i+1) % sides])\n    sketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(26, 0), (19, 23), (-12, 25), (-28, 13), (-25, -11), (-6, -31), (21, -20)的7边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(26, 0, 0)\nv2 = FreeCAD.Vector(19, 23, 0)\nv3 = FreeCAD.Vector(-12, 25, 0)\nv4 = FreeCAD.Vector(-28, 13, 0)\nv5 = FreeCAD.Vector(-25, -11, 0)\nv6 = FreeCAD.Vector(-6, -31, 0)\nv7 = FreeCAD.Vector(21, -20, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v4)\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(v4, v5)\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(v5, v6)\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(v6, v7)\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(v7, v1)\nsketch.addGeometry(line7, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(33, 5), (-11, 30), (-18, -28)的3边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(33, 5, 0)\nv2 = FreeCAD.Vector(-11, 30, 0)\nv3 = FreeCAD.Vector(-18, -28, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v1)\nsketch.addGeometry(line3, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(29, -18)、外接圆半径为23mm的正3边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制正3边形\ncenter = FreeCAD.Vector(29, -18, 0)\nradius = 23\nsides = 3\n# 计算各个顶点\nvertices = []\nfor i in range(sides):\n    angle = 2 * math.pi * i / sides\n    x = center.x + radius * math.cos(angle)\n    y = center.y + radius * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加各边\nfor i in range(sides):\n    line = Part.LineSegment(vertices[i], vertices[(i+1) % sides])\n    sketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(34, 5), (18, 16), (-2, 26), (-25, 16), (-30, 0), (-21, -25), (-1, -32), (23, -24)的8边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(34, 5, 0)\nv2 = FreeCAD.Vector(18, 16, 0)\nv3 = FreeCAD.Vector(-2, 26, 0)\nv4 = FreeCAD.Vector(-25, 16, 0)\nv5 = FreeCAD.Vector(-30, 0, 0)\nv6 = FreeCAD.Vector(-21, -25, 0)\nv7 = FreeCAD.Vector(-1, -32, 0)\nv8 = FreeCAD.Vector(23, -24, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v4)\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(v4, v5)\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(v5, v6)\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(v6, v7)\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(v7, v8)\nsketch.addGeometry(line7, False)\nline8 = Part.LineSegment(v8, v1)\nsketch.addGeometry(line8, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(26, -1), (19, 22), (5, 32), (-16, 21), (-32, 9), (-26, -6), (-16, -29), (3, -27), (21, -14)的9边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(26, -1, 0)\nv2 = FreeCAD.Vector(19, 22, 0)\nv3 = FreeCAD.Vector(5, 32, 0)\nv4 = FreeCAD.Vector(-16, 21, 0)\nv5 = FreeCAD.Vector(-32, 9, 0)\nv6 = FreeCAD.Vector(-26, -6, 0)\nv7 = FreeCAD.Vector(-16, -29, 0)\nv8 = FreeCAD.Vector(3, -27, 0)\nv9 = FreeCAD.Vector(21, -14, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v4)\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(v4, v5)\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(v5, v6)\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(v6, v7)\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(v7, v8)\nsketch.addGeometry(line7, False)\nline8 = Part.LineSegment(v8, v9)\nsketch.addGeometry(line8, False)\nline9 = Part.LineSegment(v9, v1)\nsketch.addGeometry(line9, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-22, -21)、外接圆半径为18mm的正3边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制正3边形\ncenter = FreeCAD.Vector(-22, -21, 0)\nradius = 18\nsides = 3\n# 计算各个顶点\nvertices = []\nfor i in range(sides):\n    angle = 2 * math.pi * i / sides\n    x = center.x + radius * math.cos(angle)\n    y = center.y + radius * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加各边\nfor i in range(sides):\n    line = Part.LineSegment(vertices[i], vertices[(i+1) % sides])\n    sketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(28, -1)、外接圆半径为43mm的正10边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 绘制正10边形\ncenter = FreeCAD.Vector(28, -1, 0)\nradius = 43\nsides = 10\n# 计算各个顶点\nvertices = []\nfor i in range(sides):\n    angle = 2 * math.pi * i / sides\n    x = center.x + radius * math.cos(angle)\n    y = center.y + radius * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加各边\nfor i in range(sides):\n    line = Part.LineSegment(vertices[i], vertices[(i+1) % sides])\n    sketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(33, -5), (27, 22), (12, 30), (-13, 31), (-28, 17), (-27, -1), (-29, -19), (-4, -24), (13, -30), (24, -20)的10边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(33, -5, 0)\nv2 = FreeCAD.Vector(27, 22, 0)\nv3 = FreeCAD.Vector(12, 30, 0)\nv4 = FreeCAD.Vector(-13, 31, 0)\nv5 = FreeCAD.Vector(-28, 17, 0)\nv6 = FreeCAD.Vector(-27, -1, 0)\nv7 = FreeCAD.Vector(-29, -19, 0)\nv8 = FreeCAD.Vector(-4, -24, 0)\nv9 = FreeCAD.Vector(13, -30, 0)\nv10 = FreeCAD.Vector(24, -20, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v4)\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(v4, v5)\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(v5, v6)\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(v6, v7)\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(v7, v8)\nsketch.addGeometry(line7, False)\nline8 = Part.LineSegment(v8, v9)\nsketch.addGeometry(line8, False)\nline9 = Part.LineSegment(v9, v10)\nsketch.addGeometry(line9, False)\nline10 = Part.LineSegment(v10, v1)\nsketch.addGeometry(line10, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(26, -4), (21, 19), (0, 28), (-21, 19), (-34, 5), (-23, -24), (-4, -29), (17, -20)的8边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(26, -4, 0)\nv2 = FreeCAD.Vector(21, 19, 0)\nv3 = FreeCAD.Vector(0, 28, 0)\nv4 = FreeCAD.Vector(-21, 19, 0)\nv5 = FreeCAD.Vector(-34, 5, 0)\nv6 = FreeCAD.Vector(-23, -24, 0)\nv7 = FreeCAD.Vector(-4, -29, 0)\nv8 = FreeCAD.Vector(17, -20, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v4)\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(v4, v5)\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(v5, v6)\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(v6, v7)\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(v7, v8)\nsketch.addGeometry(line7, False)\nline8 = Part.LineSegment(v8, v1)\nsketch.addGeometry(line8, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个顶点依次为(29, -1), (19, 17), (8, 24), (-7, 24), (-21, 15), (-28, 2), (-28, -23), (-7, -24), (10, -29), (20, -17)的10边形。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Polygon\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 顶点坐标\nv1 = FreeCAD.Vector(29, -1, 0)\nv2 = FreeCAD.Vector(19, 17, 0)\nv3 = FreeCAD.Vector(8, 24, 0)\nv4 = FreeCAD.Vector(-7, 24, 0)\nv5 = FreeCAD.Vector(-21, 15, 0)\nv6 = FreeCAD.Vector(-28, 2, 0)\nv7 = FreeCAD.Vector(-28, -23, 0)\nv8 = FreeCAD.Vector(-7, -24, 0)\nv9 = FreeCAD.Vector(10, -29, 0)\nv10 = FreeCAD.Vector(20, -17, 0)\n# 添加各边\nline1 = Part.LineSegment(v1, v2)\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(v2, v3)\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(v3, v4)\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(v4, v5)\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(v5, v6)\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(v6, v7)\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(v7, v8)\nsketch.addGeometry(line7, False)\nline8 = Part.LineSegment(v8, v9)\nsketch.addGeometry(line8, False)\nline9 = Part.LineSegment(v9, v10)\nsketch.addGeometry(line9, False)\nline10 = Part.LineSegment(v10, v1)\nsketch.addGeometry(line10, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(45, -50)到(33, 23)，另一条从(-50, 37)到(-7, 49)，然后添加重合约束使第一条线段的终点与第二条线段的起点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(45, -50, 0), FreeCAD.Vector(33, 23, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-50, 37, 0), FreeCAD.Vector(-7, 49, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（线段终点到线段起点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 2, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(32, 42)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(32, 42, 0), FreeCAD.Vector(33, 43, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-29, 29)和(-13, -11)，然后添加重合约束使它们重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-29, 29, 0), FreeCAD.Vector(-28, 30, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-13, -11, 0), FreeCAD.Vector(-12, -10, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（点到点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 1, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(38, -18)和(49, -30)，然后添加重合约束使它们重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(38, -18, 0), FreeCAD.Vector(39, -17, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(49, -30, 0), FreeCAD.Vector(50, -29, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（点到点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 1, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(46, 3)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(46, 3, 0), FreeCAD.Vector(47, 4, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(41, 50)到(2, -37)，另一条从(-2, -30)到(10, 12)，然后添加重合约束使第一条线段的终点与第二条线段的起点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(41, 50, 0), FreeCAD.Vector(2, -37, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-2, -30, 0), FreeCAD.Vector(10, 12, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（线段终点到线段起点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 2, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(21, -14)到(19, 21)，另一条从(-14, 20)到(11, 6)，然后添加重合约束使第一条线段的终点与第二条线段的起点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(21, -14, 0), FreeCAD.Vector(19, 21, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-14, 20, 0), FreeCAD.Vector(11, 6, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（线段终点到线段起点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 2, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-3, -33)和(-35, 25)，然后添加重合约束使它们重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-3, -33, 0), FreeCAD.Vector(-2, -32, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-35, 25, 0), FreeCAD.Vector(-34, 26, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（点到点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 1, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-39, 40)和(-36, -15)，然后添加重合约束使它们重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-39, 40, 0), FreeCAD.Vector(-38, 41, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-36, -15, 0), FreeCAD.Vector(-35, -14, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（点到点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 1, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-27, 9)到(-22, 32)，另一条从(44, -35)到(-10, -30)，然后添加重合约束使第一条线段的终点与第二条线段的起点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-27, 9, 0), FreeCAD.Vector(-22, 32, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(44, -35, 0), FreeCAD.Vector(-10, -30, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（线段终点到线段起点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 2, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(40, -40)和(46, -50)，然后添加重合约束使它们重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(40, -40, 0), FreeCAD.Vector(41, -39, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(46, -50, 0), FreeCAD.Vector(47, -49, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（点到点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 1, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-32, -11)到(45, -45)，另一条从(26, -34)到(0, 41)，然后添加重合约束使第一条线段的终点与第二条线段的起点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-32, -11, 0), FreeCAD.Vector(45, -45, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(26, -34, 0), FreeCAD.Vector(0, 41, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（线段终点到线段起点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 2, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(41, 10)到(23, 14)，另一条从(35, 4)到(-20, 18)，然后添加重合约束使第一条线段的终点与第二条线段的起点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(41, 10, 0), FreeCAD.Vector(23, 14, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(35, 4, 0), FreeCAD.Vector(-20, 18, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（线段终点到线段起点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 2, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(31, 21)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(31, 21, 0), FreeCAD.Vector(32, 22, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-36, -48)到(27, -43)，另一条从(38, 7)到(5, 12)，然后添加重合约束使第一条线段的终点与第二条线段的起点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-36, -48, 0), FreeCAD.Vector(27, -43, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(38, 7, 0), FreeCAD.Vector(5, 12, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（线段终点到线段起点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 2, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(4, 34)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(4, 34, 0), FreeCAD.Vector(5, 35, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(-47, -24)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(-47, -24, 0), FreeCAD.Vector(-46, -23, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(49, -4)到(13, -2)，另一条从(-29, 44)到(-36, -45)，然后添加重合约束使第一条线段的终点与第二条线段的起点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(49, -4, 0), FreeCAD.Vector(13, -2, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-29, 44, 0), FreeCAD.Vector(-36, -45, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（线段终点到线段起点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 2, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(-14, -16)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(-14, -16, 0), FreeCAD.Vector(-13, -15, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(36, 41)到(33, 29)，另一条从(-7, -33)到(37, 39)，然后添加重合约束使第一条线段的终点与第二条线段的起点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(36, 41, 0), FreeCAD.Vector(33, 29, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-7, -33, 0), FreeCAD.Vector(37, 39, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（线段终点到线段起点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 2, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(-41, 35)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(-41, 35, 0), FreeCAD.Vector(-40, 36, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(14, -48)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(14, -48, 0), FreeCAD.Vector(15, -47, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(-37, -22)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(-37, -22, 0), FreeCAD.Vector(-36, -21, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(3, -35)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(3, -35, 0), FreeCAD.Vector(4, -34, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(15, 11)和(-3, 42)，然后添加重合约束使它们重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(15, 11, 0), FreeCAD.Vector(16, 12, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-3, 42, 0), FreeCAD.Vector(-2, 43, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（点到点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 1, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(-8, 5)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(-8, 5, 0), FreeCAD.Vector(-7, 6, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(48, -43)和(4, -14)，然后添加重合约束使它们重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(48, -43, 0), FreeCAD.Vector(49, -42, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(4, -14, 0), FreeCAD.Vector(5, -13, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（点到点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 1, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(23, -47)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(23, -47, 0), FreeCAD.Vector(24, -46, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(27, 8)和(-32, 2)，然后添加重合约束使它们重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(27, 8, 0), FreeCAD.Vector(28, 9, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-32, 2, 0), FreeCAD.Vector(-31, 3, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（点到点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 1, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-44, 29)到(15, -49)，另一条从(-37, 43)到(2, -44)，然后添加重合约束使第一条线段的终点与第二条线段的起点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-44, 29, 0), FreeCAD.Vector(15, -49, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-37, 43, 0), FreeCAD.Vector(2, -44, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（线段终点到线段起点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 2, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(46, -6)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(46, -6, 0), FreeCAD.Vector(47, -5, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(-36, -29)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(-36, -29, 0), FreeCAD.Vector(-35, -28, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(17, -36)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(17, -36, 0), FreeCAD.Vector(18, -35, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(-10, 2)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(-10, 2, 0), FreeCAD.Vector(-9, 3, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-10, -22)到(20, 49)，另一条从(-36, 36)到(5, 42)，然后添加重合约束使第一条线段的终点与第二条线段的起点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-10, -22, 0), FreeCAD.Vector(20, 49, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-36, 36, 0), FreeCAD.Vector(5, 42, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（线段终点到线段起点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 2, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-6, 4)和(-3, -6)，然后添加重合约束使它们重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-6, 4, 0), FreeCAD.Vector(-5, 5, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-3, -6, 0), FreeCAD.Vector(-2, -5, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（点到点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 1, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-42, 19)到(33, -39)，另一条从(-6, -12)到(27, -20)，然后添加重合约束使第一条线段的终点与第二条线段的起点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-42, 19, 0), FreeCAD.Vector(33, -39, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-6, -12, 0), FreeCAD.Vector(27, -20, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（线段终点到线段起点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 2, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-33, 38)和(-13, 39)，然后添加重合约束使它们重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-33, 38, 0), FreeCAD.Vector(-32, 39, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-13, 39, 0), FreeCAD.Vector(-12, 40, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（点到点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 1, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-33, 23)和(-16, -4)，然后添加重合约束使它们重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-33, 23, 0), FreeCAD.Vector(-32, 24, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-16, -4, 0), FreeCAD.Vector(-15, -3, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（点到点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 1, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(3, -41)到(24, -40)，另一条从(21, 13)到(-18, 4)，然后添加重合约束使第一条线段的终点与第二条线段的起点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(3, -41, 0), FreeCAD.Vector(24, -40, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(21, 13, 0), FreeCAD.Vector(-18, 4, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（线段终点到线段起点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 2, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(-46, 45)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(-46, 45, 0), FreeCAD.Vector(-45, 46, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(-42, -40)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(-42, -40, 0), FreeCAD.Vector(-41, -39, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(35, -1)和(22, -48)，然后添加重合约束使它们重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(35, -1, 0), FreeCAD.Vector(36, 0, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(22, -48, 0), FreeCAD.Vector(23, -47, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（点到点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 1, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(46, 2)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(46, 2, 0), FreeCAD.Vector(47, 3, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-33, 2)到(10, 16)，另一条从(-23, 3)到(-44, 36)，然后添加重合约束使第一条线段的终点与第二条线段的起点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-33, 2, 0), FreeCAD.Vector(10, 16, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-23, 3, 0), FreeCAD.Vector(-44, 36, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（线段终点到线段起点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 2, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(-42, -41)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(-42, -41, 0), FreeCAD.Vector(-41, -40, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-14, 35)和(-18, 4)，然后添加重合约束使它们重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-14, 35, 0), FreeCAD.Vector(-13, 36, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-18, 4, 0), FreeCAD.Vector(-17, 5, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（点到点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 1, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(-37, 3)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(-37, 3, 0), FreeCAD.Vector(-36, 4, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(47, -37)和(-45, -48)，然后添加重合约束使它们重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(47, -37, 0), FreeCAD.Vector(48, -36, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-45, -48, 0), FreeCAD.Vector(-44, -47, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（点到点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 1, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-22, -19)到(-21, -31)，另一条从(1, 7)到(36, 40)，然后添加重合约束使第一条线段的终点与第二条线段的起点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-22, -19, 0), FreeCAD.Vector(-21, -31, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(1, 7, 0), FreeCAD.Vector(36, 40, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（线段终点到线段起点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 2, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(7, -33)到(5, 46)，另一条从(-45, 15)到(-3, -11)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(7, -33, 0), FreeCAD.Vector(5, 46, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-45, 15, 0), FreeCAD.Vector(-3, -11, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(20, 24)到(18, -23)，另一条从(-7, -22)到(3, -7)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(20, 24, 0), FreeCAD.Vector(18, -23, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-7, -22, 0), FreeCAD.Vector(3, -7, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(0, -11)到(44, -18)，另一条从(-5, -20)到(-49, 19)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(0, -11, 0), FreeCAD.Vector(44, -18, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-5, -20, 0), FreeCAD.Vector(-49, 19, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(36, 32)到(-18, -44)，另一条从(-7, -40)到(-12, -46)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(36, 32, 0), FreeCAD.Vector(-18, -44, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-7, -40, 0), FreeCAD.Vector(-12, -46, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-24, -35)到(19, 24)，另一条从(11, -22)到(28, -11)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-24, -35, 0), FreeCAD.Vector(19, 24, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(11, -22, 0), FreeCAD.Vector(28, -11, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(4, 15)到(-30, 46)，另一条从(-16, -10)到(-25, -10)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(4, 15, 0), FreeCAD.Vector(-30, 46, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-16, -10, 0), FreeCAD.Vector(-25, -10, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(8, -32)到(-38, 30)，另一条从(-17, -7)到(46, -47)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(8, -32, 0), FreeCAD.Vector(-38, 30, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-17, -7, 0), FreeCAD.Vector(46, -47, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-19, -18)到(-17, -43)，另一条从(23, -26)到(40, 47)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-19, -18, 0), FreeCAD.Vector(-17, -43, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(23, -26, 0), FreeCAD.Vector(40, 47, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(2, 27)到(-26, -19)，另一条从(-45, -39)到(24, -15)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(2, 27, 0), FreeCAD.Vector(-26, -19, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-45, -39, 0), FreeCAD.Vector(24, -15, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-7, 15)到(-14, 28)，另一条从(5, 36)到(12, -32)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-7, 15, 0), FreeCAD.Vector(-14, 28, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(5, 36, 0), FreeCAD.Vector(12, -32, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(3, 0)到(-15, 31)，另一条从(17, -49)到(1, -36)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(3, 0, 0), FreeCAD.Vector(-15, 31, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(17, -49, 0), FreeCAD.Vector(1, -36, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(31, 5)到(-16, -23)，另一条从(21, 39)到(49, 8)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(31, 5, 0), FreeCAD.Vector(-16, -23, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(21, 39, 0), FreeCAD.Vector(49, 8, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(45, 49)到(34, 8)，另一条从(-19, -34)到(2, -5)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(45, 49, 0), FreeCAD.Vector(34, 8, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-19, -34, 0), FreeCAD.Vector(2, -5, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(47, -9)到(22, 21)，另一条从(13, 36)到(8, -3)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(47, -9, 0), FreeCAD.Vector(22, 21, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(13, 36, 0), FreeCAD.Vector(8, -3, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(47, 18)到(1, 0)，另一条从(23, 17)到(-34, 23)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(47, 18, 0), FreeCAD.Vector(1, 0, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(23, 17, 0), FreeCAD.Vector(-34, 23, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-31, 41)到(47, -21)，另一条从(-20, 5)到(-43, 28)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-31, 41, 0), FreeCAD.Vector(47, -21, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-20, 5, 0), FreeCAD.Vector(-43, 28, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(6, -41)到(-10, 27)，另一条从(12, 47)到(-9, 24)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(6, -41, 0), FreeCAD.Vector(-10, 27, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(12, 47, 0), FreeCAD.Vector(-9, 24, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(2, 14)到(-44, -20)，另一条从(27, 12)到(38, 3)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(2, 14, 0), FreeCAD.Vector(-44, -20, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(27, 12, 0), FreeCAD.Vector(38, 3, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(7, 18)到(32, -9)，另一条从(30, 41)到(-37, 12)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(7, 18, 0), FreeCAD.Vector(32, -9, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(30, 41, 0), FreeCAD.Vector(-37, 12, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-50, 10)到(-44, -27)，另一条从(28, 17)到(-42, -16)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-50, 10, 0), FreeCAD.Vector(-44, -27, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(28, 17, 0), FreeCAD.Vector(-42, -16, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-19, -35)到(3, -46)，另一条从(-44, 28)到(-14, 33)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-19, -35, 0), FreeCAD.Vector(3, -46, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-44, 28, 0), FreeCAD.Vector(-14, 33, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(46, -30)到(39, -45)，另一条从(38, -6)到(9, 36)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(46, -30, 0), FreeCAD.Vector(39, -45, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(38, -6, 0), FreeCAD.Vector(9, 36, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(25, 20)到(37, 14)，另一条从(33, -47)到(-36, -1)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(25, 20, 0), FreeCAD.Vector(37, 14, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(33, -47, 0), FreeCAD.Vector(-36, -1, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(36, 11)到(21, 30)，另一条从(-9, 3)到(-44, 45)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(36, 11, 0), FreeCAD.Vector(21, 30, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-9, 3, 0), FreeCAD.Vector(-44, 45, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(39, 2)到(19, 32)，另一条从(-41, 37)到(-28, 38)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(39, 2, 0), FreeCAD.Vector(19, 32, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-41, 37, 0), FreeCAD.Vector(-28, 38, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(33, -37)到(44, -21)，另一条从(36, -29)到(47, -26)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(33, -37, 0), FreeCAD.Vector(44, -21, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(36, -29, 0), FreeCAD.Vector(47, -26, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-37, 5)到(-3, 31)，另一条从(-1, 10)到(-11, 43)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-37, 5, 0), FreeCAD.Vector(-3, 31, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-1, 10, 0), FreeCAD.Vector(-11, 43, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-36, 15)到(-35, -14)，另一条从(17, -24)到(29, 1)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-36, 15, 0), FreeCAD.Vector(-35, -14, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(17, -24, 0), FreeCAD.Vector(29, 1, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-19, -3)到(-36, -30)，另一条从(-2, -42)到(-43, 27)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-19, -3, 0), FreeCAD.Vector(-36, -30, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-2, -42, 0), FreeCAD.Vector(-43, 27, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-16, 29)到(10, 19)，另一条从(-23, -49)到(47, 18)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-16, 29, 0), FreeCAD.Vector(10, 19, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-23, -49, 0), FreeCAD.Vector(47, 18, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-13, 9)到(-44, -31)，另一条从(-15, 9)到(20, -3)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-13, 9, 0), FreeCAD.Vector(-44, -31, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-15, 9, 0), FreeCAD.Vector(20, -3, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(8, -26)到(33, 42)，另一条从(-12, 49)到(-21, 2)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(8, -26, 0), FreeCAD.Vector(33, 42, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-12, 49, 0), FreeCAD.Vector(-21, 2, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-41, 35)到(46, -23)，另一条从(-6, -39)到(-11, 27)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-41, 35, 0), FreeCAD.Vector(46, -23, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-6, -39, 0), FreeCAD.Vector(-11, 27, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(37, -32)到(26, 44)，另一条从(32, -24)到(-5, 44)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(37, -32, 0), FreeCAD.Vector(26, 44, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(32, -24, 0), FreeCAD.Vector(-5, 44, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-44, 19)到(37, -33)，另一条从(19, 48)到(24, -33)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-44, 19, 0), FreeCAD.Vector(37, -33, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(19, 48, 0), FreeCAD.Vector(24, -33, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-12, 29)到(-35, 38)，另一条从(14, 15)到(14, 5)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-12, 29, 0), FreeCAD.Vector(-35, 38, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(14, 15, 0), FreeCAD.Vector(14, 5, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-13, 39)到(-9, 38)，另一条从(-48, 2)到(-28, -42)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-13, 39, 0), FreeCAD.Vector(-9, 38, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-48, 2, 0), FreeCAD.Vector(-28, -42, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-16, 3)到(-2, 33)，另一条从(24, 9)到(-8, -3)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-16, 3, 0), FreeCAD.Vector(-2, 33, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(24, 9, 0), FreeCAD.Vector(-8, -3, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(1, 44)到(30, -40)，另一条从(-33, 21)到(-5, -32)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(1, 44, 0), FreeCAD.Vector(30, -40, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-33, 21, 0), FreeCAD.Vector(-5, -32, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-41, 34)到(-25, -41)，另一条从(8, -10)到(-19, -22)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-41, 34, 0), FreeCAD.Vector(-25, -41, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(8, -10, 0), FreeCAD.Vector(-19, -22, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(18, 18)到(38, -49)，另一条从(49, -10)到(8, 38)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(18, 18, 0), FreeCAD.Vector(38, -49, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(49, -10, 0), FreeCAD.Vector(8, 38, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(8, -47)到(20, -36)，另一条从(-26, 11)到(5, -27)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(8, -47, 0), FreeCAD.Vector(20, -36, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-26, 11, 0), FreeCAD.Vector(5, -27, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-41, -19)到(-25, -3)，另一条从(-42, -3)到(18, -49)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-41, -19, 0), FreeCAD.Vector(-25, -3, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-42, -3, 0), FreeCAD.Vector(18, -49, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-43, -46)到(24, 5)，另一条从(35, 0)到(15, -49)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-43, -46, 0), FreeCAD.Vector(24, 5, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(35, 0, 0), FreeCAD.Vector(15, -49, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(18, 50)到(24, -22)，另一条从(-8, 3)到(34, -28)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(18, 50, 0), FreeCAD.Vector(24, -22, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-8, 3, 0), FreeCAD.Vector(34, -28, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-2, -44)到(-36, 47)，另一条从(23, 8)到(29, 13)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-2, -44, 0), FreeCAD.Vector(-36, 47, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(23, 8, 0), FreeCAD.Vector(29, 13, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(5, -9)到(22, -22)，另一条从(14, 50)到(18, -44)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(5, -9, 0), FreeCAD.Vector(22, -22, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(14, 50, 0), FreeCAD.Vector(18, -44, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(12, 25)到(19, 34)，另一条从(33, -23)到(-5, 21)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(12, 25, 0), FreeCAD.Vector(19, 34, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(33, -23, 0), FreeCAD.Vector(-5, 21, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(5, 3)到(-21, -13)，另一条从(-50, -25)到(0, -8)，然后添加平行约束使它们平行。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Parallel\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(5, 3, 0), FreeCAD.Vector(-21, -13, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-50, -25, 0), FreeCAD.Vector(0, -8, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加平行约束\nsketch.addConstraint(Sketcher.Constraint('Parallel', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-17, 31)到(13, -17)，另一条从(-18, 8)到(-37, 17)，然后添加垂直约束使它们相互垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Perpendicular\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-17, 31, 0), FreeCAD.Vector(13, -17, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-18, 8, 0), FreeCAD.Vector(-37, 17, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Perpendicular', geo1, geo2))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-16, -3)到(17, 17)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-16, -3, 0), FreeCAD.Vector(17, 17, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-38, 33)到(7, 25)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-38, 33, 0), FreeCAD.Vector(7, 25, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-35, -3)到(-28, -48)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-35, -3, 0), FreeCAD.Vector(-28, -48, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(19, 43)到(42, -33)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(19, 43, 0), FreeCAD.Vector(42, -33, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(21, -10)到(31, 49)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(21, -10, 0), FreeCAD.Vector(31, 49, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(10, 33)到(-22, -28)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(10, 33, 0), FreeCAD.Vector(-22, -28, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(33, -19)到(27, -46)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(33, -19, 0), FreeCAD.Vector(27, -46, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-10, 24)到(32, 21)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-10, 24, 0), FreeCAD.Vector(32, 21, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-38, 36)到(34, 24)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-38, 36, 0), FreeCAD.Vector(34, 24, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(44, -44)到(38, 16)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(44, -44, 0), FreeCAD.Vector(38, 16, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-38, 39)到(37, 4)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-38, 39, 0), FreeCAD.Vector(37, 4, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-6, 46)到(-31, -18)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-6, 46, 0), FreeCAD.Vector(-31, -18, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(34, 3)到(-43, -23)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(34, 3, 0), FreeCAD.Vector(-43, -23, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-16, 41)到(31, 40)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-16, 41, 0), FreeCAD.Vector(31, 40, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(33, 43)到(-10, 8)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(33, 43, 0), FreeCAD.Vector(-10, 8, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-3, -50)到(24, 48)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-3, -50, 0), FreeCAD.Vector(24, 48, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(10, -32)到(-44, -25)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(10, -32, 0), FreeCAD.Vector(-44, -25, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-20, -29)到(-19, 28)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-20, -29, 0), FreeCAD.Vector(-19, 28, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-9, 1)到(-43, -33)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-9, 1, 0), FreeCAD.Vector(-43, -33, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(1, 26)到(-37, -6)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(1, 26, 0), FreeCAD.Vector(-37, -6, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-27, -44)到(39, 15)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-27, -44, 0), FreeCAD.Vector(39, 15, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-24, -36)到(43, -26)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-24, -36, 0), FreeCAD.Vector(43, -26, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-46, 22)到(32, -15)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-46, 22, 0), FreeCAD.Vector(32, -15, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(49, 6)到(9, 8)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(49, 6, 0), FreeCAD.Vector(9, 8, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-34, -24)到(-17, 31)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-34, -24, 0), FreeCAD.Vector(-17, 31, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-6, -32)到(1, 44)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-6, -32, 0), FreeCAD.Vector(1, 44, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(1, -30)到(-5, 21)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(1, -30, 0), FreeCAD.Vector(-5, 21, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-37, 40)到(16, 37)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-37, 40, 0), FreeCAD.Vector(16, 37, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-23, 48)到(-36, -16)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-23, 48, 0), FreeCAD.Vector(-36, -16, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(15, -15)到(-36, -11)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(15, -15, 0), FreeCAD.Vector(-36, -11, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-13, -49)到(-5, 45)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-13, -49, 0), FreeCAD.Vector(-5, 45, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-46, -29)到(48, 9)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-46, -29, 0), FreeCAD.Vector(48, 9, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(46, -30)到(39, -32)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(46, -30, 0), FreeCAD.Vector(39, -32, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(34, 38)到(17, -31)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(34, 38, 0), FreeCAD.Vector(17, -31, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(14, -14)到(-11, -8)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(14, -14, 0), FreeCAD.Vector(-11, -8, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-49, -40)到(-7, 12)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-49, -40, 0), FreeCAD.Vector(-7, 12, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-22, -17)到(17, 4)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-22, -17, 0), FreeCAD.Vector(17, 4, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(19, -28)到(-27, -7)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(19, -28, 0), FreeCAD.Vector(-27, -7, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-3, 47)到(-38, -27)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-3, 47, 0), FreeCAD.Vector(-38, -27, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(38, -28)到(11, 40)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(38, -28, 0), FreeCAD.Vector(11, 40, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(0, -41)到(5, 7)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(0, -41, 0), FreeCAD.Vector(5, 7, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(16, 6)到(46, 18)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(16, 6, 0), FreeCAD.Vector(46, 18, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(47, -48)到(-18, 34)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(47, -48, 0), FreeCAD.Vector(-18, 34, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-12, 42)到(36, -21)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-12, 42, 0), FreeCAD.Vector(36, -21, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(4, -38)到(13, -43)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(4, -38, 0), FreeCAD.Vector(13, -43, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(15, 14)到(-34, -33)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(15, 14, 0), FreeCAD.Vector(-34, -33, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(25, 47)到(-18, -1)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(25, 47, 0), FreeCAD.Vector(-18, -1, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(37, 0)到(-26, -9)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(37, 0, 0), FreeCAD.Vector(-26, -9, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-2, 20)到(10, 21)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-2, 20, 0), FreeCAD.Vector(10, 21, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(32, -7)到(-30, 35)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(32, -7, 0), FreeCAD.Vector(-30, 35, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(18, -24)到(1, -29)的线段，然后添加长度约束，设置其长度为18mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(18, -24, 0), FreeCAD.Vector(1, -29, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加长度约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo, 18))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(50, 42)和(5, -43)，然后添加垂直距离约束，设置它们在Y方向的距离为85mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceY\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(50, 42, 0), FreeCAD.Vector(51, 43, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(5, -43, 0), FreeCAD.Vector(6, -42, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceY', geo1, 1, geo2, 1, 85))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-32, -37)和(-27, 9)，然后添加垂直距离约束，设置它们在Y方向的距离为46mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceY\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-32, -37, 0), FreeCAD.Vector(-31, -36, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-27, 9, 0), FreeCAD.Vector(-26, 10, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceY', geo1, 1, geo2, 1, 46))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-26, -7)和(-5, -36)，然后添加距离约束，设置它们之间的距离为36mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-26, -7, 0), FreeCAD.Vector(-25, -6, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-5, -36, 0), FreeCAD.Vector(-4, -35, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加距离约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo1, 1, geo2, 1, 36))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-46, 38)到(24, 43)的线段，然后添加长度约束，设置其长度为70mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-46, 38, 0), FreeCAD.Vector(24, 43, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加长度约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo, 70))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(28, 46)和(40, -24)，然后添加水平距离约束，设置它们在X方向的距离为12mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceX\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(28, 46, 0), FreeCAD.Vector(29, 47, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(40, -24, 0), FreeCAD.Vector(41, -23, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加水平距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceX', geo1, 1, geo2, 1, 12))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-43, -48)到(45, -17)的线段，然后添加长度约束，设置其长度为93mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-43, -48, 0), FreeCAD.Vector(45, -17, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加长度约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo, 93))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(22, -12)和(14, -33)，然后添加水平距离约束，设置它们在X方向的距离为8mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceX\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(22, -12, 0), FreeCAD.Vector(23, -11, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(14, -33, 0), FreeCAD.Vector(15, -32, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加水平距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceX', geo1, 1, geo2, 1, 8))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-3, -35)和(25, 46)，然后添加垂直距离约束，设置它们在Y方向的距离为81mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceY\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-3, -35, 0), FreeCAD.Vector(-2, -34, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(25, 46, 0), FreeCAD.Vector(26, 47, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceY', geo1, 1, geo2, 1, 81))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-32, 27)和(45, 9)，然后添加垂直距离约束，设置它们在Y方向的距离为18mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceY\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-32, 27, 0), FreeCAD.Vector(-31, 28, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(45, 9, 0), FreeCAD.Vector(46, 10, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceY', geo1, 1, geo2, 1, 18))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(46, 13)和(33, 9)，然后添加距离约束，设置它们之间的距离为14mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(46, 13, 0), FreeCAD.Vector(47, 14, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(33, 9, 0), FreeCAD.Vector(34, 10, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加距离约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo1, 1, geo2, 1, 14))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(7, 23)和(1, -17)，然后添加垂直距离约束，设置它们在Y方向的距离为40mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceY\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(7, 23, 0), FreeCAD.Vector(8, 24, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(1, -17, 0), FreeCAD.Vector(2, -16, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceY', geo1, 1, geo2, 1, 40))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-14, -20)和(-49, -6)，然后添加距离约束，设置它们之间的距离为38mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-14, -20, 0), FreeCAD.Vector(-13, -19, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-49, -6, 0), FreeCAD.Vector(-48, -5, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加距离约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo1, 1, geo2, 1, 38))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-17, 25)和(-48, 14)，然后添加垂直距离约束，设置它们在Y方向的距离为11mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceY\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-17, 25, 0), FreeCAD.Vector(-16, 26, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-48, 14, 0), FreeCAD.Vector(-47, 15, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceY', geo1, 1, geo2, 1, 11))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-19, 18)和(49, 12)，然后添加距离约束，设置它们之间的距离为68mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-19, 18, 0), FreeCAD.Vector(-18, 19, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(49, 12, 0), FreeCAD.Vector(50, 13, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加距离约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo1, 1, geo2, 1, 68))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-12, 46)和(11, -11)，然后添加水平距离约束，设置它们在X方向的距离为23mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceX\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-12, 46, 0), FreeCAD.Vector(-11, 47, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(11, -11, 0), FreeCAD.Vector(12, -10, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加水平距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceX', geo1, 1, geo2, 1, 23))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(10, 46)和(6, -35)，然后添加水平距离约束，设置它们在X方向的距离为4mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceX\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(10, 46, 0), FreeCAD.Vector(11, 47, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(6, -35, 0), FreeCAD.Vector(7, -34, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加水平距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceX', geo1, 1, geo2, 1, 4))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-16, 9)和(15, 5)，然后添加水平距离约束，设置它们在X方向的距离为31mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceX\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-16, 9, 0), FreeCAD.Vector(-15, 10, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(15, 5, 0), FreeCAD.Vector(16, 6, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加水平距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceX', geo1, 1, geo2, 1, 31))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-5, -3)和(29, 11)，然后添加距离约束，设置它们之间的距离为37mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-5, -3, 0), FreeCAD.Vector(-4, -2, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(29, 11, 0), FreeCAD.Vector(30, 12, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加距离约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo1, 1, geo2, 1, 37))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-21, 30)和(50, 21)，然后添加垂直距离约束，设置它们在Y方向的距离为9mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceY\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-21, 30, 0), FreeCAD.Vector(-20, 31, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(50, 21, 0), FreeCAD.Vector(51, 22, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceY', geo1, 1, geo2, 1, 9))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-39, 47)和(26, 33)，然后添加水平距离约束，设置它们在X方向的距离为65mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceX\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-39, 47, 0), FreeCAD.Vector(-38, 48, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(26, 33, 0), FreeCAD.Vector(27, 34, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加水平距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceX', geo1, 1, geo2, 1, 65))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-47, -22)和(16, -18)，然后添加水平距离约束，设置它们在X方向的距离为63mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceX\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-47, -22, 0), FreeCAD.Vector(-46, -21, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(16, -18, 0), FreeCAD.Vector(17, -17, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加水平距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceX', geo1, 1, geo2, 1, 63))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(18, 32)和(0, 7)，然后添加距离约束，设置它们之间的距离为31mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(18, 32, 0), FreeCAD.Vector(19, 33, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(0, 7, 0), FreeCAD.Vector(1, 8, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加距离约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo1, 1, geo2, 1, 31))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(14, 1)和(1, -25)，然后添加水平距离约束，设置它们在X方向的距离为13mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceX\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(14, 1, 0), FreeCAD.Vector(15, 2, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(1, -25, 0), FreeCAD.Vector(2, -24, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加水平距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceX', geo1, 1, geo2, 1, 13))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-34, -12)到(-6, -31)的线段，然后添加长度约束，设置其长度为34mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-34, -12, 0), FreeCAD.Vector(-6, -31, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加长度约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo, 34))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(11, 41)和(36, 34)，然后添加距离约束，设置它们之间的距离为26mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(11, 41, 0), FreeCAD.Vector(12, 42, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(36, 34, 0), FreeCAD.Vector(37, 35, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加距离约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo1, 1, geo2, 1, 26))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-47, -26)和(19, -45)，然后添加垂直距离约束，设置它们在Y方向的距离为19mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceY\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-47, -26, 0), FreeCAD.Vector(-46, -25, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(19, -45, 0), FreeCAD.Vector(20, -44, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceY', geo1, 1, geo2, 1, 19))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(31, -28)和(-34, -5)，然后添加水平距离约束，设置它们在X方向的距离为65mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceX\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(31, -28, 0), FreeCAD.Vector(32, -27, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-34, -5, 0), FreeCAD.Vector(-33, -4, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加水平距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceX', geo1, 1, geo2, 1, 65))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-49, 13)和(47, -23)，然后添加距离约束，设置它们之间的距离为103mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-49, 13, 0), FreeCAD.Vector(-48, 14, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(47, -23, 0), FreeCAD.Vector(48, -22, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加距离约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo1, 1, geo2, 1, 103))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(6, 40)和(13, 48)，然后添加距离约束，设置它们之间的距离为11mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(6, 40, 0), FreeCAD.Vector(7, 41, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(13, 48, 0), FreeCAD.Vector(14, 49, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加距离约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo1, 1, geo2, 1, 11))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-46, -13)和(40, 35)，然后添加距离约束，设置它们之间的距离为98mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-46, -13, 0), FreeCAD.Vector(-45, -12, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(40, 35, 0), FreeCAD.Vector(41, 36, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加距离约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo1, 1, geo2, 1, 98))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(28, 29)到(30, 10)的线段，然后添加长度约束，设置其长度为19mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(28, 29, 0), FreeCAD.Vector(30, 10, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加长度约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo, 19))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-19, 43)和(-36, -44)，然后添加距离约束，设置它们之间的距离为89mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-19, 43, 0), FreeCAD.Vector(-18, 44, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-36, -44, 0), FreeCAD.Vector(-35, -43, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加距离约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo1, 1, geo2, 1, 89))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(36, -43)和(-5, -33)，然后添加垂直距离约束，设置它们在Y方向的距离为10mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceY\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(36, -43, 0), FreeCAD.Vector(37, -42, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-5, -33, 0), FreeCAD.Vector(-4, -32, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceY', geo1, 1, geo2, 1, 10))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-7, -15)和(37, -40)，然后添加距离约束，设置它们之间的距离为51mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-7, -15, 0), FreeCAD.Vector(-6, -14, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(37, -40, 0), FreeCAD.Vector(38, -39, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加距离约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo1, 1, geo2, 1, 51))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-18, 42)和(-48, -34)，然后添加垂直距离约束，设置它们在Y方向的距离为76mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceY\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-18, 42, 0), FreeCAD.Vector(-17, 43, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-48, -34, 0), FreeCAD.Vector(-47, -33, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceY', geo1, 1, geo2, 1, 76))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-13, -28)和(11, -46)，然后添加垂直距离约束，设置它们在Y方向的距离为18mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceY\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-13, -28, 0), FreeCAD.Vector(-12, -27, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(11, -46, 0), FreeCAD.Vector(12, -45, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceY', geo1, 1, geo2, 1, 18))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(39, 38)和(-32, -39)，然后添加水平距离约束，设置它们在X方向的距离为71mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceX\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(39, 38, 0), FreeCAD.Vector(40, 39, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-32, -39, 0), FreeCAD.Vector(-31, -38, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加水平距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceX', geo1, 1, geo2, 1, 71))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(4, -8)和(-5, 47)，然后添加垂直距离约束，设置它们在Y方向的距离为55mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceY\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(4, -8, 0), FreeCAD.Vector(5, -7, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-5, 47, 0), FreeCAD.Vector(-4, 48, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceY', geo1, 1, geo2, 1, 55))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-8, -12)和(-31, -25)，然后添加水平距离约束，设置它们在X方向的距离为23mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceX\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-8, -12, 0), FreeCAD.Vector(-7, -11, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-31, -25, 0), FreeCAD.Vector(-30, -24, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加水平距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceX', geo1, 1, geo2, 1, 23))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(21, 42)和(-23, 50)，然后添加垂直距离约束，设置它们在Y方向的距离为8mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceY\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(21, 42, 0), FreeCAD.Vector(22, 43, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-23, 50, 0), FreeCAD.Vector(-22, 51, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceY', geo1, 1, geo2, 1, 8))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(0, -49)和(-5, 24)，然后添加距离约束，设置它们之间的距离为73mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(0, -49, 0), FreeCAD.Vector(1, -48, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-5, 24, 0), FreeCAD.Vector(-4, 25, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加距离约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo1, 1, geo2, 1, 73))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-43, -3)和(-14, 47)，然后添加距离约束，设置它们之间的距离为58mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-43, -3, 0), FreeCAD.Vector(-42, -2, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-14, 47, 0), FreeCAD.Vector(-13, 48, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加距离约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo1, 1, geo2, 1, 58))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(3, 30)和(39, -15)，然后添加垂直距离约束，设置它们在Y方向的距离为45mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceY\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(3, 30, 0), FreeCAD.Vector(4, 31, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(39, -15, 0), FreeCAD.Vector(40, -14, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceY', geo1, 1, geo2, 1, 45))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(20, 22)和(5, -37)，然后添加距离约束，设置它们之间的距离为61mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(20, 22, 0), FreeCAD.Vector(21, 23, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(5, -37, 0), FreeCAD.Vector(6, -36, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加距离约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo1, 1, geo2, 1, 61))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-4, 44)和(34, -37)，然后添加距离约束，设置它们之间的距离为89mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-4, 44, 0), FreeCAD.Vector(-3, 45, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(34, -37, 0), FreeCAD.Vector(35, -36, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加距离约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo1, 1, geo2, 1, 89))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(20, -40)和(28, -14)，然后添加水平距离约束，设置它们在X方向的距离为8mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceX\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(20, -40, 0), FreeCAD.Vector(21, -39, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(28, -14, 0), FreeCAD.Vector(29, -13, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加水平距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceX', geo1, 1, geo2, 1, 8))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-10, -4)和(31, -48)，然后添加垂直距离约束，设置它们在Y方向的距离为44mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"DistanceY\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-10, -4, 0), FreeCAD.Vector(-9, -3, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(31, -48, 0), FreeCAD.Vector(32, -47, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加垂直距离约束\nsketch.addConstraint(Sketcher.Constraint('DistanceY', geo1, 1, geo2, 1, 44))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(38, 37)到(19, 3)的线段，然后添加长度约束，设置其长度为39mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(38, 37, 0), FreeCAD.Vector(19, 3, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加长度约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo, 39))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(38, -44)到(-45, 30)的线段，然后添加长度约束，设置其长度为111mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(38, -44, 0), FreeCAD.Vector(-45, 30, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加长度约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo, 111))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-7, -19)的圆，然后添加直径约束，设置其直径为44mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-7, -19, 0), FreeCAD.Vector(0, 0, 1), 22)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 44))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-22, -30)的圆，然后添加直径约束，设置其直径为30mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-22, -30, 0), FreeCAD.Vector(0, 0, 1), 15)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 30))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-27, -22)的圆，然后添加直径约束，设置其直径为24mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-27, -22, 0), FreeCAD.Vector(0, 0, 1), 12)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 24))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(9, -20)的圆，然后添加半径约束，设置其半径为36mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(9, -20, 0), FreeCAD.Vector(0, 0, 1), 36)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 36))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(14, -21)的圆，然后添加半径约束，设置其半径为50mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(14, -21, 0), FreeCAD.Vector(0, 0, 1), 50)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 50))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(4, -4)的圆，然后添加半径约束，设置其半径为49mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(4, -4, 0), FreeCAD.Vector(0, 0, 1), 49)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 49))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-36, -9)的圆，然后添加半径约束，设置其半径为47mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-36, -9, 0), FreeCAD.Vector(0, 0, 1), 47)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 47))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(16, 18)的圆，然后添加直径约束，设置其直径为70mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(16, 18, 0), FreeCAD.Vector(0, 0, 1), 35)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 70))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(26, -32)的圆，然后添加半径约束，设置其半径为27mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(26, -32, 0), FreeCAD.Vector(0, 0, 1), 27)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 27))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-13, 14)的圆，然后添加半径约束，设置其半径为26mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-13, 14, 0), FreeCAD.Vector(0, 0, 1), 26)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 26))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-8, -30)的圆，然后添加半径约束，设置其半径为45mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-8, -30, 0), FreeCAD.Vector(0, 0, 1), 45)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 45))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(26, -1)的圆，然后添加直径约束，设置其直径为62mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(26, -1, 0), FreeCAD.Vector(0, 0, 1), 31)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 62))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(34, 35)的圆，然后添加直径约束，设置其直径为30mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(34, 35, 0), FreeCAD.Vector(0, 0, 1), 15)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 30))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(9, 40)的圆，然后添加直径约束，设置其直径为40mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(9, 40, 0), FreeCAD.Vector(0, 0, 1), 20)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 40))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(25, 21)的圆，然后添加半径约束，设置其半径为24mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(25, 21, 0), FreeCAD.Vector(0, 0, 1), 24)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 24))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-2, 28)的圆，然后添加半径约束，设置其半径为46mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-2, 28, 0), FreeCAD.Vector(0, 0, 1), 46)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 46))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(11, 33)的圆，然后添加半径约束，设置其半径为49mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(11, 33, 0), FreeCAD.Vector(0, 0, 1), 49)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 49))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-30, -35)的圆，然后添加半径约束，设置其半径为48mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-30, -35, 0), FreeCAD.Vector(0, 0, 1), 48)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 48))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(6, 19)的圆，然后添加直径约束，设置其直径为66mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(6, 19, 0), FreeCAD.Vector(0, 0, 1), 33)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 66))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(0, 15)的圆，然后添加直径约束，设置其直径为20mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(0, 15, 0), FreeCAD.Vector(0, 0, 1), 10)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 20))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-32, -13)的圆，然后添加半径约束，设置其半径为14mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-32, -13, 0), FreeCAD.Vector(0, 0, 1), 14)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 14))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(37, 22)的圆，然后添加直径约束，设置其直径为68mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(37, 22, 0), FreeCAD.Vector(0, 0, 1), 34)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 68))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(31, 39)的圆，然后添加半径约束，设置其半径为44mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(31, 39, 0), FreeCAD.Vector(0, 0, 1), 44)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 44))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-23, -1)的圆，然后添加直径约束，设置其直径为38mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-23, -1, 0), FreeCAD.Vector(0, 0, 1), 19)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 38))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(29, 40)的圆，然后添加半径约束，设置其半径为33mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(29, 40, 0), FreeCAD.Vector(0, 0, 1), 33)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 33))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-29, -10)的圆，然后添加直径约束，设置其直径为92mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-29, -10, 0), FreeCAD.Vector(0, 0, 1), 46)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 92))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-14, -17)的圆，然后添加直径约束，设置其直径为38mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-14, -17, 0), FreeCAD.Vector(0, 0, 1), 19)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 38))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-10, -29)的圆，然后添加半径约束，设置其半径为17mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-10, -29, 0), FreeCAD.Vector(0, 0, 1), 17)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 17))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(11, 27)的圆，然后添加半径约束，设置其半径为32mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(11, 27, 0), FreeCAD.Vector(0, 0, 1), 32)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 32))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(1, 0)的圆，然后添加半径约束，设置其半径为27mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(1, 0, 0), FreeCAD.Vector(0, 0, 1), 27)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 27))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-33, 31)的圆，然后添加半径约束，设置其半径为34mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-33, 31, 0), FreeCAD.Vector(0, 0, 1), 34)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 34))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-26, 27)的圆，然后添加半径约束，设置其半径为23mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-26, 27, 0), FreeCAD.Vector(0, 0, 1), 23)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 23))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(6, 40)的圆，然后添加半径约束，设置其半径为50mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(6, 40, 0), FreeCAD.Vector(0, 0, 1), 50)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 50))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(31, 20)的圆，然后添加半径约束，设置其半径为36mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(31, 20, 0), FreeCAD.Vector(0, 0, 1), 36)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 36))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(21, -23)的圆，然后添加半径约束，设置其半径为44mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(21, -23, 0), FreeCAD.Vector(0, 0, 1), 44)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 44))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-14, 3)的圆，然后添加半径约束，设置其半径为34mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-14, 3, 0), FreeCAD.Vector(0, 0, 1), 34)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 34))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-15, -4)的圆，然后添加直径约束，设置其直径为100mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-15, -4, 0), FreeCAD.Vector(0, 0, 1), 50)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 100))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-32, 33)的圆，然后添加半径约束，设置其半径为23mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-32, 33, 0), FreeCAD.Vector(0, 0, 1), 23)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 23))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(22, -32)的圆，然后添加半径约束，设置其半径为50mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(22, -32, 0), FreeCAD.Vector(0, 0, 1), 50)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 50))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(4, -39)的圆，然后添加直径约束，设置其直径为68mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(4, -39, 0), FreeCAD.Vector(0, 0, 1), 34)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 68))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-36, -11)的圆，然后添加半径约束，设置其半径为21mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-36, -11, 0), FreeCAD.Vector(0, 0, 1), 21)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 21))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(8, -37)的圆，然后添加直径约束，设置其直径为52mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(8, -37, 0), FreeCAD.Vector(0, 0, 1), 26)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 52))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(38, 17)的圆，然后添加直径约束，设置其直径为82mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(38, 17, 0), FreeCAD.Vector(0, 0, 1), 41)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 82))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(15, 2)的圆，然后添加半径约束，设置其半径为24mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(15, 2, 0), FreeCAD.Vector(0, 0, 1), 24)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 24))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-11, -5)的圆，然后添加直径约束，设置其直径为40mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-11, -5, 0), FreeCAD.Vector(0, 0, 1), 20)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 40))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(3, -29)的圆，然后添加半径约束，设置其半径为25mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(3, -29, 0), FreeCAD.Vector(0, 0, 1), 25)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 25))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(37, 30)的圆，然后添加直径约束，设置其直径为62mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(37, 30, 0), FreeCAD.Vector(0, 0, 1), 31)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 62))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-20, -20)的圆，然后添加直径约束，设置其直径为64mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-20, -20, 0), FreeCAD.Vector(0, 0, 1), 32)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 64))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-17, 32)的圆，然后添加半径约束，设置其半径为49mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-17, 32, 0), FreeCAD.Vector(0, 0, 1), 49)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 49))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-36, -18)的圆，然后添加半径约束，设置其半径为21mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Radius\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-36, -18, 0), FreeCAD.Vector(0, 0, 1), 21)\ngeo = sketch.addGeometry(circle, False)\n# 添加半径约束\nsketch.addConstraint(Sketcher.Constraint('Radius', geo, 21))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-5, -29)到(48, -49)，另一条从(-29, 39)到(-35, -19)，然后添加角度约束，设置它们之间的角度为38度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-5, -29, 0), FreeCAD.Vector(48, -49, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-29, 39, 0), FreeCAD.Vector(-35, -19, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(38)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-45, -10)到(33, -24)，另一条从(44, 17)到(-49, -49)，然后添加角度约束，设置它们之间的角度为102度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-45, -10, 0), FreeCAD.Vector(33, -24, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(44, 17, 0), FreeCAD.Vector(-49, -49, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(102)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(2, 36)到(30, -44)，另一条从(-25, -17)到(33, 29)，然后添加角度约束，设置它们之间的角度为62度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(2, 36, 0), FreeCAD.Vector(30, -44, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-25, -17, 0), FreeCAD.Vector(33, 29, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(62)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(30, 13)到(-16, 6)，另一条从(-39, 39)到(21, 36)，然后添加角度约束，设置它们之间的角度为107度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(30, 13, 0), FreeCAD.Vector(-16, 6, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-39, 39, 0), FreeCAD.Vector(21, 36, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(107)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-11, -2)到(33, 19)，另一条从(26, 2)到(-13, -9)，然后添加角度约束，设置它们之间的角度为32度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-11, -2, 0), FreeCAD.Vector(33, 19, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(26, 2, 0), FreeCAD.Vector(-13, -9, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(32)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(35, -40)到(-10, -5)，另一条从(13, 32)到(9, -14)，然后添加角度约束，设置它们之间的角度为142度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(35, -40, 0), FreeCAD.Vector(-10, -5, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(13, 32, 0), FreeCAD.Vector(9, -14, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(142)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(41, -16)到(21, -4)，另一条从(-47, -16)到(-17, 25)，然后添加角度约束，设置它们之间的角度为14度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(41, -16, 0), FreeCAD.Vector(21, -4, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-47, -16, 0), FreeCAD.Vector(-17, 25, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(14)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(12, 36)到(-32, -13)，另一条从(-36, -10)到(26, -14)，然后添加角度约束，设置它们之间的角度为24度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(12, 36, 0), FreeCAD.Vector(-32, -13, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-36, -10, 0), FreeCAD.Vector(26, -14, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(24)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-6, -9)到(-22, -50)，另一条从(-37, -13)到(-11, -20)，然后添加角度约束，设置它们之间的角度为140度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-6, -9, 0), FreeCAD.Vector(-22, -50, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-37, -13, 0), FreeCAD.Vector(-11, -20, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(140)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-24, -34)到(-26, -34)，另一条从(6, -42)到(35, 50)，然后添加角度约束，设置它们之间的角度为98度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-24, -34, 0), FreeCAD.Vector(-26, -34, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(6, -42, 0), FreeCAD.Vector(35, 50, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(98)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(1, 21)到(-42, 16)，另一条从(45, 23)到(-47, -35)，然后添加角度约束，设置它们之间的角度为158度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(1, 21, 0), FreeCAD.Vector(-42, 16, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(45, 23, 0), FreeCAD.Vector(-47, -35, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(158)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(43, -25)到(24, 49)，另一条从(43, 19)到(4, 33)，然后添加角度约束，设置它们之间的角度为94度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(43, -25, 0), FreeCAD.Vector(24, 49, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(43, 19, 0), FreeCAD.Vector(4, 33, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(94)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(28, -33)到(28, 49)，另一条从(-18, 29)到(47, 29)，然后添加角度约束，设置它们之间的角度为42度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(28, -33, 0), FreeCAD.Vector(28, 49, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-18, 29, 0), FreeCAD.Vector(47, 29, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(42)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-38, 28)到(44, 26)，另一条从(-4, -36)到(-23, 43)，然后添加角度约束，设置它们之间的角度为133度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-38, 28, 0), FreeCAD.Vector(44, 26, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-4, -36, 0), FreeCAD.Vector(-23, 43, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(133)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(43, -9)到(6, -32)，另一条从(-4, -35)到(15, 8)，然后添加角度约束，设置它们之间的角度为132度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(43, -9, 0), FreeCAD.Vector(6, -32, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-4, -35, 0), FreeCAD.Vector(15, 8, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(132)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-43, -17)到(-28, -19)，另一条从(1, -24)到(3, 43)，然后添加角度约束，设置它们之间的角度为17度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-43, -17, 0), FreeCAD.Vector(-28, -19, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(1, -24, 0), FreeCAD.Vector(3, 43, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(17)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-5, -15)到(-33, -7)，另一条从(37, -22)到(-3, -8)，然后添加角度约束，设置它们之间的角度为96度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-5, -15, 0), FreeCAD.Vector(-33, -7, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(37, -22, 0), FreeCAD.Vector(-3, -8, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(96)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(32, 35)到(-6, 30)，另一条从(25, 12)到(-14, -6)，然后添加角度约束，设置它们之间的角度为57度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(32, 35, 0), FreeCAD.Vector(-6, 30, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(25, 12, 0), FreeCAD.Vector(-14, -6, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(57)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-44, 11)到(5, 32)，另一条从(-25, 17)到(-18, 18)，然后添加角度约束，设置它们之间的角度为165度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-44, 11, 0), FreeCAD.Vector(5, 32, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-25, 17, 0), FreeCAD.Vector(-18, 18, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(165)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-37, -1)到(-13, -49)，另一条从(-19, -34)到(-7, -44)，然后添加角度约束，设置它们之间的角度为153度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-37, -1, 0), FreeCAD.Vector(-13, -49, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-19, -34, 0), FreeCAD.Vector(-7, -44, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(153)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(8, -13)到(-49, 36)，另一条从(24, -42)到(17, 43)，然后添加角度约束，设置它们之间的角度为148度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(8, -13, 0), FreeCAD.Vector(-49, 36, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(24, -42, 0), FreeCAD.Vector(17, 43, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(148)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-19, -49)到(-14, 30)，另一条从(-5, -9)到(35, -28)，然后添加角度约束，设置它们之间的角度为111度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-19, -49, 0), FreeCAD.Vector(-14, 30, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-5, -9, 0), FreeCAD.Vector(35, -28, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(111)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(28, 6)到(17, -23)，另一条从(-9, 18)到(-44, -39)，然后添加角度约束，设置它们之间的角度为19度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(28, 6, 0), FreeCAD.Vector(17, -23, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-9, 18, 0), FreeCAD.Vector(-44, -39, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(19)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(11, 19)到(-36, 2)，另一条从(-44, -10)到(-18, 21)，然后添加角度约束，设置它们之间的角度为52度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(11, 19, 0), FreeCAD.Vector(-36, 2, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-44, -10, 0), FreeCAD.Vector(-18, 21, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(52)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-30, -10)到(43, -46)，另一条从(5, 28)到(38, -25)，然后添加角度约束，设置它们之间的角度为149度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-30, -10, 0), FreeCAD.Vector(43, -46, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(5, 28, 0), FreeCAD.Vector(38, -25, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(149)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-40, -5)到(-5, -22)，另一条从(7, -13)到(11, 23)，然后添加角度约束，设置它们之间的角度为163度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-40, -5, 0), FreeCAD.Vector(-5, -22, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(7, -13, 0), FreeCAD.Vector(11, 23, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(163)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(0, -8)到(-11, 29)，另一条从(-43, 12)到(40, 25)，然后添加角度约束，设置它们之间的角度为141度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(0, -8, 0), FreeCAD.Vector(-11, 29, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-43, 12, 0), FreeCAD.Vector(40, 25, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(141)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-50, 20)到(3, 50)，另一条从(-15, -45)到(49, 34)，然后添加角度约束，设置它们之间的角度为163度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-50, 20, 0), FreeCAD.Vector(3, 50, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-15, -45, 0), FreeCAD.Vector(49, 34, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(163)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-19, 47)到(36, 22)，另一条从(6, -41)到(26, -10)，然后添加角度约束，设置它们之间的角度为108度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-19, 47, 0), FreeCAD.Vector(36, 22, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(6, -41, 0), FreeCAD.Vector(26, -10, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(108)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(48, 29)到(40, -20)，另一条从(23, -15)到(-32, -8)，然后添加角度约束，设置它们之间的角度为30度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(48, 29, 0), FreeCAD.Vector(40, -20, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(23, -15, 0), FreeCAD.Vector(-32, -8, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(30)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(48, 39)到(31, -24)，另一条从(-38, 40)到(19, -27)，然后添加角度约束，设置它们之间的角度为75度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(48, 39, 0), FreeCAD.Vector(31, -24, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-38, 40, 0), FreeCAD.Vector(19, -27, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(75)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(22, 31)到(30, -38)，另一条从(-50, -33)到(-10, 39)，然后添加角度约束，设置它们之间的角度为11度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(22, 31, 0), FreeCAD.Vector(30, -38, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-50, -33, 0), FreeCAD.Vector(-10, 39, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(11)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-14, 8)到(28, -3)，另一条从(0, -27)到(39, 47)，然后添加角度约束，设置它们之间的角度为28度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-14, 8, 0), FreeCAD.Vector(28, -3, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(0, -27, 0), FreeCAD.Vector(39, 47, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(28)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-4, -47)到(-16, -2)，另一条从(-18, 29)到(7, -25)，然后添加角度约束，设置它们之间的角度为76度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-4, -47, 0), FreeCAD.Vector(-16, -2, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-18, 29, 0), FreeCAD.Vector(7, -25, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(76)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(23, 8)到(0, -33)，另一条从(5, -9)到(-16, -33)，然后添加角度约束，设置它们之间的角度为164度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(23, 8, 0), FreeCAD.Vector(0, -33, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(5, -9, 0), FreeCAD.Vector(-16, -33, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(164)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-45, 7)到(38, -40)，另一条从(-40, 25)到(49, -27)，然后添加角度约束，设置它们之间的角度为169度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-45, 7, 0), FreeCAD.Vector(38, -40, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-40, 25, 0), FreeCAD.Vector(49, -27, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(169)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(6, 18)到(33, -34)，另一条从(-30, -36)到(-29, -20)，然后添加角度约束，设置它们之间的角度为116度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(6, 18, 0), FreeCAD.Vector(33, -34, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-30, -36, 0), FreeCAD.Vector(-29, -20, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(116)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(41, 30)到(20, 28)，另一条从(7, -36)到(-29, 32)，然后添加角度约束，设置它们之间的角度为14度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(41, 30, 0), FreeCAD.Vector(20, 28, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(7, -36, 0), FreeCAD.Vector(-29, 32, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(14)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(24, 7)到(27, -39)，另一条从(-47, 32)到(-20, -33)，然后添加角度约束，设置它们之间的角度为56度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(24, 7, 0), FreeCAD.Vector(27, -39, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-47, 32, 0), FreeCAD.Vector(-20, -33, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(56)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(30, -25)到(-43, 5)，另一条从(-49, -44)到(-14, -40)，然后添加角度约束，设置它们之间的角度为19度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(30, -25, 0), FreeCAD.Vector(-43, 5, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-49, -44, 0), FreeCAD.Vector(-14, -40, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(19)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(46, 8)到(45, 20)，另一条从(17, 37)到(-24, 2)，然后添加角度约束，设置它们之间的角度为21度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(46, 8, 0), FreeCAD.Vector(45, 20, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(17, 37, 0), FreeCAD.Vector(-24, 2, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(21)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-3, 10)到(46, -23)，另一条从(-19, -5)到(-35, 8)，然后添加角度约束，设置它们之间的角度为60度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-3, 10, 0), FreeCAD.Vector(46, -23, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-19, -5, 0), FreeCAD.Vector(-35, 8, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(60)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-24, 41)到(31, 11)，另一条从(21, -27)到(-31, -32)，然后添加角度约束，设置它们之间的角度为113度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-24, 41, 0), FreeCAD.Vector(31, 11, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(21, -27, 0), FreeCAD.Vector(-31, -32, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(113)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(47, -25)到(-5, 7)，另一条从(-23, 48)到(-21, 50)，然后添加角度约束，设置它们之间的角度为129度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(47, -25, 0), FreeCAD.Vector(-5, 7, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-23, 48, 0), FreeCAD.Vector(-21, 50, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(129)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-50, 6)到(32, 15)，另一条从(-21, -25)到(-31, 46)，然后添加角度约束，设置它们之间的角度为138度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-50, 6, 0), FreeCAD.Vector(32, 15, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-21, -25, 0), FreeCAD.Vector(-31, 46, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(138)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-2, 23)到(9, -16)，另一条从(-28, 38)到(10, 3)，然后添加角度约束，设置它们之间的角度为116度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-2, 23, 0), FreeCAD.Vector(9, -16, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-28, 38, 0), FreeCAD.Vector(10, 3, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(116)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(19, -11)到(-44, -42)，另一条从(7, -26)到(-19, 33)，然后添加角度约束，设置它们之间的角度为169度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(19, -11, 0), FreeCAD.Vector(-44, -42, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(7, -26, 0), FreeCAD.Vector(-19, 33, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(169)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-43, 38)到(-9, 10)，另一条从(13, -20)到(-20, 42)，然后添加角度约束，设置它们之间的角度为10度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-43, 38, 0), FreeCAD.Vector(-9, 10, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(13, -20, 0), FreeCAD.Vector(-20, 42, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(10)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-43, 46)到(-15, -9)，另一条从(7, 20)到(-31, -13)，然后添加角度约束，设置它们之间的角度为158度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-43, 46, 0), FreeCAD.Vector(-15, -9, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(7, 20, 0), FreeCAD.Vector(-31, -13, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(158)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(1, 25)到(20, 23)，另一条从(-35, 8)到(-14, 40)，然后添加角度约束，设置它们之间的角度为168度。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Angle\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(1, 25, 0), FreeCAD.Vector(20, 23, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-35, 8, 0), FreeCAD.Vector(-14, 40, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加角度约束\nsketch.addConstraint(Sketcher.Constraint('Angle', geo1, geo2, math.radians(168)))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于矩形（宽113mm、高98mm）草图的拉伸特征，拉伸长度为正向40mm、反向43mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(113, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(113, 0, 0), FreeCAD.Vector(113, 98, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(113, 98, 0), FreeCAD.Vector(0, 98, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 98, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 40\npad.Length2 = 43\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的拉伸特征，拉伸长度为正向42mm、反向19mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 外轮廓\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(60, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 0, 0), FreeCAD.Vector(60, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 40, 0), FreeCAD.Vector(0, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 40, 0), FreeCAD.Vector(0, 0, 0)), False)\n# 内部特征\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(20, 20, 0), FreeCAD.Vector(0, 0, 1), 10), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 42\npad.Length2 = 19\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于7边形（外接圆半径27mm）草图的拉伸特征，拉伸长度为35mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建7边形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 计算顶点\nvertices = []\nfor i in range(7):\n    angle = 2 * math.pi * i / 7\n    x = 27 * math.cos(angle)\n    y = 27 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(7):\n    sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 7]), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 35\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于4边形（外接圆半径39mm）草图的拉伸特征，拉伸长度为正向46mm、反向54mm，斜度角度为4度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建4边形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 计算顶点\nvertices = []\nfor i in range(4):\n    angle = 2 * math.pi * i / 4\n    x = 39 * math.cos(angle)\n    y = 39 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(4):\n    sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 4]), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 46\npad.Length2 = 54\npad.TaperAngle = 4\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于圆形（半径41mm）草图的拉伸特征，拉伸长度为86mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 41), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 86\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于6边形（外接圆半径47mm）草图的拉伸特征，拉伸长度为81mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建6边形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 计算顶点\nvertices = []\nfor i in range(6):\n    angle = 2 * math.pi * i / 6\n    x = 47 * math.cos(angle)\n    y = 47 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(6):\n    sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 6]), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 81\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于圆形（半径47mm）草图的拉伸特征，拉伸长度为正向48mm、反向62mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 47), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 48\npad.Length2 = 62\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于圆形（半径39mm）草图的拉伸特征，拉伸长度为正向38mm、反向93mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 39), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 38\npad.Length2 = 93\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于圆形（半径22mm）草图的拉伸特征，拉伸长度为正向45mm、反向26mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 22), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 45\npad.Length2 = 26\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于6边形（外接圆半径26mm）草图的拉伸特征，拉伸长度为正向47mm、反向25mm，斜度角度为1度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建6边形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 计算顶点\nvertices = []\nfor i in range(6):\n    angle = 2 * math.pi * i / 6\n    x = 26 * math.cos(angle)\n    y = 26 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(6):\n    sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 6]), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 47\npad.Length2 = 25\npad.TaperAngle = 1\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的拉伸特征，拉伸长度为正向27mm、反向68mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 外轮廓\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(60, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 0, 0), FreeCAD.Vector(60, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 40, 0), FreeCAD.Vector(0, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 40, 0), FreeCAD.Vector(0, 0, 0)), False)\n# 内部特征\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(20, 20, 0), FreeCAD.Vector(0, 0, 1), 10), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 27\npad.Length2 = 68\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于3边形（外接圆半径26mm）草图的拉伸特征，拉伸长度为正向84mm、反向43mm，斜度角度为8度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建3边形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 计算顶点\nvertices = []\nfor i in range(3):\n    angle = 2 * math.pi * i / 3\n    x = 26 * math.cos(angle)\n    y = 26 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(3):\n    sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 3]), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 84\npad.Length2 = 43\npad.TaperAngle = 8\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于圆形（半径39mm）草图的拉伸特征，拉伸长度为正向53mm、反向57mm，斜度角度为8度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 39), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 53\npad.Length2 = 57\npad.TaperAngle = 8\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于圆形（半径40mm）草图的拉伸特征，拉伸长度为27mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 40), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 27\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于5边形（外接圆半径30mm）草图的拉伸特征，拉伸长度为29mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建5边形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 计算顶点\nvertices = []\nfor i in range(5):\n    angle = 2 * math.pi * i / 5\n    x = 30 * math.cos(angle)\n    y = 30 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(5):\n    sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 5]), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 29\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于6边形（外接圆半径56mm）草图的拉伸特征，拉伸长度为61mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建6边形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 计算顶点\nvertices = []\nfor i in range(6):\n    angle = 2 * math.pi * i / 6\n    x = 56 * math.cos(angle)\n    y = 56 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(6):\n    sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 6]), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 61\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于圆形（半径33mm）草图的拉伸特征，拉伸长度为正向57mm、反向18mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 33), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 57\npad.Length2 = 18\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的拉伸特征，拉伸长度为22mm，斜度角度为2度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 外轮廓\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(60, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 0, 0), FreeCAD.Vector(60, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 40, 0), FreeCAD.Vector(0, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 40, 0), FreeCAD.Vector(0, 0, 0)), False)\n# 内部特征\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(20, 20, 0), FreeCAD.Vector(0, 0, 1), 10), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 22\npad.TaperAngle = 2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的拉伸特征，拉伸长度为正向40mm、反向21mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 外轮廓\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(60, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 0, 0), FreeCAD.Vector(60, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 40, 0), FreeCAD.Vector(0, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 40, 0), FreeCAD.Vector(0, 0, 0)), False)\n# 内部特征\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(20, 20, 0), FreeCAD.Vector(0, 0, 1), 10), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 40\npad.Length2 = 21\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于矩形（宽148mm、高20mm）草图的拉伸特征，拉伸长度为52mm，斜度角度为1度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(148, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(148, 0, 0), FreeCAD.Vector(148, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(148, 20, 0), FreeCAD.Vector(0, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 20, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 52\npad.TaperAngle = 1\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于圆形（半径22mm）草图的拉伸特征，拉伸长度为正向34mm、反向34mm，斜度角度为7度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 22), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 34\npad.Length2 = 34\npad.TaperAngle = 7\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的拉伸特征，拉伸长度为正向55mm、反向19mm，斜度角度为14度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 外轮廓\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(60, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 0, 0), FreeCAD.Vector(60, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 40, 0), FreeCAD.Vector(0, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 40, 0), FreeCAD.Vector(0, 0, 0)), False)\n# 内部特征\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(20, 20, 0), FreeCAD.Vector(0, 0, 1), 10), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 55\npad.Length2 = 19\npad.TaperAngle = 14\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于4边形（外接圆半径22mm）草图的拉伸特征，拉伸长度为正向80mm、反向92mm，斜度角度为5度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建4边形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 计算顶点\nvertices = []\nfor i in range(4):\n    angle = 2 * math.pi * i / 4\n    x = 22 * math.cos(angle)\n    y = 22 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(4):\n    sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 4]), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 80\npad.Length2 = 92\npad.TaperAngle = 5\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于矩形（宽64mm、高66mm）草图的拉伸特征，拉伸长度为正向68mm、反向91mm，斜度角度为15度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(64, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(64, 0, 0), FreeCAD.Vector(64, 66, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(64, 66, 0), FreeCAD.Vector(0, 66, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 66, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 68\npad.Length2 = 91\npad.TaperAngle = 15\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于圆形（半径25mm）草图的拉伸特征，拉伸长度为31mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 25), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 31\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于矩形（宽121mm、高65mm）草图的拉伸特征，拉伸长度为95mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(121, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(121, 0, 0), FreeCAD.Vector(121, 65, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(121, 65, 0), FreeCAD.Vector(0, 65, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 65, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 95\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的拉伸特征，拉伸长度为51mm，斜度角度为5度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 外轮廓\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(60, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 0, 0), FreeCAD.Vector(60, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 40, 0), FreeCAD.Vector(0, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 40, 0), FreeCAD.Vector(0, 0, 0)), False)\n# 内部特征\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(20, 20, 0), FreeCAD.Vector(0, 0, 1), 10), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 51\npad.TaperAngle = 5\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的拉伸特征，拉伸长度为正向24mm、反向84mm，斜度角度为2度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 外轮廓\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(60, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 0, 0), FreeCAD.Vector(60, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 40, 0), FreeCAD.Vector(0, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 40, 0), FreeCAD.Vector(0, 0, 0)), False)\n# 内部特征\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(20, 20, 0), FreeCAD.Vector(0, 0, 1), 10), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 24\npad.Length2 = 84\npad.TaperAngle = 2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于矩形（宽146mm、高131mm）草图的拉伸特征，拉伸长度为正向67mm、反向48mm，斜度角度为7度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(146, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(146, 0, 0), FreeCAD.Vector(146, 131, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(146, 131, 0), FreeCAD.Vector(0, 131, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 131, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 67\npad.Length2 = 48\npad.TaperAngle = 7\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于矩形（宽61mm、高43mm）草图的拉伸特征，拉伸长度为正向100mm、反向27mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(61, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(61, 0, 0), FreeCAD.Vector(61, 43, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(61, 43, 0), FreeCAD.Vector(0, 43, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 43, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 100\npad.Length2 = 27\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于圆形（半径23mm）草图的拉伸特征，拉伸长度为54mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 23), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 54\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于矩形（宽82mm、高51mm）草图的拉伸特征，拉伸长度为正向59mm、反向74mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(82, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(82, 0, 0), FreeCAD.Vector(82, 51, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(82, 51, 0), FreeCAD.Vector(0, 51, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 51, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 59\npad.Length2 = 74\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于圆形（半径30mm）草图的拉伸特征，拉伸长度为30mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 30), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 30\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于4边形（外接圆半径20mm）草图的拉伸特征，拉伸长度为正向95mm、反向33mm，斜度角度为11度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建4边形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 计算顶点\nvertices = []\nfor i in range(4):\n    angle = 2 * math.pi * i / 4\n    x = 20 * math.cos(angle)\n    y = 20 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(4):\n    sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 4]), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 95\npad.Length2 = 33\npad.TaperAngle = 11\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于7边形（外接圆半径28mm）草图的拉伸特征，拉伸长度为80mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建7边形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 计算顶点\nvertices = []\nfor i in range(7):\n    angle = 2 * math.pi * i / 7\n    x = 28 * math.cos(angle)\n    y = 28 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(7):\n    sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 7]), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 80\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的拉伸特征，拉伸长度为48mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 外轮廓\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(60, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 0, 0), FreeCAD.Vector(60, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 40, 0), FreeCAD.Vector(0, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 40, 0), FreeCAD.Vector(0, 0, 0)), False)\n# 内部特征\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(20, 20, 0), FreeCAD.Vector(0, 0, 1), 10), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 48\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于圆形（半径15mm）草图的拉伸特征，拉伸长度为29mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 15), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 29\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的拉伸特征，拉伸长度为正向24mm、反向13mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 外轮廓\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(60, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 0, 0), FreeCAD.Vector(60, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 40, 0), FreeCAD.Vector(0, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 40, 0), FreeCAD.Vector(0, 0, 0)), False)\n# 内部特征\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(20, 20, 0), FreeCAD.Vector(0, 0, 1), 10), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 24\npad.Length2 = 13\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于3边形（外接圆半径60mm）草图的拉伸特征，拉伸长度为80mm，斜度角度为13度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建3边形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 计算顶点\nvertices = []\nfor i in range(3):\n    angle = 2 * math.pi * i / 3\n    x = 60 * math.cos(angle)\n    y = 60 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(3):\n    sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 3]), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 80\npad.TaperAngle = 13\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的拉伸特征，拉伸长度为正向46mm、反向99mm，斜度角度为9度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 外轮廓\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(60, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 0, 0), FreeCAD.Vector(60, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 40, 0), FreeCAD.Vector(0, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 40, 0), FreeCAD.Vector(0, 0, 0)), False)\n# 内部特征\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(20, 20, 0), FreeCAD.Vector(0, 0, 1), 10), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 46\npad.Length2 = 99\npad.TaperAngle = 9\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的拉伸特征，拉伸长度为正向42mm、反向56mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 外轮廓\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(60, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 0, 0), FreeCAD.Vector(60, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 40, 0), FreeCAD.Vector(0, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 40, 0), FreeCAD.Vector(0, 0, 0)), False)\n# 内部特征\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(20, 20, 0), FreeCAD.Vector(0, 0, 1), 10), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 42\npad.Length2 = 56\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于4边形（外接圆半径41mm）草图的拉伸特征，拉伸长度为87mm，斜度角度为6度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建4边形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 计算顶点\nvertices = []\nfor i in range(4):\n    angle = 2 * math.pi * i / 4\n    x = 41 * math.cos(angle)\n    y = 41 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(4):\n    sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 4]), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 87\npad.TaperAngle = 6\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于圆形（半径48mm）草图的拉伸特征，拉伸长度为正向91mm、反向43mm，斜度角度为4度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 48), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 91\npad.Length2 = 43\npad.TaperAngle = 4\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于圆形（半径13mm）草图的拉伸特征，拉伸长度为29mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 13), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 29\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的拉伸特征，拉伸长度为38mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 外轮廓\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(60, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 0, 0), FreeCAD.Vector(60, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 40, 0), FreeCAD.Vector(0, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 40, 0), FreeCAD.Vector(0, 0, 0)), False)\n# 内部特征\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(20, 20, 0), FreeCAD.Vector(0, 0, 1), 10), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 38\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的拉伸特征，拉伸长度为54mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 外轮廓\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(60, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 0, 0), FreeCAD.Vector(60, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 40, 0), FreeCAD.Vector(0, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 40, 0), FreeCAD.Vector(0, 0, 0)), False)\n# 内部特征\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(20, 20, 0), FreeCAD.Vector(0, 0, 1), 10), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 54\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的拉伸特征，拉伸长度为15mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 外轮廓\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(60, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 0, 0), FreeCAD.Vector(60, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 40, 0), FreeCAD.Vector(0, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 40, 0), FreeCAD.Vector(0, 0, 0)), False)\n# 内部特征\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(20, 20, 0), FreeCAD.Vector(0, 0, 1), 10), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 15\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于圆形（半径48mm）草图的拉伸特征，拉伸长度为33mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 48), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 33\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于7边形（外接圆半径23mm）草图的拉伸特征，拉伸长度为正向76mm、反向19mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建7边形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 计算顶点\nvertices = []\nfor i in range(7):\n    angle = 2 * math.pi * i / 7\n    x = 23 * math.cos(angle)\n    y = 23 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(7):\n    sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 7]), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 76\npad.Length2 = 19\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于圆形（半径27mm）草图的拉伸特征，拉伸长度为正向14mm、反向100mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 27), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 14\npad.Length2 = 100\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于圆形（半径28mm）草图的拉伸特征，拉伸长度为正向42mm、反向37mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 28), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 42\npad.Length2 = 37\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于7边形（外接圆半径21mm）草图的拉伸特征，拉伸长度为54mm，斜度角度为11度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建7边形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 计算顶点\nvertices = []\nfor i in range(7):\n    angle = 2 * math.pi * i / 7\n    x = 21 * math.cos(angle)\n    y = 21 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(7):\n    sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 7]), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 54\npad.TaperAngle = 11\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于6边形（外接圆半径56mm）草图的拉伸特征，拉伸长度为正向29mm、反向96mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建6边形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 计算顶点\nvertices = []\nfor i in range(6):\n    angle = 2 * math.pi * i / 6\n    x = 56 * math.cos(angle)\n    y = 56 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(6):\n    sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 6]), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 29\npad.Length2 = 96\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于矩形（宽24mm、高102mm）草图的拉伸特征，拉伸长度为正向83mm、反向85mm，斜度角度为11度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(24, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(24, 0, 0), FreeCAD.Vector(24, 102, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(24, 102, 0), FreeCAD.Vector(0, 102, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 102, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 83\npad.Length2 = 85\npad.TaperAngle = 11\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于圆形（半径43mm）草图的拉伸特征，拉伸长度为正向71mm、反向26mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 43), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 71\npad.Length2 = 26\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于圆形（半径14mm）草图的拉伸特征，拉伸长度为正向80mm、反向53mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 14), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 80\npad.Length2 = 53\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的拉伸特征，拉伸长度为正向51mm、反向21mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 外轮廓\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(60, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 0, 0), FreeCAD.Vector(60, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60, 40, 0), FreeCAD.Vector(0, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 40, 0), FreeCAD.Vector(0, 0, 0)), False)\n# 内部特征\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(20, 20, 0), FreeCAD.Vector(0, 0, 1), 10), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 51\npad.Length2 = 21\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于矩形（宽105mm、高69mm）草图的拉伸特征，拉伸长度为65mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(105, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(105, 0, 0), FreeCAD.Vector(105, 69, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(105, 69, 0), FreeCAD.Vector(0, 69, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 69, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 65\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于圆形（半径23mm）草图的拉伸特征，拉伸长度为98mm。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 23), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 98\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于6边形（外接圆半径59mm）草图的拉伸特征，拉伸长度为正向66mm、反向76mm，斜度角度为11度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pad\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建6边形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 计算顶点\nvertices = []\nfor i in range(6):\n    angle = 2 * math.pi * i / 6\n    x = 59 * math.cos(angle)\n    y = 59 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(6):\n    sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 6]), False)\nbody.addObject(sketch)\n# 创建拉伸特征\npad = doc.addObject(\"PartDesign::Pad\", \"Pad\")\npad.Profile = sketch\npad.Length = 66\npad.Length2 = 76\npad.TaperAngle = 11\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于矩形（宽23mm、高30mm）草图的旋转特征，绕X轴旋转297度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(29, 0, 0), FreeCAD.Vector(52, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(52, 0, 0), FreeCAD.Vector(52, 30, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(52, 30, 0), FreeCAD.Vector(29, 30, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(29, 30, 0), FreeCAD.Vector(29, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 297\nrevolve.ReferenceAxis = (sketch, ['V_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于半圆（半径35mm）草图的旋转特征，绕Y轴旋转300度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建半圆草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.ArcOfCircle(Part.Circle(FreeCAD.Vector(30, 0, 0), FreeCAD.Vector(0, 0, 1), 35), 0, math.pi), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 35, 0), FreeCAD.Vector(30, -35, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 300\nrevolve.ReferenceAxis = (sketch, ['H_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的旋转特征，绕X轴旋转174度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 0, 0), FreeCAD.Vector(40, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 0, 0), FreeCAD.Vector(40, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 20, 0), FreeCAD.Vector(30, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 20, 0), FreeCAD.Vector(30, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 40, 0), FreeCAD.Vector(10, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 40, 0), FreeCAD.Vector(10, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 174\nrevolve.ReferenceAxis = (sketch, ['V_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于梯形（底边49mm、顶边17mm、高40mm）草图的旋转特征，绕Y轴旋转298度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建梯形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(23, 0, 0), FreeCAD.Vector(72, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(72, 0, 0), FreeCAD.Vector(56.0, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(56.0, 40, 0), FreeCAD.Vector(39.0, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(39.0, 40, 0), FreeCAD.Vector(23, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 298\nrevolve.ReferenceAxis = (sketch, ['H_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于半圆（半径20mm）草图的旋转特征，绕Y轴旋转324度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建半圆草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.ArcOfCircle(Part.Circle(FreeCAD.Vector(19, 0, 0), FreeCAD.Vector(0, 0, 1), 20), 0, math.pi), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(19, 20, 0), FreeCAD.Vector(19, -20, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 324\nrevolve.ReferenceAxis = (sketch, ['H_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于矩形（宽15mm、高33mm）草图的旋转特征，绕从点(33, -30)到点(-42, 13)的自定义轴旋转175度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(26, 0, 0), FreeCAD.Vector(41, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(41, 0, 0), FreeCAD.Vector(41, 33, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(41, 33, 0), FreeCAD.Vector(26, 33, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(26, 33, 0), FreeCAD.Vector(26, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 175\n# 创建自定义轴\naxis = sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(33, -30, 0), FreeCAD.Vector(-42, 13, 0)), True)\nrevolve.ReferenceAxis = (sketch, ['Edge' + str(axis+1)])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的旋转特征，绕从点(-36, -29)到点(-20, -39)的自定义轴旋转304度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 0, 0), FreeCAD.Vector(40, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 0, 0), FreeCAD.Vector(40, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 20, 0), FreeCAD.Vector(30, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 20, 0), FreeCAD.Vector(30, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 40, 0), FreeCAD.Vector(10, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 40, 0), FreeCAD.Vector(10, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 304\n# 创建自定义轴\naxis = sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-36, -29, 0), FreeCAD.Vector(-20, -39, 0)), True)\nrevolve.ReferenceAxis = (sketch, ['Edge' + str(axis+1)])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于半圆（半径44mm）草图的旋转特征，绕Y轴旋转287度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建半圆草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.ArcOfCircle(Part.Circle(FreeCAD.Vector(11, 0, 0), FreeCAD.Vector(0, 0, 1), 44), 0, math.pi), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(11, 44, 0), FreeCAD.Vector(11, -44, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 287\nrevolve.ReferenceAxis = (sketch, ['H_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于半圆（半径28mm）草图的旋转特征，绕从点(9, 46)到点(10, -31)的自定义轴旋转277度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建半圆草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.ArcOfCircle(Part.Circle(FreeCAD.Vector(28, 0, 0), FreeCAD.Vector(0, 0, 1), 28), 0, math.pi), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(28, 28, 0), FreeCAD.Vector(28, -28, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 277\n# 创建自定义轴\naxis = sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(9, 46, 0), FreeCAD.Vector(10, -31, 0)), True)\nrevolve.ReferenceAxis = (sketch, ['Edge' + str(axis+1)])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于梯形（底边56mm、顶边27mm、高45mm）草图的旋转特征，绕X轴旋转274度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建梯形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(18, 0, 0), FreeCAD.Vector(74, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(74, 0, 0), FreeCAD.Vector(59.5, 45, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(59.5, 45, 0), FreeCAD.Vector(32.5, 45, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(32.5, 45, 0), FreeCAD.Vector(18, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 274\nrevolve.ReferenceAxis = (sketch, ['V_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的旋转特征，绕X轴旋转326度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 0, 0), FreeCAD.Vector(40, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 0, 0), FreeCAD.Vector(40, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 20, 0), FreeCAD.Vector(30, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 20, 0), FreeCAD.Vector(30, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 40, 0), FreeCAD.Vector(10, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 40, 0), FreeCAD.Vector(10, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 326\nrevolve.ReferenceAxis = (sketch, ['V_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的旋转特征，绕从点(50, 7)到点(-17, -3)的自定义轴旋转216度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 0, 0), FreeCAD.Vector(40, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 0, 0), FreeCAD.Vector(40, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 20, 0), FreeCAD.Vector(30, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 20, 0), FreeCAD.Vector(30, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 40, 0), FreeCAD.Vector(10, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 40, 0), FreeCAD.Vector(10, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 216\n# 创建自定义轴\naxis = sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(50, 7, 0), FreeCAD.Vector(-17, -3, 0)), True)\nrevolve.ReferenceAxis = (sketch, ['Edge' + str(axis+1)])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于梯形（底边48mm、顶边14mm、高56mm）草图的旋转特征，绕Y轴旋转151度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建梯形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(17, 0, 0), FreeCAD.Vector(65, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(65, 0, 0), FreeCAD.Vector(48.0, 56, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(48.0, 56, 0), FreeCAD.Vector(34.0, 56, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(34.0, 56, 0), FreeCAD.Vector(17, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 151\nrevolve.ReferenceAxis = (sketch, ['H_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于梯形（底边26mm、顶边13mm、高41mm）草图的旋转特征，绕从点(29, 30)到点(21, -31)的自定义轴旋转335度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建梯形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(14, 0, 0), FreeCAD.Vector(40, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 0, 0), FreeCAD.Vector(33.5, 41, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(33.5, 41, 0), FreeCAD.Vector(20.5, 41, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(20.5, 41, 0), FreeCAD.Vector(14, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 335\n# 创建自定义轴\naxis = sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(29, 30, 0), FreeCAD.Vector(21, -31, 0)), True)\nrevolve.ReferenceAxis = (sketch, ['Edge' + str(axis+1)])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于矩形（宽40mm、高29mm）草图的旋转特征，绕X轴旋转265度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 0, 0), FreeCAD.Vector(70, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(70, 0, 0), FreeCAD.Vector(70, 29, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(70, 29, 0), FreeCAD.Vector(30, 29, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 29, 0), FreeCAD.Vector(30, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 265\nrevolve.ReferenceAxis = (sketch, ['V_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于矩形（宽22mm、高64mm）草图的旋转特征，绕X轴旋转182度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(13, 0, 0), FreeCAD.Vector(35, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(35, 0, 0), FreeCAD.Vector(35, 64, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(35, 64, 0), FreeCAD.Vector(13, 64, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(13, 64, 0), FreeCAD.Vector(13, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 182\nrevolve.ReferenceAxis = (sketch, ['V_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于梯形（底边22mm、顶边21mm、高77mm）草图的旋转特征，绕Y轴旋转343度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建梯形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(13, 0, 0), FreeCAD.Vector(35, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(35, 0, 0), FreeCAD.Vector(34.5, 77, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(34.5, 77, 0), FreeCAD.Vector(13.5, 77, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(13.5, 77, 0), FreeCAD.Vector(13, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 343\nrevolve.ReferenceAxis = (sketch, ['H_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于矩形（宽45mm、高63mm）草图的旋转特征，绕从点(8, 48)到点(-9, -39)的自定义轴旋转168度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(27, 0, 0), FreeCAD.Vector(72, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(72, 0, 0), FreeCAD.Vector(72, 63, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(72, 63, 0), FreeCAD.Vector(27, 63, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(27, 63, 0), FreeCAD.Vector(27, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 168\n# 创建自定义轴\naxis = sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(8, 48, 0), FreeCAD.Vector(-9, -39, 0)), True)\nrevolve.ReferenceAxis = (sketch, ['Edge' + str(axis+1)])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于梯形（底边38mm、顶边36mm、高76mm）草图的旋转特征，绕从点(28, -6)到点(50, 49)的自定义轴旋转122度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建梯形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(23, 0, 0), FreeCAD.Vector(61, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(61, 0, 0), FreeCAD.Vector(60.0, 76, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60.0, 76, 0), FreeCAD.Vector(24.0, 76, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(24.0, 76, 0), FreeCAD.Vector(23, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 122\n# 创建自定义轴\naxis = sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(28, -6, 0), FreeCAD.Vector(50, 49, 0)), True)\nrevolve.ReferenceAxis = (sketch, ['Edge' + str(axis+1)])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于半圆（半径49mm）草图的旋转特征，绕从点(25, 24)到点(-24, -42)的自定义轴旋转299度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建半圆草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.ArcOfCircle(Part.Circle(FreeCAD.Vector(14, 0, 0), FreeCAD.Vector(0, 0, 1), 49), 0, math.pi), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(14, 49, 0), FreeCAD.Vector(14, -49, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 299\n# 创建自定义轴\naxis = sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(25, 24, 0), FreeCAD.Vector(-24, -42, 0)), True)\nrevolve.ReferenceAxis = (sketch, ['Edge' + str(axis+1)])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于半圆（半径42mm）草图的旋转特征，绕Y轴旋转277度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建半圆草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.ArcOfCircle(Part.Circle(FreeCAD.Vector(17, 0, 0), FreeCAD.Vector(0, 0, 1), 42), 0, math.pi), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(17, 42, 0), FreeCAD.Vector(17, -42, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 277\nrevolve.ReferenceAxis = (sketch, ['H_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于梯形（底边47mm、顶边18mm、高80mm）草图的旋转特征，绕Y轴旋转226度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建梯形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(23, 0, 0), FreeCAD.Vector(70, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(70, 0, 0), FreeCAD.Vector(55.5, 80, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(55.5, 80, 0), FreeCAD.Vector(37.5, 80, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(37.5, 80, 0), FreeCAD.Vector(23, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 226\nrevolve.ReferenceAxis = (sketch, ['H_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于矩形（宽48mm、高50mm）草图的旋转特征，绕从点(-10, -26)到点(36, 46)的自定义轴旋转118度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(22, 0, 0), FreeCAD.Vector(70, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(70, 0, 0), FreeCAD.Vector(70, 50, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(70, 50, 0), FreeCAD.Vector(22, 50, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(22, 50, 0), FreeCAD.Vector(22, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 118\n# 创建自定义轴\naxis = sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-10, -26, 0), FreeCAD.Vector(36, 46, 0)), True)\nrevolve.ReferenceAxis = (sketch, ['Edge' + str(axis+1)])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于半圆（半径41mm）草图的旋转特征，绕X轴旋转191度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建半圆草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.ArcOfCircle(Part.Circle(FreeCAD.Vector(25, 0, 0), FreeCAD.Vector(0, 0, 1), 41), 0, math.pi), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(25, 41, 0), FreeCAD.Vector(25, -41, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 191\nrevolve.ReferenceAxis = (sketch, ['V_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于梯形（底边28mm、顶边15mm、高35mm）草图的旋转特征，绕Y轴旋转116度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建梯形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 0, 0), FreeCAD.Vector(58, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(58, 0, 0), FreeCAD.Vector(51.5, 35, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(51.5, 35, 0), FreeCAD.Vector(36.5, 35, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(36.5, 35, 0), FreeCAD.Vector(30, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 116\nrevolve.ReferenceAxis = (sketch, ['H_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的旋转特征，绕Y轴旋转195度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 0, 0), FreeCAD.Vector(40, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 0, 0), FreeCAD.Vector(40, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 20, 0), FreeCAD.Vector(30, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 20, 0), FreeCAD.Vector(30, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 40, 0), FreeCAD.Vector(10, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 40, 0), FreeCAD.Vector(10, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 195\nrevolve.ReferenceAxis = (sketch, ['H_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于梯形（底边58mm、顶边21mm、高44mm）草图的旋转特征，绕X轴旋转138度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建梯形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(21, 0, 0), FreeCAD.Vector(79, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(79, 0, 0), FreeCAD.Vector(60.5, 44, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(60.5, 44, 0), FreeCAD.Vector(39.5, 44, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(39.5, 44, 0), FreeCAD.Vector(21, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 138\nrevolve.ReferenceAxis = (sketch, ['V_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于矩形（宽37mm、高50mm）草图的旋转特征，绕从点(-47, -33)到点(44, 21)的自定义轴旋转315度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(11, 0, 0), FreeCAD.Vector(48, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(48, 0, 0), FreeCAD.Vector(48, 50, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(48, 50, 0), FreeCAD.Vector(11, 50, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(11, 50, 0), FreeCAD.Vector(11, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 315\n# 创建自定义轴\naxis = sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-47, -33, 0), FreeCAD.Vector(44, 21, 0)), True)\nrevolve.ReferenceAxis = (sketch, ['Edge' + str(axis+1)])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于半圆（半径45mm）草图的旋转特征，绕X轴旋转247度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建半圆草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.ArcOfCircle(Part.Circle(FreeCAD.Vector(22, 0, 0), FreeCAD.Vector(0, 0, 1), 45), 0, math.pi), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(22, 45, 0), FreeCAD.Vector(22, -45, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 247\nrevolve.ReferenceAxis = (sketch, ['V_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于梯形（底边50mm、顶边35mm、高31mm）草图的旋转特征，绕从点(-12, 38)到点(12, -11)的自定义轴旋转112度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建梯形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(17, 0, 0), FreeCAD.Vector(67, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(67, 0, 0), FreeCAD.Vector(59.5, 31, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(59.5, 31, 0), FreeCAD.Vector(24.5, 31, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(24.5, 31, 0), FreeCAD.Vector(17, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 112\n# 创建自定义轴\naxis = sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-12, 38, 0), FreeCAD.Vector(12, -11, 0)), True)\nrevolve.ReferenceAxis = (sketch, ['Edge' + str(axis+1)])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于梯形（底边51mm、顶边24mm、高44mm）草图的旋转特征，绕从点(-19, 5)到点(-10, -5)的自定义轴旋转267度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建梯形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(24, 0, 0), FreeCAD.Vector(75, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(75, 0, 0), FreeCAD.Vector(61.5, 44, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(61.5, 44, 0), FreeCAD.Vector(37.5, 44, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(37.5, 44, 0), FreeCAD.Vector(24, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 267\n# 创建自定义轴\naxis = sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-19, 5, 0), FreeCAD.Vector(-10, -5, 0)), True)\nrevolve.ReferenceAxis = (sketch, ['Edge' + str(axis+1)])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于梯形（底边21mm、顶边40mm、高20mm）草图的旋转特征，绕X轴旋转336度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建梯形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(26, 0, 0), FreeCAD.Vector(47, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(47, 0, 0), FreeCAD.Vector(56.5, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(56.5, 20, 0), FreeCAD.Vector(16.5, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(16.5, 20, 0), FreeCAD.Vector(26, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 336\nrevolve.ReferenceAxis = (sketch, ['V_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的旋转特征，绕X轴旋转102度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 0, 0), FreeCAD.Vector(40, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 0, 0), FreeCAD.Vector(40, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 20, 0), FreeCAD.Vector(30, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 20, 0), FreeCAD.Vector(30, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 40, 0), FreeCAD.Vector(10, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 40, 0), FreeCAD.Vector(10, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 102\nrevolve.ReferenceAxis = (sketch, ['V_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于梯形（底边52mm、顶边34mm、高62mm）草图的旋转特征，绕Y轴旋转234度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建梯形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(14, 0, 0), FreeCAD.Vector(66, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(66, 0, 0), FreeCAD.Vector(57.0, 62, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(57.0, 62, 0), FreeCAD.Vector(23.0, 62, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(23.0, 62, 0), FreeCAD.Vector(14, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 234\nrevolve.ReferenceAxis = (sketch, ['H_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于半圆（半径32mm）草图的旋转特征，绕从点(14, -2)到点(-26, -45)的自定义轴旋转357度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建半圆草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.ArcOfCircle(Part.Circle(FreeCAD.Vector(30, 0, 0), FreeCAD.Vector(0, 0, 1), 32), 0, math.pi), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 32, 0), FreeCAD.Vector(30, -32, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 357\n# 创建自定义轴\naxis = sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(14, -2, 0), FreeCAD.Vector(-26, -45, 0)), True)\nrevolve.ReferenceAxis = (sketch, ['Edge' + str(axis+1)])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于半圆（半径35mm）草图的旋转特征，绕从点(-37, -33)到点(-10, 44)的自定义轴旋转232度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建半圆草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.ArcOfCircle(Part.Circle(FreeCAD.Vector(16, 0, 0), FreeCAD.Vector(0, 0, 1), 35), 0, math.pi), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(16, 35, 0), FreeCAD.Vector(16, -35, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 232\n# 创建自定义轴\naxis = sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-37, -33, 0), FreeCAD.Vector(-10, 44, 0)), True)\nrevolve.ReferenceAxis = (sketch, ['Edge' + str(axis+1)])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的旋转特征，绕从点(-14, 50)到点(32, -8)的自定义轴旋转243度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 0, 0), FreeCAD.Vector(40, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 0, 0), FreeCAD.Vector(40, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 20, 0), FreeCAD.Vector(30, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 20, 0), FreeCAD.Vector(30, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 40, 0), FreeCAD.Vector(10, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 40, 0), FreeCAD.Vector(10, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 243\n# 创建自定义轴\naxis = sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-14, 50, 0), FreeCAD.Vector(32, -8, 0)), True)\nrevolve.ReferenceAxis = (sketch, ['Edge' + str(axis+1)])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于半圆（半径38mm）草图的旋转特征，绕X轴旋转100度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建半圆草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.ArcOfCircle(Part.Circle(FreeCAD.Vector(16, 0, 0), FreeCAD.Vector(0, 0, 1), 38), 0, math.pi), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(16, 38, 0), FreeCAD.Vector(16, -38, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 100\nrevolve.ReferenceAxis = (sketch, ['V_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于矩形（宽40mm、高29mm）草图的旋转特征，绕从点(-33, -6)到点(28, -29)的自定义轴旋转345度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(19, 0, 0), FreeCAD.Vector(59, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(59, 0, 0), FreeCAD.Vector(59, 29, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(59, 29, 0), FreeCAD.Vector(19, 29, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(19, 29, 0), FreeCAD.Vector(19, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 345\n# 创建自定义轴\naxis = sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-33, -6, 0), FreeCAD.Vector(28, -29, 0)), True)\nrevolve.ReferenceAxis = (sketch, ['Edge' + str(axis+1)])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的旋转特征，绕X轴旋转完整。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 0, 0), FreeCAD.Vector(40, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 0, 0), FreeCAD.Vector(40, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 20, 0), FreeCAD.Vector(30, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 20, 0), FreeCAD.Vector(30, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 40, 0), FreeCAD.Vector(10, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 40, 0), FreeCAD.Vector(10, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 360\nrevolve.ReferenceAxis = (sketch, ['V_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的旋转特征，绕Y轴旋转338度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 0, 0), FreeCAD.Vector(40, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 0, 0), FreeCAD.Vector(40, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 20, 0), FreeCAD.Vector(30, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 20, 0), FreeCAD.Vector(30, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 40, 0), FreeCAD.Vector(10, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 40, 0), FreeCAD.Vector(10, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 338\nrevolve.ReferenceAxis = (sketch, ['H_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于半圆（半径36mm）草图的旋转特征，绕从点(-44, 0)到点(41, -10)的自定义轴旋转255度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建半圆草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.ArcOfCircle(Part.Circle(FreeCAD.Vector(25, 0, 0), FreeCAD.Vector(0, 0, 1), 36), 0, math.pi), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(25, 36, 0), FreeCAD.Vector(25, -36, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 255\n# 创建自定义轴\naxis = sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-44, 0, 0), FreeCAD.Vector(41, -10, 0)), True)\nrevolve.ReferenceAxis = (sketch, ['Edge' + str(axis+1)])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的旋转特征，绕从点(33, 7)到点(-30, -46)的自定义轴旋转158度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 0, 0), FreeCAD.Vector(40, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 0, 0), FreeCAD.Vector(40, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 20, 0), FreeCAD.Vector(30, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 20, 0), FreeCAD.Vector(30, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 40, 0), FreeCAD.Vector(10, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 40, 0), FreeCAD.Vector(10, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 158\n# 创建自定义轴\naxis = sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(33, 7, 0), FreeCAD.Vector(-30, -46, 0)), True)\nrevolve.ReferenceAxis = (sketch, ['Edge' + str(axis+1)])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于矩形（宽34mm、高57mm）草图的旋转特征，绕Y轴旋转358度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(20, 0, 0), FreeCAD.Vector(54, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(54, 0, 0), FreeCAD.Vector(54, 57, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(54, 57, 0), FreeCAD.Vector(20, 57, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(20, 57, 0), FreeCAD.Vector(20, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 358\nrevolve.ReferenceAxis = (sketch, ['H_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于梯形（底边55mm、顶边28mm、高21mm）草图的旋转特征，绕从点(-48, -45)到点(-20, -13)的自定义轴旋转105度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建梯形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 0, 0), FreeCAD.Vector(65, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(65, 0, 0), FreeCAD.Vector(51.5, 21, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(51.5, 21, 0), FreeCAD.Vector(23.5, 21, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(23.5, 21, 0), FreeCAD.Vector(10, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 105\n# 创建自定义轴\naxis = sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-48, -45, 0), FreeCAD.Vector(-20, -13, 0)), True)\nrevolve.ReferenceAxis = (sketch, ['Edge' + str(axis+1)])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于复杂轮廓草图的旋转特征，绕X轴旋转145度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建复杂轮廓草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 0, 0), FreeCAD.Vector(40, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 0, 0), FreeCAD.Vector(40, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 20, 0), FreeCAD.Vector(30, 20, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 20, 0), FreeCAD.Vector(30, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 40, 0), FreeCAD.Vector(10, 40, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 40, 0), FreeCAD.Vector(10, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 145\nrevolve.ReferenceAxis = (sketch, ['V_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于梯形（底边30mm、顶边23mm、高69mm）草图的旋转特征，绕Y轴旋转262度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建梯形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(11, 0, 0), FreeCAD.Vector(41, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(41, 0, 0), FreeCAD.Vector(37.5, 69, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(37.5, 69, 0), FreeCAD.Vector(14.5, 69, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(14.5, 69, 0), FreeCAD.Vector(11, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 262\nrevolve.ReferenceAxis = (sketch, ['H_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于矩形（宽46mm、高54mm）草图的旋转特征，绕X轴旋转226度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(17, 0, 0), FreeCAD.Vector(63, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(63, 0, 0), FreeCAD.Vector(63, 54, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(63, 54, 0), FreeCAD.Vector(17, 54, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(17, 54, 0), FreeCAD.Vector(17, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 226\nrevolve.ReferenceAxis = (sketch, ['V_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于矩形（宽18mm、高51mm）草图的旋转特征，绕Y轴旋转322度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(12, 0, 0), FreeCAD.Vector(30, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 0, 0), FreeCAD.Vector(30, 51, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 51, 0), FreeCAD.Vector(12, 51, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(12, 51, 0), FreeCAD.Vector(12, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 322\nrevolve.ReferenceAxis = (sketch, ['H_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于梯形（底边45mm、顶边33mm、高52mm）草图的旋转特征，绕Y轴旋转95度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建梯形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(20, 0, 0), FreeCAD.Vector(65, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(65, 0, 0), FreeCAD.Vector(59.0, 52, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(59.0, 52, 0), FreeCAD.Vector(26.0, 52, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(26.0, 52, 0), FreeCAD.Vector(20, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 95\nrevolve.ReferenceAxis = (sketch, ['H_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长119mm、宽55mm、高67mm）基础体，然后在其顶面挖出一个圆形（半径20mm）的深度12mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(119, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(119, 0, 0), FreeCAD.Vector(119, 55, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(119, 55, 0), FreeCAD.Vector(0, 55, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 55, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 67\ndoc.recompute()\n# 创建圆形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(-9, -28, 0), FreeCAD.Vector(0, 0, 1), 20), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 12\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长145mm、宽108mm、高72mm）基础体，然后在其顶面挖出一个矩形（长80mm、宽44mm）的深度48mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(145, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(145, 0, 0), FreeCAD.Vector(145, 108, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(145, 108, 0), FreeCAD.Vector(0, 108, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 108, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 72\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(26, 13, 0), FreeCAD.Vector(106, 13, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(106, 13, 0), FreeCAD.Vector(106, 57, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(106, 57, 0), FreeCAD.Vector(26, 57, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(26, 57, 0), FreeCAD.Vector(26, 13, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 48\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长66mm、宽100mm、高71mm）基础体，然后在其顶面挖出一个圆形（半径20mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(66, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(66, 0, 0), FreeCAD.Vector(66, 100, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(66, 100, 0), FreeCAD.Vector(0, 100, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 100, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 71\ndoc.recompute()\n# 创建圆形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(3, 16, 0), FreeCAD.Vector(0, 0, 1), 20), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径33mm、高79mm）基础体，然后在其顶面挖出一个圆形（半径14mm）的深度21mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 33), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 79\ndoc.recompute()\n# 创建圆形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 14), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 21\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长50mm、宽63mm、高30mm）基础体，然后在其顶面挖出一个矩形（长22mm、宽40mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(50, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(50, 0, 0), FreeCAD.Vector(50, 63, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(50, 63, 0), FreeCAD.Vector(0, 63, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 63, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 30\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(12, 8, 0), FreeCAD.Vector(34, 8, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(34, 8, 0), FreeCAD.Vector(34, 48, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(34, 48, 0), FreeCAD.Vector(12, 48, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(12, 48, 0), FreeCAD.Vector(12, 8, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长126mm、宽61mm、高45mm）基础体，然后在其顶面挖出一个矩形（长32mm、宽21mm）的深度20mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(126, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(126, 0, 0), FreeCAD.Vector(126, 61, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(126, 61, 0), FreeCAD.Vector(0, 61, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 61, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 45\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(3, -5, 0), FreeCAD.Vector(35, -5, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(35, -5, 0), FreeCAD.Vector(35, 16, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(35, 16, 0), FreeCAD.Vector(3, 16, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(3, 16, 0), FreeCAD.Vector(3, -5, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 20\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长57mm、宽78mm、高64mm）基础体，然后在其顶面挖出一个4边形（外接圆半径24mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(57, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(57, 0, 0), FreeCAD.Vector(57, 78, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(57, 78, 0), FreeCAD.Vector(0, 78, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 78, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 64\ndoc.recompute()\n# 创建4边形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\n# 计算顶点\nvertices = []\nfor i in range(4):\n    angle = 2 * math.pi * i / 4\n    x = -20 + 24 * math.cos(angle)\n    y = -12 + 24 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(4):\n    pocket_sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 4]), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径55mm、高76mm）基础体，然后在其顶面挖出一个矩形（长60mm、宽22mm）的深度20mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 55), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 76\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-30, -11, 0), FreeCAD.Vector(30, -11, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, -11, 0), FreeCAD.Vector(30, 11, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(30, 11, 0), FreeCAD.Vector(-30, 11, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-30, 11, 0), FreeCAD.Vector(-30, -11, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 20\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长111mm、宽140mm、高73mm）基础体，然后在其顶面挖出一个圆形（半径19mm）的深度46mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(111, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(111, 0, 0), FreeCAD.Vector(111, 140, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(111, 140, 0), FreeCAD.Vector(0, 140, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 140, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 73\ndoc.recompute()\n# 创建圆形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(-25, -2, 0), FreeCAD.Vector(0, 0, 1), 19), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 46\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径66mm、高68mm）基础体，然后在其顶面挖出一个圆形（半径27mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 66), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 68\ndoc.recompute()\n# 创建圆形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 27), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长140mm、宽91mm、高100mm）基础体，然后在其顶面挖出一个5边形（外接圆半径20mm）的深度45mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(140, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(140, 0, 0), FreeCAD.Vector(140, 91, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(140, 91, 0), FreeCAD.Vector(0, 91, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 91, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 100\ndoc.recompute()\n# 创建5边形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\n# 计算顶点\nvertices = []\nfor i in range(5):\n    angle = 2 * math.pi * i / 5\n    x = -12 + 20 * math.cos(angle)\n    y = 11 + 20 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(5):\n    pocket_sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 5]), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 45\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长99mm、宽132mm、高84mm）基础体，然后在其顶面挖出一个圆形（半径20mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(99, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(99, 0, 0), FreeCAD.Vector(99, 132, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(99, 132, 0), FreeCAD.Vector(0, 132, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 132, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 84\ndoc.recompute()\n# 创建圆形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(0, -2, 0), FreeCAD.Vector(0, 0, 1), 20), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径68mm、高80mm）基础体，然后在其顶面挖出一个5边形（外接圆半径17mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 68), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 80\ndoc.recompute()\n# 创建5边形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\n# 计算顶点\nvertices = []\nfor i in range(5):\n    angle = 2 * math.pi * i / 5\n    x = 0 + 17 * math.cos(angle)\n    y = 0 + 17 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(5):\n    pocket_sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 5]), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径40mm、高49mm）基础体，然后在其顶面挖出一个3边形（外接圆半径29mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 40), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 49\ndoc.recompute()\n# 创建3边形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\n# 计算顶点\nvertices = []\nfor i in range(3):\n    angle = 2 * math.pi * i / 3\n    x = 0 + 29 * math.cos(angle)\n    y = 0 + 29 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(3):\n    pocket_sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 3]), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长143mm、宽53mm、高56mm）基础体，然后在其顶面挖出一个矩形（长28mm、宽29mm）的深度41mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(143, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(143, 0, 0), FreeCAD.Vector(143, 53, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(143, 53, 0), FreeCAD.Vector(0, 53, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 53, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 56\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-1, -34, 0), FreeCAD.Vector(27, -34, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(27, -34, 0), FreeCAD.Vector(27, -5, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(27, -5, 0), FreeCAD.Vector(-1, -5, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-1, -5, 0), FreeCAD.Vector(-1, -34, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 41\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径40mm、高89mm）基础体，然后在其顶面挖出一个5边形（外接圆半径29mm）的深度14mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 40), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 89\ndoc.recompute()\n# 创建5边形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\n# 计算顶点\nvertices = []\nfor i in range(5):\n    angle = 2 * math.pi * i / 5\n    x = 0 + 29 * math.cos(angle)\n    y = 0 + 29 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(5):\n    pocket_sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 5]), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 14\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径35mm、高65mm）基础体，然后在其顶面挖出一个矩形（长27mm、宽22mm）的深度13mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 35), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 65\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-14, -11, 0), FreeCAD.Vector(13, -11, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(13, -11, 0), FreeCAD.Vector(13, 11, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(13, 11, 0), FreeCAD.Vector(-14, 11, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-14, 11, 0), FreeCAD.Vector(-14, -11, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 13\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长93mm、宽102mm、高81mm）基础体，然后在其顶面挖出一个圆形（半径24mm）的深度20mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(93, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(93, 0, 0), FreeCAD.Vector(93, 102, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(93, 102, 0), FreeCAD.Vector(0, 102, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 102, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 81\ndoc.recompute()\n# 创建圆形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(-3, -22, 0), FreeCAD.Vector(0, 0, 1), 24), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 20\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径79mm、高61mm）基础体，然后在其顶面挖出一个5边形（外接圆半径16mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 79), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 61\ndoc.recompute()\n# 创建5边形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\n# 计算顶点\nvertices = []\nfor i in range(5):\n    angle = 2 * math.pi * i / 5\n    x = 0 + 16 * math.cos(angle)\n    y = 0 + 16 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(5):\n    pocket_sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 5]), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长72mm、宽88mm、高81mm）基础体，然后在其顶面挖出一个圆形（半径26mm）的深度39mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(72, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(72, 0, 0), FreeCAD.Vector(72, 88, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(72, 88, 0), FreeCAD.Vector(0, 88, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 88, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 81\ndoc.recompute()\n# 创建圆形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(19, -17, 0), FreeCAD.Vector(0, 0, 1), 26), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 39\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径57mm、高59mm）基础体，然后在其顶面挖出一个圆形（半径15mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 57), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 59\ndoc.recompute()\n# 创建圆形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 15), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长115mm、宽102mm、高60mm）基础体，然后在其顶面挖出一个圆形（半径24mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(115, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(115, 0, 0), FreeCAD.Vector(115, 102, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(115, 102, 0), FreeCAD.Vector(0, 102, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 102, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 60\ndoc.recompute()\n# 创建圆形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(17, 19, 0), FreeCAD.Vector(0, 0, 1), 24), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径42mm、高85mm）基础体，然后在其顶面挖出一个6边形（外接圆半径29mm）的深度12mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 42), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 85\ndoc.recompute()\n# 创建6边形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\n# 计算顶点\nvertices = []\nfor i in range(6):\n    angle = 2 * math.pi * i / 6\n    x = 0 + 29 * math.cos(angle)\n    y = 0 + 29 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(6):\n    pocket_sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 6]), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 12\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长125mm、宽122mm、高55mm）基础体，然后在其顶面挖出一个矩形（长28mm、宽44mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(125, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(125, 0, 0), FreeCAD.Vector(125, 122, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(125, 122, 0), FreeCAD.Vector(0, 122, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 122, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 55\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(12, 28, 0), FreeCAD.Vector(40, 28, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 28, 0), FreeCAD.Vector(40, 72, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 72, 0), FreeCAD.Vector(12, 72, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(12, 72, 0), FreeCAD.Vector(12, 28, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径62mm、高32mm）基础体，然后在其顶面挖出一个圆形（半径24mm）的深度21mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 62), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 32\ndoc.recompute()\n# 创建圆形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 24), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 21\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径40mm、高36mm）基础体，然后在其顶面挖出一个矩形（长23mm、宽53mm）的深度15mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 40), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 36\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-12, -27, 0), FreeCAD.Vector(11, -27, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(11, -27, 0), FreeCAD.Vector(11, 26, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(11, 26, 0), FreeCAD.Vector(-12, 26, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-12, 26, 0), FreeCAD.Vector(-12, -27, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 15\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长108mm、宽80mm、高74mm）基础体，然后在其顶面挖出一个矩形（长45mm、宽48mm）的深度19mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(108, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(108, 0, 0), FreeCAD.Vector(108, 80, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(108, 80, 0), FreeCAD.Vector(0, 80, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 80, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 74\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(12, -1, 0), FreeCAD.Vector(57, -1, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(57, -1, 0), FreeCAD.Vector(57, 47, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(57, 47, 0), FreeCAD.Vector(12, 47, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(12, 47, 0), FreeCAD.Vector(12, -1, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 19\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长145mm、宽130mm、高57mm）基础体，然后在其顶面挖出一个矩形（长22mm、宽48mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(145, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(145, 0, 0), FreeCAD.Vector(145, 130, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(145, 130, 0), FreeCAD.Vector(0, 130, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 130, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 57\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(18, -11, 0), FreeCAD.Vector(40, -11, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, -11, 0), FreeCAD.Vector(40, 37, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(40, 37, 0), FreeCAD.Vector(18, 37, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(18, 37, 0), FreeCAD.Vector(18, -11, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长135mm、宽89mm、高59mm）基础体，然后在其顶面挖出一个矩形（长32mm、宽38mm）的深度15mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(135, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(135, 0, 0), FreeCAD.Vector(135, 89, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(135, 89, 0), FreeCAD.Vector(0, 89, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 89, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 59\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-17, -29, 0), FreeCAD.Vector(15, -29, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(15, -29, 0), FreeCAD.Vector(15, 9, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(15, 9, 0), FreeCAD.Vector(-17, 9, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-17, 9, 0), FreeCAD.Vector(-17, -29, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 15\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长111mm、宽126mm、高54mm）基础体，然后在其顶面挖出一个圆形（半径21mm）的深度38mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(111, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(111, 0, 0), FreeCAD.Vector(111, 126, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(111, 126, 0), FreeCAD.Vector(0, 126, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 126, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 54\ndoc.recompute()\n# 创建圆形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(3, 26, 0), FreeCAD.Vector(0, 0, 1), 21), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 38\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长127mm、宽64mm、高83mm）基础体，然后在其顶面挖出一个3边形（外接圆半径25mm）的深度10mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(127, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(127, 0, 0), FreeCAD.Vector(127, 64, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(127, 64, 0), FreeCAD.Vector(0, 64, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 64, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 83\ndoc.recompute()\n# 创建3边形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\n# 计算顶点\nvertices = []\nfor i in range(3):\n    angle = 2 * math.pi * i / 3\n    x = 1 + 25 * math.cos(angle)\n    y = -3 + 25 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(3):\n    pocket_sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 3]), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 10\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径66mm、高37mm）基础体，然后在其顶面挖出一个矩形（长24mm、宽21mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 66), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 37\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-12, -11, 0), FreeCAD.Vector(12, -11, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(12, -11, 0), FreeCAD.Vector(12, 10, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(12, 10, 0), FreeCAD.Vector(-12, 10, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-12, 10, 0), FreeCAD.Vector(-12, -11, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径54mm、高61mm）基础体，然后在其顶面挖出一个矩形（长55mm、宽40mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 54), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 61\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-28, -20, 0), FreeCAD.Vector(27, -20, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(27, -20, 0), FreeCAD.Vector(27, 20, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(27, 20, 0), FreeCAD.Vector(-28, 20, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-28, 20, 0), FreeCAD.Vector(-28, -20, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长127mm、宽120mm、高92mm）基础体，然后在其顶面挖出一个6边形（外接圆半径28mm）的深度33mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(127, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(127, 0, 0), FreeCAD.Vector(127, 120, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(127, 120, 0), FreeCAD.Vector(0, 120, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 120, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 92\ndoc.recompute()\n# 创建6边形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\n# 计算顶点\nvertices = []\nfor i in range(6):\n    angle = 2 * math.pi * i / 6\n    x = -21 + 28 * math.cos(angle)\n    y = -24 + 28 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(6):\n    pocket_sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 6]), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 33\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长95mm、宽89mm、高63mm）基础体，然后在其顶面挖出一个矩形（长45mm、宽65mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(95, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(95, 0, 0), FreeCAD.Vector(95, 89, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(95, 89, 0), FreeCAD.Vector(0, 89, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 89, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 63\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-10, 0, 0), FreeCAD.Vector(35, 0, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(35, 0, 0), FreeCAD.Vector(35, 65, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(35, 65, 0), FreeCAD.Vector(-10, 65, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-10, 65, 0), FreeCAD.Vector(-10, 0, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长108mm、宽145mm、高68mm）基础体，然后在其顶面挖出一个3边形（外接圆半径15mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(108, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(108, 0, 0), FreeCAD.Vector(108, 145, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(108, 145, 0), FreeCAD.Vector(0, 145, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 145, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 68\ndoc.recompute()\n# 创建3边形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\n# 计算顶点\nvertices = []\nfor i in range(3):\n    angle = 2 * math.pi * i / 3\n    x = 1 + 15 * math.cos(angle)\n    y = 7 + 15 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(3):\n    pocket_sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 3]), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长68mm、宽132mm、高98mm）基础体，然后在其顶面挖出一个矩形（长43mm、宽33mm）的深度21mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(68, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(68, 0, 0), FreeCAD.Vector(68, 132, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(68, 132, 0), FreeCAD.Vector(0, 132, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 132, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 98\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 17, 0), FreeCAD.Vector(53, 17, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(53, 17, 0), FreeCAD.Vector(53, 50, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(53, 50, 0), FreeCAD.Vector(10, 50, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(10, 50, 0), FreeCAD.Vector(10, 17, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 21\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长113mm、宽99mm、高42mm）基础体，然后在其顶面挖出一个矩形（长43mm、宽53mm）的深度20mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(113, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(113, 0, 0), FreeCAD.Vector(113, 99, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(113, 99, 0), FreeCAD.Vector(0, 99, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 99, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 42\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(5, 23, 0), FreeCAD.Vector(48, 23, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(48, 23, 0), FreeCAD.Vector(48, 76, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(48, 76, 0), FreeCAD.Vector(5, 76, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(5, 76, 0), FreeCAD.Vector(5, 23, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 20\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长107mm、宽57mm、高32mm）基础体，然后在其顶面挖出一个矩形（长48mm、宽26mm）的深度24mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(107, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(107, 0, 0), FreeCAD.Vector(107, 57, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(107, 57, 0), FreeCAD.Vector(0, 57, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 57, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 32\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-6, 11, 0), FreeCAD.Vector(42, 11, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(42, 11, 0), FreeCAD.Vector(42, 37, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(42, 37, 0), FreeCAD.Vector(-6, 37, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-6, 37, 0), FreeCAD.Vector(-6, 11, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 24\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径37mm、高37mm）基础体，然后在其顶面挖出一个矩形（长23mm、宽48mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 37), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 37\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-12, -24, 0), FreeCAD.Vector(11, -24, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(11, -24, 0), FreeCAD.Vector(11, 24, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(11, 24, 0), FreeCAD.Vector(-12, 24, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-12, 24, 0), FreeCAD.Vector(-12, -24, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长129mm、宽116mm、高32mm）基础体，然后在其顶面挖出一个5边形（外接圆半径24mm）的深度21mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(129, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(129, 0, 0), FreeCAD.Vector(129, 116, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(129, 116, 0), FreeCAD.Vector(0, 116, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 116, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 32\ndoc.recompute()\n# 创建5边形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\n# 计算顶点\nvertices = []\nfor i in range(5):\n    angle = 2 * math.pi * i / 5\n    x = -16 + 24 * math.cos(angle)\n    y = 23 + 24 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(5):\n    pocket_sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 5]), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 21\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径51mm、高30mm）基础体，然后在其顶面挖出一个矩形（长37mm、宽39mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 51), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 30\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-19, -20, 0), FreeCAD.Vector(18, -20, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(18, -20, 0), FreeCAD.Vector(18, 19, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(18, 19, 0), FreeCAD.Vector(-19, 19, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-19, 19, 0), FreeCAD.Vector(-19, -20, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长144mm、宽68mm、高89mm）基础体，然后在其顶面挖出一个圆形（半径30mm）的深度11mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(144, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(144, 0, 0), FreeCAD.Vector(144, 68, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(144, 68, 0), FreeCAD.Vector(0, 68, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 68, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 89\ndoc.recompute()\n# 创建圆形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(7, -21, 0), FreeCAD.Vector(0, 0, 1), 30), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 11\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长137mm、宽111mm、高100mm）基础体，然后在其顶面挖出一个圆形（半径12mm）的深度26mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(137, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(137, 0, 0), FreeCAD.Vector(137, 111, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(137, 111, 0), FreeCAD.Vector(0, 111, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 111, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 100\ndoc.recompute()\n# 创建圆形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(2, -17, 0), FreeCAD.Vector(0, 0, 1), 12), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 26\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径74mm、高52mm）基础体，然后在其顶面挖出一个圆形（半径11mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 74), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 52\ndoc.recompute()\n# 创建圆形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 11), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长68mm、宽83mm、高88mm）基础体，然后在其顶面挖出一个矩形（长34mm、宽42mm）的深度35mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(68, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(68, 0, 0), FreeCAD.Vector(68, 83, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(68, 83, 0), FreeCAD.Vector(0, 83, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 83, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 88\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 15, 0), FreeCAD.Vector(34, 15, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(34, 15, 0), FreeCAD.Vector(34, 57, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(34, 57, 0), FreeCAD.Vector(0, 57, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 57, 0), FreeCAD.Vector(0, 15, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 35\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长103mm、宽89mm、高44mm）基础体，然后在其顶面挖出一个圆形（半径18mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(103, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(103, 0, 0), FreeCAD.Vector(103, 89, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(103, 89, 0), FreeCAD.Vector(0, 89, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 89, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 44\ndoc.recompute()\n# 创建圆形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(19, 10, 0), FreeCAD.Vector(0, 0, 1), 18), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长94mm、宽52mm、高100mm）基础体，然后在其顶面挖出一个6边形（外接圆半径26mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(94, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(94, 0, 0), FreeCAD.Vector(94, 52, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(94, 52, 0), FreeCAD.Vector(0, 52, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 52, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 100\ndoc.recompute()\n# 创建6边形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\n# 计算顶点\nvertices = []\nfor i in range(6):\n    angle = 2 * math.pi * i / 6\n    x = 3 + 26 * math.cos(angle)\n    y = 15 + 26 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(6):\n    pocket_sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 6]), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长53mm、宽96mm、高47mm）基础体，然后在其顶面挖出一个圆形（半径12mm）的深度13mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(53, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(53, 0, 0), FreeCAD.Vector(53, 96, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(53, 96, 0), FreeCAD.Vector(0, 96, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 96, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 47\ndoc.recompute()\n# 创建圆形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(-5, -14, 0), FreeCAD.Vector(0, 0, 1), 12), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 13\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长145mm、宽125mm、高95mm）基础体，然后在其顶面挖出一个4边形（外接圆半径15mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(145, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(145, 0, 0), FreeCAD.Vector(145, 125, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(145, 125, 0), FreeCAD.Vector(0, 125, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 125, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 95\ndoc.recompute()\n# 创建4边形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\n# 计算顶点\nvertices = []\nfor i in range(4):\n    angle = 2 * math.pi * i / 4\n    x = 31 + 15 * math.cos(angle)\n    y = -24 + 15 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(4):\n    pocket_sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 4]), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长86mm、宽148mm、高98mm）基础体，然后对其1条特定边添加圆角（半径5mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(86, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(86, 0, 0), FreeCAD.Vector(86, 148, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(86, 148, 0), FreeCAD.Vector(0, 148, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 148, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 98\ndoc.recompute()\n# 选择特定边\nedges = []\nfor i in [12]:\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 5\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径63mm、高76mm）基础体，然后对其顶面边缘添加倒角（距离10mm，角度56度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 63), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 76\ndoc.recompute()\n# 选择顶面边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge3\")]  # 假设顶面边缘索引为3\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 10\nchamfer.Angle = 56\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长146mm、宽114mm、高31mm）基础体，然后对其所有边添加倒角（距离4mm，角度32度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(146, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(146, 0, 0), FreeCAD.Vector(146, 114, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(146, 114, 0), FreeCAD.Vector(0, 114, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 114, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 31\ndoc.recompute()\n# 选择所有边\nedges = []\nfor i in range(1, 13):  # 长方体有12条边\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 4\nchamfer.Angle = 32\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径52mm、高68mm）基础体，然后对其顶面边缘添加倒角（距离9mm，角度52度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 52), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 68\ndoc.recompute()\n# 选择顶面边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge3\")]  # 假设顶面边缘索引为3\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 9\nchamfer.Angle = 52\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长98mm、宽95mm、高58mm）基础体，然后对其顶面的四条边添加倒角（距离6mm，角度31度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(98, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(98, 0, 0), FreeCAD.Vector(98, 95, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(98, 95, 0), FreeCAD.Vector(0, 95, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 95, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 58\ndoc.recompute()\n# 选择顶面的四条边\nedges = []\nfor i in range(9, 13):  # 假设顶面的边索引为9-12\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 6\nchamfer.Angle = 31\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径68mm、高94mm）基础体，然后对其顶面边缘添加圆角（半径8mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 68), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 94\ndoc.recompute()\n# 选择顶面边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge3\")]  # 假设顶面边缘索引为3\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 8\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径32mm、高43mm）基础体，然后对其底面边缘添加圆角（半径10mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 32), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 43\ndoc.recompute()\n# 选择底面边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge1\")]  # 假设底面边缘索引为1\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 10\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长52mm、宽56mm、高92mm）基础体，然后对其所有边添加圆角（半径3mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(52, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(52, 0, 0), FreeCAD.Vector(52, 56, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(52, 56, 0), FreeCAD.Vector(0, 56, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 56, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 92\ndoc.recompute()\n# 选择所有边\nedges = []\nfor i in range(1, 13):  # 长方体有12条边\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长57mm、宽112mm、高49mm）基础体，然后对其四条垂直边添加倒角（距离10mm，角度40度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(57, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(57, 0, 0), FreeCAD.Vector(57, 112, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(57, 112, 0), FreeCAD.Vector(0, 112, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 112, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 49\ndoc.recompute()\n# 选择四条垂直边\nedges = []\nfor i in range(1, 5):  # 假设垂直边索引为1-4\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 10\nchamfer.Angle = 40\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长105mm、宽110mm、高59mm）基础体，然后对其4条特定边添加倒角（距离6mm，角度53度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(105, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(105, 0, 0), FreeCAD.Vector(105, 110, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(105, 110, 0), FreeCAD.Vector(0, 110, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 110, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 59\ndoc.recompute()\n# 选择特定边\nedges = []\nfor i in [7, 10, 11, 3]:\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 6\nchamfer.Angle = 53\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长75mm、宽130mm、高80mm）基础体，然后对其四条垂直边添加圆角（半径4mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(75, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(75, 0, 0), FreeCAD.Vector(75, 130, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(75, 130, 0), FreeCAD.Vector(0, 130, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 130, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 80\ndoc.recompute()\n# 选择四条垂直边\nedges = []\nfor i in range(1, 5):  # 假设垂直边索引为1-4\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 4\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径80mm、高52mm）基础体，然后对其特定边缘添加圆角（半径3mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 80), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 52\ndoc.recompute()\n# 选择特定边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge1\")]\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径53mm、高42mm）基础体，然后对其顶面边缘添加圆角（半径7mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 53), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 42\ndoc.recompute()\n# 选择顶面边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge3\")]  # 假设顶面边缘索引为3\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 7\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径36mm、高89mm）基础体，然后对其底面边缘添加圆角（半径6mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 36), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 89\ndoc.recompute()\n# 选择底面边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge1\")]  # 假设底面边缘索引为1\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 6\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长128mm、宽100mm、高51mm）基础体，然后对其3条特定边添加圆角（半径10mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(128, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(128, 0, 0), FreeCAD.Vector(128, 100, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(128, 100, 0), FreeCAD.Vector(0, 100, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 100, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 51\ndoc.recompute()\n# 选择特定边\nedges = []\nfor i in [7, 2, 6]:\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 10\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长89mm、宽87mm、高53mm）基础体，然后对其四条垂直边添加倒角（距离8mm，角度56度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(89, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(89, 0, 0), FreeCAD.Vector(89, 87, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(89, 87, 0), FreeCAD.Vector(0, 87, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 87, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 53\ndoc.recompute()\n# 选择四条垂直边\nedges = []\nfor i in range(1, 5):  # 假设垂直边索引为1-4\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 8\nchamfer.Angle = 56\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长93mm、宽108mm、高50mm）基础体，然后对其1条特定边添加圆角（半径8mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(93, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(93, 0, 0), FreeCAD.Vector(93, 108, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(93, 108, 0), FreeCAD.Vector(0, 108, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 108, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 50\ndoc.recompute()\n# 选择特定边\nedges = []\nfor i in [5]:\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 8\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径37mm、高71mm）基础体，然后对其底面边缘添加圆角（半径2mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 37), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 71\ndoc.recompute()\n# 选择底面边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge1\")]  # 假设底面边缘索引为1\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径64mm、高88mm）基础体，然后对其所有边添加圆角（半径2mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 64), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 88\ndoc.recompute()\n# 选择所有边\nedges = []\nfor i in range(1, 4):  # 圆柱体有3条边（上下圆周和侧面）\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径76mm、高96mm）基础体，然后对其所有边添加倒角（距离7mm，角度37度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 76), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 96\ndoc.recompute()\n# 选择所有边\nedges = []\nfor i in range(1, 4):  # 圆柱体有3条边（上下圆周和侧面）\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 7\nchamfer.Angle = 37\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径64mm、高82mm）基础体，然后对其所有边添加倒角（距离9mm，角度44度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 64), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 82\ndoc.recompute()\n# 选择所有边\nedges = []\nfor i in range(1, 4):  # 圆柱体有3条边（上下圆周和侧面）\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 9\nchamfer.Angle = 44\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长61mm、宽136mm、高94mm）基础体，然后对其顶面的四条边添加圆角（半径10mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(61, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(61, 0, 0), FreeCAD.Vector(61, 136, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(61, 136, 0), FreeCAD.Vector(0, 136, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 136, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 94\ndoc.recompute()\n# 选择顶面的四条边\nedges = []\nfor i in range(9, 13):  # 假设顶面的边索引为9-12\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 10\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径64mm、高83mm）基础体，然后对其特定边缘添加圆角（半径8mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 64), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 83\ndoc.recompute()\n# 选择特定边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge3\")]\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 8\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径65mm、高44mm）基础体，然后对其顶面边缘添加倒角（距离2mm，角度48度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 65), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 44\ndoc.recompute()\n# 选择顶面边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge3\")]  # 假设顶面边缘索引为3\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 2\nchamfer.Angle = 48\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长83mm、宽99mm、高87mm）基础体，然后对其3条特定边添加倒角（距离6mm，角度37度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(83, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(83, 0, 0), FreeCAD.Vector(83, 99, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(83, 99, 0), FreeCAD.Vector(0, 99, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 99, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 87\ndoc.recompute()\n# 选择特定边\nedges = []\nfor i in [12, 8, 6]:\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 6\nchamfer.Angle = 37\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径55mm、高35mm）基础体，然后对其顶面边缘添加圆角（半径6mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 55), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 35\ndoc.recompute()\n# 选择顶面边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge3\")]  # 假设顶面边缘索引为3\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 6\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长106mm、宽112mm、高100mm）基础体，然后对其四条垂直边添加圆角（半径10mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(106, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(106, 0, 0), FreeCAD.Vector(106, 112, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(106, 112, 0), FreeCAD.Vector(0, 112, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 112, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 100\ndoc.recompute()\n# 选择四条垂直边\nedges = []\nfor i in range(1, 5):  # 假设垂直边索引为1-4\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 10\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径44mm、高58mm）基础体，然后对其特定边缘添加圆角（半径5mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 44), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 58\ndoc.recompute()\n# 选择特定边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge1\")]\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 5\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长135mm、宽139mm、高37mm）基础体，然后对其所有边添加圆角（半径9mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(135, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(135, 0, 0), FreeCAD.Vector(135, 139, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(135, 139, 0), FreeCAD.Vector(0, 139, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 139, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 37\ndoc.recompute()\n# 选择所有边\nedges = []\nfor i in range(1, 13):  # 长方体有12条边\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 9\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长68mm、宽68mm、高90mm）基础体，然后对其顶面的四条边添加倒角（距离5mm，角度45度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(68, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(68, 0, 0), FreeCAD.Vector(68, 68, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(68, 68, 0), FreeCAD.Vector(0, 68, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 68, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 90\ndoc.recompute()\n# 选择顶面的四条边\nedges = []\nfor i in range(9, 13):  # 假设顶面的边索引为9-12\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 5\nchamfer.Angle = 45\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径77mm、高87mm）基础体，然后对其特定边缘添加圆角（半径2mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 77), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 87\ndoc.recompute()\n# 选择特定边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge2\")]\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长147mm、宽115mm、高34mm）基础体，然后对其2条特定边添加倒角（距离8mm，角度44度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(147, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(147, 0, 0), FreeCAD.Vector(147, 115, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(147, 115, 0), FreeCAD.Vector(0, 115, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 115, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 34\ndoc.recompute()\n# 选择特定边\nedges = []\nfor i in [11, 9]:\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 8\nchamfer.Angle = 44\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径46mm、高58mm）基础体，然后对其底面边缘添加倒角（距离7mm，角度37度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 46), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 58\ndoc.recompute()\n# 选择底面边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge1\")]  # 假设底面边缘索引为1\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 7\nchamfer.Angle = 37\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长92mm、宽84mm、高42mm）基础体，然后对其顶面的四条边添加倒角（距离9mm，角度49度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(92, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(92, 0, 0), FreeCAD.Vector(92, 84, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(92, 84, 0), FreeCAD.Vector(0, 84, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 84, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 42\ndoc.recompute()\n# 选择顶面的四条边\nedges = []\nfor i in range(9, 13):  # 假设顶面的边索引为9-12\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 9\nchamfer.Angle = 49\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径67mm、高34mm）基础体，然后对其所有边添加圆角（半径3mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 67), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 34\ndoc.recompute()\n# 选择所有边\nedges = []\nfor i in range(1, 4):  # 圆柱体有3条边（上下圆周和侧面）\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径42mm、高90mm）基础体，然后对其顶面边缘添加倒角（距离4mm，角度40度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 42), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 90\ndoc.recompute()\n# 选择顶面边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge3\")]  # 假设顶面边缘索引为3\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 4\nchamfer.Angle = 40\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长96mm、宽117mm、高69mm）基础体，然后对其4条特定边添加倒角（距离6mm，角度56度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(96, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(96, 0, 0), FreeCAD.Vector(96, 117, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(96, 117, 0), FreeCAD.Vector(0, 117, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 117, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 69\ndoc.recompute()\n# 选择特定边\nedges = []\nfor i in [5, 4, 2, 3]:\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 6\nchamfer.Angle = 56\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长139mm、宽70mm、高80mm）基础体，然后对其所有边添加圆角（半径5mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(139, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(139, 0, 0), FreeCAD.Vector(139, 70, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(139, 70, 0), FreeCAD.Vector(0, 70, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 70, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 80\ndoc.recompute()\n# 选择所有边\nedges = []\nfor i in range(1, 13):  # 长方体有12条边\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 5\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长123mm、宽81mm、高65mm）基础体，然后对其顶面的四条边添加圆角（半径10mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(123, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(123, 0, 0), FreeCAD.Vector(123, 81, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(123, 81, 0), FreeCAD.Vector(0, 81, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 81, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 65\ndoc.recompute()\n# 选择顶面的四条边\nedges = []\nfor i in range(9, 13):  # 假设顶面的边索引为9-12\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 10\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长136mm、宽84mm、高48mm）基础体，然后对其所有边添加圆角（半径6mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(136, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(136, 0, 0), FreeCAD.Vector(136, 84, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(136, 84, 0), FreeCAD.Vector(0, 84, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 84, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 48\ndoc.recompute()\n# 选择所有边\nedges = []\nfor i in range(1, 13):  # 长方体有12条边\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 6\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长73mm、宽63mm、高76mm）基础体，然后对其3条特定边添加倒角（距离5mm，角度40度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(73, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(73, 0, 0), FreeCAD.Vector(73, 63, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(73, 63, 0), FreeCAD.Vector(0, 63, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 63, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 76\ndoc.recompute()\n# 选择特定边\nedges = []\nfor i in [12, 3, 5]:\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 5\nchamfer.Angle = 40\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径48mm、高60mm）基础体，然后对其特定边缘添加倒角（距离8mm，角度35度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 48), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 60\ndoc.recompute()\n# 选择特定边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge3\")]\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 8\nchamfer.Angle = 35\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长81mm、宽53mm、高95mm）基础体，然后对其四条垂直边添加倒角（距离8mm，角度39度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(81, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(81, 0, 0), FreeCAD.Vector(81, 53, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(81, 53, 0), FreeCAD.Vector(0, 53, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 53, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 95\ndoc.recompute()\n# 选择四条垂直边\nedges = []\nfor i in range(1, 5):  # 假设垂直边索引为1-4\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 8\nchamfer.Angle = 39\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径80mm、高87mm）基础体，然后对其底面边缘添加倒角（距离10mm，角度30度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 80), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 87\ndoc.recompute()\n# 选择底面边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge1\")]  # 假设底面边缘索引为1\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 10\nchamfer.Angle = 30\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径58mm、高37mm）基础体，然后对其所有边添加圆角（半径6mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 58), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 37\ndoc.recompute()\n# 选择所有边\nedges = []\nfor i in range(1, 4):  # 圆柱体有3条边（上下圆周和侧面）\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 6\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径39mm、高65mm）基础体，然后对其底面边缘添加圆角（半径8mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 39), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 65\ndoc.recompute()\n# 选择底面边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge1\")]  # 假设底面边缘索引为1\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 8\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径78mm、高36mm）基础体，然后对其底面边缘添加圆角（半径9mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 78), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 36\ndoc.recompute()\n# 选择底面边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge1\")]  # 假设底面边缘索引为1\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 9\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径65mm、高77mm）基础体，然后对其底面边缘添加倒角（距离8mm，角度47度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Chamfer\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 65), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 77\ndoc.recompute()\n# 选择底面边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge1\")]  # 假设底面边缘索引为1\n# 创建倒角特征\nchamfer = doc.addObject(\"PartDesign::Chamfer\", \"Chamfer\")\nchamfer.Base = (doc.getObject(\"BasePad\"), edges)\nchamfer.Size = 8\nchamfer.Angle = 47\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个圆柱体（半径66mm、高71mm）基础体，然后对其顶面边缘添加圆角（半径3mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 66), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 71\ndoc.recompute()\n# 选择顶面边缘\nedges = [(doc.getObject(\"BasePad\"), \"Edge3\")]  # 假设顶面边缘索引为3\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 3\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长53mm、宽56mm、高45mm）基础体，然后对其3条特定边添加圆角（半径6mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Fillet\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(53, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(53, 0, 0), FreeCAD.Vector(53, 56, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(53, 56, 0), FreeCAD.Vector(0, 56, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 56, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 45\ndoc.recompute()\n# 选择特定边\nedges = []\nfor i in [3, 4, 10]:\n    edges.append((doc.getObject(\"BasePad\"), \"Edge\" + str(i)))\n# 创建圆角特征\nfillet = doc.addObject(\"PartDesign::Fillet\", \"Fillet\")\nfillet.Base = (doc.getObject(\"BasePad\"), edges)\nfillet.Radius = 6\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径65mm、高48mm，凹槽半径10mm），然后对凹槽特征进行线性阵列（Y方向，间距16mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 65), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 48\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(27, 0, 0), FreeCAD.Vector(0, 0, 1), 10), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 24\ndoc.recompute()\n# 创建Y方向线性阵列\npattern = doc.addObject(\"PartDesign::LinearPattern\", \"Pattern\")\npattern.Direction = (doc.getObject(\"BasePad\"), [\"Edge4\"])  # Y方向边\npattern.Occurrences = 4\npattern.Length = 48\npattern.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径68mm、高77mm，凹槽半径9mm），然后对凹槽特征进行线性阵列（Y方向，间距36mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 68), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 77\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(28, 0, 0), FreeCAD.Vector(0, 0, 1), 9), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 38\ndoc.recompute()\n# 创建Y方向线性阵列\npattern = doc.addObject(\"PartDesign::LinearPattern\", \"Pattern\")\npattern.Direction = (doc.getObject(\"BasePad\"), [\"Edge4\"])  # Y方向边\npattern.Occurrences = 5\npattern.Length = 144\npattern.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径35mm、高55mm，凹槽半径7mm），然后对凹槽特征进行线性阵列（Y方向，间距22mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 35), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 55\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(22, 0, 0), FreeCAD.Vector(0, 0, 1), 7), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 27\ndoc.recompute()\n# 创建Y方向线性阵列\npattern = doc.addObject(\"PartDesign::LinearPattern\", \"Pattern\")\npattern.Direction = (doc.getObject(\"BasePad\"), [\"Edge4\"])  # Y方向边\npattern.Occurrences = 3\npattern.Length = 44\npattern.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长124mm、宽147mm、高73mm，孔半径9mm），然后对孔特征进行线性阵列（X方向和Y方向（X方向5个，Y方向4个），间距39mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(124, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(124, 0, 0), FreeCAD.Vector(124, 147, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(124, 147, 0), FreeCAD.Vector(0, 147, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 147, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 73\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(84, 37, 0), FreeCAD.Vector(0, 0, 1), 9), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建X方向线性阵列\npattern1 = doc.addObject(\"PartDesign::LinearPattern\", \"PatternX\")\npattern1.Direction = (doc.getObject(\"BasePad\"), [\"Edge2\"])  # X方向边\npattern1.Occurrences = 5\npattern1.Length = 156\npattern1.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n# 创建Y方向线性阵列\npattern2 = doc.addObject(\"PartDesign::LinearPattern\", \"PatternY\")\npattern2.Direction = (doc.getObject(\"BasePad\"), [\"Edge4\"])  # Y方向边\npattern2.Occurrences = 4\npattern2.Length = 54\npattern2.OriginalFeature = pattern1\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径50mm、高68mm，凹槽半径9mm），然后对凹槽特征进行线性阵列（X方向和Y方向（X方向6个，Y方向4个），间距18mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 50), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 68\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(20, 0, 0), FreeCAD.Vector(0, 0, 1), 9), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 34\ndoc.recompute()\n# 创建X方向线性阵列\npattern1 = doc.addObject(\"PartDesign::LinearPattern\", \"PatternX\")\npattern1.Direction = (doc.getObject(\"BasePad\"), [\"Edge2\"])  # X方向边\npattern1.Occurrences = 6\npattern1.Length = 90\npattern1.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n# 创建Y方向线性阵列\npattern2 = doc.addObject(\"PartDesign::LinearPattern\", \"PatternY\")\npattern2.Direction = (doc.getObject(\"BasePad\"), [\"Edge4\"])  # Y方向边\npattern2.Occurrences = 4\npattern2.Length = 54\npattern2.OriginalFeature = pattern1\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长69mm、宽58mm、高45mm，孔半径8mm），然后对孔特征进行线性阵列（X方向和Y方向（X方向6个，Y方向3个），间距37mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(69, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(69, 0, 0), FreeCAD.Vector(69, 58, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(69, 58, 0), FreeCAD.Vector(0, 58, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 58, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 45\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(27, 23, 0), FreeCAD.Vector(0, 0, 1), 8), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建X方向线性阵列\npattern1 = doc.addObject(\"PartDesign::LinearPattern\", \"PatternX\")\npattern1.Direction = (doc.getObject(\"BasePad\"), [\"Edge2\"])  # X方向边\npattern1.Occurrences = 6\npattern1.Length = 185\npattern1.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n# 创建Y方向线性阵列\npattern2 = doc.addObject(\"PartDesign::LinearPattern\", \"PatternY\")\npattern2.Direction = (doc.getObject(\"BasePad\"), [\"Edge4\"])  # Y方向边\npattern2.Occurrences = 3\npattern2.Length = 66\npattern2.OriginalFeature = pattern1\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径43mm、高37mm，凹槽半径13mm），然后对凹槽特征进行镜像（关于XZ平面）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 43), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 37\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(20, 0, 0), FreeCAD.Vector(0, 0, 1), 13), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 18\ndoc.recompute()\n# 创建关于XZ平面的镜像\nmirror = doc.addObject(\"PartDesign::Mirrored\", \"Mirror\")\nmirror.MirrorPlane = (doc.getObject(\"BasePad\"), [\"Face4\"])  # 侧面作为镜像平面\nmirror.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径37mm、高37mm，凹槽半径7mm），然后对凹槽特征进行极坐标阵列（12个，完整圆周）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 37), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 37\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(12, 0, 0), FreeCAD.Vector(0, 0, 1), 7), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 18\ndoc.recompute()\n# 创建极坐标阵列\npattern = doc.addObject(\"PartDesign::PolarPattern\", \"Pattern\")\npattern.Axis = (doc.getObject(\"BasePad\"), [\"Face6\", \"Face5\"])  # 顶面和底面的法线作为轴\npattern.Occurrences = 12\npattern.Angle = 360\npattern.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长95mm、宽59mm、高54mm，孔半径9mm），然后对孔特征进行线性阵列（X方向和Y方向（X方向5个，Y方向4个），间距30mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(95, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(95, 0, 0), FreeCAD.Vector(95, 59, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(95, 59, 0), FreeCAD.Vector(0, 59, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 59, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 54\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(62, 25, 0), FreeCAD.Vector(0, 0, 1), 9), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建X方向线性阵列\npattern1 = doc.addObject(\"PartDesign::LinearPattern\", \"PatternX\")\npattern1.Direction = (doc.getObject(\"BasePad\"), [\"Edge2\"])  # X方向边\npattern1.Occurrences = 5\npattern1.Length = 120\npattern1.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n# 创建Y方向线性阵列\npattern2 = doc.addObject(\"PartDesign::LinearPattern\", \"PatternY\")\npattern2.Direction = (doc.getObject(\"BasePad\"), [\"Edge4\"])  # Y方向边\npattern2.Occurrences = 4\npattern2.Length = 99\npattern2.OriginalFeature = pattern1\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长129mm、宽50mm、高39mm，孔半径9mm），然后对孔特征进行线性阵列（Y方向，间距22mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(129, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(129, 0, 0), FreeCAD.Vector(129, 50, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(129, 50, 0), FreeCAD.Vector(0, 50, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 50, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 39\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(91, 27, 0), FreeCAD.Vector(0, 0, 1), 9), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建Y方向线性阵列\npattern = doc.addObject(\"PartDesign::LinearPattern\", \"Pattern\")\npattern.Direction = (doc.getObject(\"BasePad\"), [\"Edge4\"])  # Y方向边\npattern.Occurrences = 5\npattern.Length = 88\npattern.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径48mm、高59mm，凹槽半径12mm），然后对凹槽特征进行极坐标阵列（7个，完整圆周）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 48), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 59\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(20, 0, 0), FreeCAD.Vector(0, 0, 1), 12), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 29\ndoc.recompute()\n# 创建极坐标阵列\npattern = doc.addObject(\"PartDesign::PolarPattern\", \"Pattern\")\npattern.Axis = (doc.getObject(\"BasePad\"), [\"Face6\", \"Face5\"])  # 顶面和底面的法线作为轴\npattern.Occurrences = 7\npattern.Angle = 360\npattern.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径42mm、高60mm，凹槽半径6mm），然后对凹槽特征进行极坐标阵列（11个，完整圆周）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 42), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 60\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(24, 0, 0), FreeCAD.Vector(0, 0, 1), 6), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 30\ndoc.recompute()\n# 创建极坐标阵列\npattern = doc.addObject(\"PartDesign::PolarPattern\", \"Pattern\")\npattern.Axis = (doc.getObject(\"BasePad\"), [\"Face6\", \"Face5\"])  # 顶面和底面的法线作为轴\npattern.Occurrences = 11\npattern.Angle = 360\npattern.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径59mm、高61mm，凹槽半径11mm），然后对凹槽特征进行镜像（关于XY平面）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 59), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 61\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(33, 0, 0), FreeCAD.Vector(0, 0, 1), 11), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 30\ndoc.recompute()\n# 创建关于XY平面的镜像\nmirror = doc.addObject(\"PartDesign::Mirrored\", \"Mirror\")\nmirror.MirrorPlane = (doc.getObject(\"BasePad\"), [\"Face5\"])  # 底面作为镜像平面\nmirror.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长111mm、宽71mm、高31mm，孔半径13mm），然后对孔特征进行镜像（关于XY平面）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(111, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(111, 0, 0), FreeCAD.Vector(111, 71, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(111, 71, 0), FreeCAD.Vector(0, 71, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 71, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 31\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(67, 22, 0), FreeCAD.Vector(0, 0, 1), 13), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建关于XY平面的镜像\nmirror = doc.addObject(\"PartDesign::Mirrored\", \"Mirror\")\nmirror.MirrorPlane = (doc.getObject(\"BasePad\"), [\"Face5\"])  # 底面作为镜像平面\nmirror.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径75mm、高42mm，凹槽半径10mm），然后对凹槽特征进行镜像（关于XZ平面）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 75), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 42\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(40, 0, 0), FreeCAD.Vector(0, 0, 1), 10), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 21\ndoc.recompute()\n# 创建关于XZ平面的镜像\nmirror = doc.addObject(\"PartDesign::Mirrored\", \"Mirror\")\nmirror.MirrorPlane = (doc.getObject(\"BasePad\"), [\"Face4\"])  # 侧面作为镜像平面\nmirror.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径75mm、高63mm，凹槽半径14mm），然后对凹槽特征进行极坐标阵列（4个，完整圆周）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 75), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 63\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(27, 0, 0), FreeCAD.Vector(0, 0, 1), 14), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 31\ndoc.recompute()\n# 创建极坐标阵列\npattern = doc.addObject(\"PartDesign::PolarPattern\", \"Pattern\")\npattern.Axis = (doc.getObject(\"BasePad\"), [\"Face6\", \"Face5\"])  # 顶面和底面的法线作为轴\npattern.Occurrences = 4\npattern.Angle = 360\npattern.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径77mm、高59mm，凹槽半径6mm），然后对凹槽特征进行镜像（关于XY平面）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 77), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 59\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(29, 0, 0), FreeCAD.Vector(0, 0, 1), 6), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 29\ndoc.recompute()\n# 创建关于XY平面的镜像\nmirror = doc.addObject(\"PartDesign::Mirrored\", \"Mirror\")\nmirror.MirrorPlane = (doc.getObject(\"BasePad\"), [\"Face5\"])  # 底面作为镜像平面\nmirror.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径67mm、高33mm，凹槽半径5mm），然后对凹槽特征进行线性阵列（Y方向，间距39mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 67), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 33\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(27, 0, 0), FreeCAD.Vector(0, 0, 1), 5), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 16\ndoc.recompute()\n# 创建Y方向线性阵列\npattern = doc.addObject(\"PartDesign::LinearPattern\", \"Pattern\")\npattern.Direction = (doc.getObject(\"BasePad\"), [\"Edge4\"])  # Y方向边\npattern.Occurrences = 3\npattern.Length = 78\npattern.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长139mm、宽116mm、高34mm，孔半径8mm），然后对孔特征进行线性阵列（X方向和Y方向（X方向3个，Y方向2个），间距24mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(139, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(139, 0, 0), FreeCAD.Vector(139, 116, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(139, 116, 0), FreeCAD.Vector(0, 116, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 116, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 34\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(100, 39, 0), FreeCAD.Vector(0, 0, 1), 8), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建X方向线性阵列\npattern1 = doc.addObject(\"PartDesign::LinearPattern\", \"PatternX\")\npattern1.Direction = (doc.getObject(\"BasePad\"), [\"Edge2\"])  # X方向边\npattern1.Occurrences = 3\npattern1.Length = 48\npattern1.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n# 创建Y方向线性阵列\npattern2 = doc.addObject(\"PartDesign::LinearPattern\", \"PatternY\")\npattern2.Direction = (doc.getObject(\"BasePad\"), [\"Edge4\"])  # Y方向边\npattern2.Occurrences = 2\npattern2.Length = 32\npattern2.OriginalFeature = pattern1\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径71mm、高57mm，凹槽半径8mm），然后对凹槽特征进行线性阵列（X方向和Y方向（X方向6个，Y方向2个），间距33mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 71), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 57\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(24, 0, 0), FreeCAD.Vector(0, 0, 1), 8), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 28\ndoc.recompute()\n# 创建X方向线性阵列\npattern1 = doc.addObject(\"PartDesign::LinearPattern\", \"PatternX\")\npattern1.Direction = (doc.getObject(\"BasePad\"), [\"Edge2\"])  # X方向边\npattern1.Occurrences = 6\npattern1.Length = 165\npattern1.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n# 创建Y方向线性阵列\npattern2 = doc.addObject(\"PartDesign::LinearPattern\", \"PatternY\")\npattern2.Direction = (doc.getObject(\"BasePad\"), [\"Edge4\"])  # Y方向边\npattern2.Occurrences = 2\npattern2.Length = 22\npattern2.OriginalFeature = pattern1\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长148mm、宽150mm、高47mm，孔半径7mm），然后对孔特征进行镜像（关于XZ平面）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(148, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(148, 0, 0), FreeCAD.Vector(148, 150, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(148, 150, 0), FreeCAD.Vector(0, 150, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 150, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 47\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(94, 112, 0), FreeCAD.Vector(0, 0, 1), 7), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建关于XZ平面的镜像\nmirror = doc.addObject(\"PartDesign::Mirrored\", \"Mirror\")\nmirror.MirrorPlane = (doc.getObject(\"BasePad\"), [\"Face4\"])  # 侧面作为镜像平面\nmirror.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径74mm、高34mm，凹槽半径5mm），然后对凹槽特征进行镜像（关于YZ平面）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 74), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 34\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(42, 0, 0), FreeCAD.Vector(0, 0, 1), 5), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 17\ndoc.recompute()\n# 创建关于YZ平面的镜像\nmirror = doc.addObject(\"PartDesign::Mirrored\", \"Mirror\")\nmirror.MirrorPlane = (doc.getObject(\"BasePad\"), [\"Face3\"])  # 侧面作为镜像平面\nmirror.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长124mm、宽135mm、高58mm，孔半径6mm），然后对孔特征进行极坐标阵列（6个，完整圆周）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(124, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(124, 0, 0), FreeCAD.Vector(124, 135, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(124, 135, 0), FreeCAD.Vector(0, 135, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 135, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 58\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(37, 42, 0), FreeCAD.Vector(0, 0, 1), 6), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建极坐标阵列\npattern = doc.addObject(\"PartDesign::PolarPattern\", \"Pattern\")\npattern.Axis = (doc.getObject(\"BasePad\"), [\"Face6\", \"Face5\"])  # 顶面和底面的法线作为轴\npattern.Occurrences = 6\npattern.Angle = 360\npattern.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径51mm、高60mm，凹槽半径7mm），然后对凹槽特征进行镜像（关于XZ平面）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 51), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 60\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(19, 0, 0), FreeCAD.Vector(0, 0, 1), 7), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 30\ndoc.recompute()\n# 创建关于XZ平面的镜像\nmirror = doc.addObject(\"PartDesign::Mirrored\", \"Mirror\")\nmirror.MirrorPlane = (doc.getObject(\"BasePad\"), [\"Face4\"])  # 侧面作为镜像平面\nmirror.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径46mm、高45mm，凹槽半径8mm），然后对凹槽特征进行极坐标阵列（7个，完整圆周）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 46), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 45\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(23, 0, 0), FreeCAD.Vector(0, 0, 1), 8), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 22\ndoc.recompute()\n# 创建极坐标阵列\npattern = doc.addObject(\"PartDesign::PolarPattern\", \"Pattern\")\npattern.Axis = (doc.getObject(\"BasePad\"), [\"Face6\", \"Face5\"])  # 顶面和底面的法线作为轴\npattern.Occurrences = 7\npattern.Angle = 360\npattern.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长144mm、宽125mm、高57mm，孔半径13mm），然后对孔特征进行线性阵列（Y方向，间距22mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(144, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(144, 0, 0), FreeCAD.Vector(144, 125, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(144, 125, 0), FreeCAD.Vector(0, 125, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 125, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 57\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(39, 37, 0), FreeCAD.Vector(0, 0, 1), 13), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建Y方向线性阵列\npattern = doc.addObject(\"PartDesign::LinearPattern\", \"Pattern\")\npattern.Direction = (doc.getObject(\"BasePad\"), [\"Edge4\"])  # Y方向边\npattern.Occurrences = 5\npattern.Length = 88\npattern.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长120mm、宽67mm、高68mm，孔半径8mm），然后对孔特征进行极坐标阵列（4个，完整圆周）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(120, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(120, 0, 0), FreeCAD.Vector(120, 67, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(120, 67, 0), FreeCAD.Vector(0, 67, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 67, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 68\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(57, 46, 0), FreeCAD.Vector(0, 0, 1), 8), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建极坐标阵列\npattern = doc.addObject(\"PartDesign::PolarPattern\", \"Pattern\")\npattern.Axis = (doc.getObject(\"BasePad\"), [\"Face6\", \"Face5\"])  # 顶面和底面的法线作为轴\npattern.Occurrences = 4\npattern.Angle = 360\npattern.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长143mm、宽131mm、高45mm，孔半径6mm），然后对孔特征进行线性阵列（Y方向，间距30mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(143, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(143, 0, 0), FreeCAD.Vector(143, 131, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(143, 131, 0), FreeCAD.Vector(0, 131, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 131, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 45\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(46, 68, 0), FreeCAD.Vector(0, 0, 1), 6), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建Y方向线性阵列\npattern = doc.addObject(\"PartDesign::LinearPattern\", \"Pattern\")\npattern.Direction = (doc.getObject(\"BasePad\"), [\"Edge4\"])  # Y方向边\npattern.Occurrences = 6\npattern.Length = 150\npattern.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径53mm、高57mm，凹槽半径10mm），然后对凹槽特征进行镜像（关于XZ平面）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 53), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 57\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(26, 0, 0), FreeCAD.Vector(0, 0, 1), 10), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 28\ndoc.recompute()\n# 创建关于XZ平面的镜像\nmirror = doc.addObject(\"PartDesign::Mirrored\", \"Mirror\")\nmirror.MirrorPlane = (doc.getObject(\"BasePad\"), [\"Face4\"])  # 侧面作为镜像平面\nmirror.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长95mm、宽79mm、高37mm，孔半径6mm），然后对孔特征进行镜像（关于XY平面）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(95, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(95, 0, 0), FreeCAD.Vector(95, 79, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(95, 79, 0), FreeCAD.Vector(0, 79, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 79, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 37\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(59, 30, 0), FreeCAD.Vector(0, 0, 1), 6), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建关于XY平面的镜像\nmirror = doc.addObject(\"PartDesign::Mirrored\", \"Mirror\")\nmirror.MirrorPlane = (doc.getObject(\"BasePad\"), [\"Face5\"])  # 底面作为镜像平面\nmirror.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径61mm、高79mm，凹槽半径7mm），然后对凹槽特征进行镜像（关于XZ平面）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 61), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 79\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(29, 0, 0), FreeCAD.Vector(0, 0, 1), 7), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 39\ndoc.recompute()\n# 创建关于XZ平面的镜像\nmirror = doc.addObject(\"PartDesign::Mirrored\", \"Mirror\")\nmirror.MirrorPlane = (doc.getObject(\"BasePad\"), [\"Face4\"])  # 侧面作为镜像平面\nmirror.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长93mm、宽59mm、高60mm，孔半径13mm），然后对孔特征进行极坐标阵列（11个，完整圆周）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(93, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(93, 0, 0), FreeCAD.Vector(93, 59, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(93, 59, 0), FreeCAD.Vector(0, 59, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 59, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 60\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(44, 17, 0), FreeCAD.Vector(0, 0, 1), 13), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建极坐标阵列\npattern = doc.addObject(\"PartDesign::PolarPattern\", \"Pattern\")\npattern.Axis = (doc.getObject(\"BasePad\"), [\"Face6\", \"Face5\"])  # 顶面和底面的法线作为轴\npattern.Occurrences = 11\npattern.Angle = 360\npattern.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长141mm、宽126mm、高52mm，孔半径12mm），然后对孔特征进行极坐标阵列（12个，完整圆周）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(141, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(141, 0, 0), FreeCAD.Vector(141, 126, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(141, 126, 0), FreeCAD.Vector(0, 126, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 126, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 52\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(103, 65, 0), FreeCAD.Vector(0, 0, 1), 12), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建极坐标阵列\npattern = doc.addObject(\"PartDesign::PolarPattern\", \"Pattern\")\npattern.Axis = (doc.getObject(\"BasePad\"), [\"Face6\", \"Face5\"])  # 顶面和底面的法线作为轴\npattern.Occurrences = 12\npattern.Angle = 360\npattern.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径30mm、高77mm，凹槽半径7mm），然后对凹槽特征进行线性阵列（X方向和Y方向（X方向5个，Y方向2个），间距15mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 30), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 77\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(10, 0, 0), FreeCAD.Vector(0, 0, 1), 7), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 38\ndoc.recompute()\n# 创建X方向线性阵列\npattern1 = doc.addObject(\"PartDesign::LinearPattern\", \"PatternX\")\npattern1.Direction = (doc.getObject(\"BasePad\"), [\"Edge2\"])  # X方向边\npattern1.Occurrences = 5\npattern1.Length = 60\npattern1.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n# 创建Y方向线性阵列\npattern2 = doc.addObject(\"PartDesign::LinearPattern\", \"PatternY\")\npattern2.Direction = (doc.getObject(\"BasePad\"), [\"Edge4\"])  # Y方向边\npattern2.Occurrences = 2\npattern2.Length = 22\npattern2.OriginalFeature = pattern1\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长85mm、宽128mm、高46mm，孔半径14mm），然后对孔特征进行镜像（关于XY平面）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(85, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(85, 0, 0), FreeCAD.Vector(85, 128, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(85, 128, 0), FreeCAD.Vector(0, 128, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 128, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 46\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(29, 78, 0), FreeCAD.Vector(0, 0, 1), 14), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建关于XY平面的镜像\nmirror = doc.addObject(\"PartDesign::Mirrored\", \"Mirror\")\nmirror.MirrorPlane = (doc.getObject(\"BasePad\"), [\"Face5\"])  # 底面作为镜像平面\nmirror.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长144mm、宽68mm、高74mm，孔半径11mm），然后对孔特征进行镜像（关于YZ平面）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(144, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(144, 0, 0), FreeCAD.Vector(144, 68, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(144, 68, 0), FreeCAD.Vector(0, 68, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 68, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 74\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(79, 41, 0), FreeCAD.Vector(0, 0, 1), 11), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建关于YZ平面的镜像\nmirror = doc.addObject(\"PartDesign::Mirrored\", \"Mirror\")\nmirror.MirrorPlane = (doc.getObject(\"BasePad\"), [\"Face3\"])  # 侧面作为镜像平面\nmirror.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径64mm、高54mm，凹槽半径15mm），然后对凹槽特征进行镜像（关于XZ平面）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 64), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 54\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(31, 0, 0), FreeCAD.Vector(0, 0, 1), 15), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 27\ndoc.recompute()\n# 创建关于XZ平面的镜像\nmirror = doc.addObject(\"PartDesign::Mirrored\", \"Mirror\")\nmirror.MirrorPlane = (doc.getObject(\"BasePad\"), [\"Face4\"])  # 侧面作为镜像平面\nmirror.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径52mm、高56mm，凹槽半径9mm），然后对凹槽特征进行线性阵列（Y方向，间距37mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 52), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 56\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(29, 0, 0), FreeCAD.Vector(0, 0, 1), 9), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 28\ndoc.recompute()\n# 创建Y方向线性阵列\npattern = doc.addObject(\"PartDesign::LinearPattern\", \"Pattern\")\npattern.Direction = (doc.getObject(\"BasePad\"), [\"Edge4\"])  # Y方向边\npattern.Occurrences = 5\npattern.Length = 148\npattern.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长136mm、宽146mm、高76mm，孔半径15mm），然后对孔特征进行线性阵列（X方向，间距15mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(136, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(136, 0, 0), FreeCAD.Vector(136, 146, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(136, 146, 0), FreeCAD.Vector(0, 146, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 146, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 76\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(48, 101, 0), FreeCAD.Vector(0, 0, 1), 15), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建X方向线性阵列\npattern = doc.addObject(\"PartDesign::LinearPattern\", \"Pattern\")\npattern.Direction = (doc.getObject(\"BasePad\"), [\"Edge2\"])  # X方向边\npattern.Occurrences = 5\npattern.Length = 60\npattern.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径55mm、高30mm，凹槽半径11mm），然后对凹槽特征进行线性阵列（X方向，间距23mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 55), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 30\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(25, 0, 0), FreeCAD.Vector(0, 0, 1), 11), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 15\ndoc.recompute()\n# 创建X方向线性阵列\npattern = doc.addObject(\"PartDesign::LinearPattern\", \"Pattern\")\npattern.Direction = (doc.getObject(\"BasePad\"), [\"Edge2\"])  # X方向边\npattern.Occurrences = 3\npattern.Length = 46\npattern.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长123mm、宽63mm、高77mm，孔半径7mm），然后对孔特征进行镜像（关于XY平面）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(123, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(123, 0, 0), FreeCAD.Vector(123, 63, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(123, 63, 0), FreeCAD.Vector(0, 63, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 63, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 77\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(87, 17, 0), FreeCAD.Vector(0, 0, 1), 7), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建关于XY平面的镜像\nmirror = doc.addObject(\"PartDesign::Mirrored\", \"Mirror\")\nmirror.MirrorPlane = (doc.getObject(\"BasePad\"), [\"Face5\"])  # 底面作为镜像平面\nmirror.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长130mm、宽145mm、高60mm，孔半径9mm），然后对孔特征进行线性阵列（Y方向，间距22mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(130, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(130, 0, 0), FreeCAD.Vector(130, 145, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(130, 145, 0), FreeCAD.Vector(0, 145, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 145, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 60\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(80, 106, 0), FreeCAD.Vector(0, 0, 1), 9), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建Y方向线性阵列\npattern = doc.addObject(\"PartDesign::LinearPattern\", \"Pattern\")\npattern.Direction = (doc.getObject(\"BasePad\"), [\"Edge4\"])  # Y方向边\npattern.Occurrences = 6\npattern.Length = 110\npattern.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径31mm、高67mm，凹槽半径6mm），然后对凹槽特征进行极坐标阵列（7个，完整圆周）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 31), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 67\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(17, 0, 0), FreeCAD.Vector(0, 0, 1), 6), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 33\ndoc.recompute()\n# 创建极坐标阵列\npattern = doc.addObject(\"PartDesign::PolarPattern\", \"Pattern\")\npattern.Axis = (doc.getObject(\"BasePad\"), [\"Face6\", \"Face5\"])  # 顶面和底面的法线作为轴\npattern.Occurrences = 7\npattern.Angle = 360\npattern.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长143mm、宽107mm、高54mm，孔半径10mm），然后对孔特征进行极坐标阵列（8个，完整圆周）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(143, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(143, 0, 0), FreeCAD.Vector(143, 107, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(143, 107, 0), FreeCAD.Vector(0, 107, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 107, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 54\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(89, 63, 0), FreeCAD.Vector(0, 0, 1), 10), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建极坐标阵列\npattern = doc.addObject(\"PartDesign::PolarPattern\", \"Pattern\")\npattern.Axis = (doc.getObject(\"BasePad\"), [\"Face6\", \"Face5\"])  # 顶面和底面的法线作为轴\npattern.Occurrences = 8\npattern.Angle = 360\npattern.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径39mm、高65mm，凹槽半径13mm），然后对凹槽特征进行镜像（关于XY平面）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 39), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 65\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(18, 0, 0), FreeCAD.Vector(0, 0, 1), 13), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 32\ndoc.recompute()\n# 创建关于XY平面的镜像\nmirror = doc.addObject(\"PartDesign::Mirrored\", \"Mirror\")\nmirror.MirrorPlane = (doc.getObject(\"BasePad\"), [\"Face5\"])  # 底面作为镜像平面\nmirror.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长69mm、宽55mm、高71mm，孔半径6mm），然后对孔特征进行线性阵列（X方向和Y方向（X方向5个，Y方向2个），间距40mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(69, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(69, 0, 0), FreeCAD.Vector(69, 55, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(69, 55, 0), FreeCAD.Vector(0, 55, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 55, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 71\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(29, 38, 0), FreeCAD.Vector(0, 0, 1), 6), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建X方向线性阵列\npattern1 = doc.addObject(\"PartDesign::LinearPattern\", \"PatternX\")\npattern1.Direction = (doc.getObject(\"BasePad\"), [\"Edge2\"])  # X方向边\npattern1.Occurrences = 5\npattern1.Length = 160\npattern1.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n# 创建Y方向线性阵列\npattern2 = doc.addObject(\"PartDesign::LinearPattern\", \"PatternY\")\npattern2.Direction = (doc.getObject(\"BasePad\"), [\"Edge4\"])  # Y方向边\npattern2.Occurrences = 2\npattern2.Length = 28\npattern2.OriginalFeature = pattern1\n\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径33mm、高53mm，凹槽半径15mm），然后对凹槽特征进行极坐标阵列（10个，完整圆周）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 33), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 53\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(14, 0, 0), FreeCAD.Vector(0, 0, 1), 15), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 26\ndoc.recompute()\n# 创建极坐标阵列\npattern = doc.addObject(\"PartDesign::PolarPattern\", \"Pattern\")\npattern.Axis = (doc.getObject(\"BasePad\"), [\"Face6\", \"Face5\"])  # 顶面和底面的法线作为轴\npattern.Occurrences = 10\npattern.Angle = 360\npattern.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带凹槽圆柱体（半径61mm、高39mm，凹槽半径9mm），然后对凹槽特征进行镜像（关于XY平面）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带凹槽圆柱体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础圆柱体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 61), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 39\ndoc.recompute()\n# 添加凹槽\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(26, 0, 0), FreeCAD.Vector(0, 0, 1), 9), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 19\ndoc.recompute()\n# 创建关于XY平面的镜像\nmirror = doc.addObject(\"PartDesign::Mirrored\", \"Mirror\")\nmirror.MirrorPlane = (doc.getObject(\"BasePad\"), [\"Face5\"])  # 底面作为镜像平面\nmirror.OriginalFeature = doc.getObject(\"pocket\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长75mm、宽53mm、高50mm，孔半径8mm），然后对孔特征进行线性阵列（X方向，间距16mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(75, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(75, 0, 0), FreeCAD.Vector(75, 53, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(75, 53, 0), FreeCAD.Vector(0, 53, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 53, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 50\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(27, 21, 0), FreeCAD.Vector(0, 0, 1), 8), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建X方向线性阵列\npattern = doc.addObject(\"PartDesign::LinearPattern\", \"Pattern\")\npattern.Direction = (doc.getObject(\"BasePad\"), [\"Edge2\"])  # X方向边\npattern.Occurrences = 5\npattern.Length = 64\npattern.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个带孔长方体（长122mm、宽93mm、高76mm，孔半径15mm），然后对孔特征进行极坐标阵列（9个，完整圆周）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher\ndoc = FreeCAD.newDocument(\"Pattern\")\n# 创建带孔长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 基础长方体\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(122, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(122, 0, 0), FreeCAD.Vector(122, 93, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(122, 93, 0), FreeCAD.Vector(0, 93, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 93, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 76\ndoc.recompute()\n# 添加孔\nhole_sketch = doc.addObject('Sketcher::SketchObject', 'HoleSketch')\nhole_sketch.addGeometry(Part.Circle(FreeCAD.Vector(61, 46, 0), FreeCAD.Vector(0, 0, 1), 15), False)\nhole_sketch.MapMode = \"FlatFace\"\nhole_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(hole_sketch)\nhole = doc.addObject(\"PartDesign::Pocket\", \"Hole\")\nhole.Profile = hole_sketch\nhole.Type = 1  # 通孔\ndoc.recompute()\n# 创建极坐标阵列\npattern = doc.addObject(\"PartDesign::PolarPattern\", \"Pattern\")\npattern.Axis = (doc.getObject(\"BasePad\"), [\"Face6\", \"Face5\"])  # 顶面和底面的法线作为轴\npattern.Occurrences = 9\npattern.Angle = 360\npattern.OriginalFeature = doc.getObject(\"hole\")\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有5边形截面（外接圆半径19mm）和正弦曲线路径（长度188mm、振幅21mm、3个周期）的扫描特征。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Sweep\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建5边形截面草图\nprofile = doc.addObject('Sketcher::SketchObject', 'Profile')\n# 计算顶点\nvertices = []\nfor i in range(5):\n    angle = 2 * math.pi * i / 5\n    x = 19 * math.cos(angle)\n    y = 19 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(5):\n    profile.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 5]), False)\nbody.addObject(profile)\n# 创建正弦曲线路径\npath = doc.addObject('Sketcher::SketchObject', 'Path')\n# 使用多段线近似正弦曲线\npoints = []\nsegments = 3 * 16  # 每个周期16个点\nfor i in range(segments + 1):\n    x = 188 * i / segments\n    y = 21 * math.sin(2 * math.pi * 3 * i / segments)\n    z = 0\n    points.append(FreeCAD.Vector(x, y, z))\n# 添加线段\nfor i in range(len(points) - 1):\n    path.addGeometry(Part.LineSegment(points[i], points[i+1]), False)\nbody.addObject(path)\n# 创建扫描特征\nsweep = doc.addObject(\"PartDesign::AdditivePipe\", \"Sweep\")\nsweep.Profile = profile\nsweep.Spine = path\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有3边形截面（外接圆半径16mm）和自定义路径的扫描特征。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Sweep\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建3边形截面草图\nprofile = doc.addObject('Sketcher::SketchObject', 'Profile')\n# 计算顶点\nvertices = []\nfor i in range(3):\n    angle = 2 * math.pi * i / 3\n    x = 16 * math.cos(angle)\n    y = 16 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(3):\n    profile.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 3]), False)\nbody.addObject(profile)\n# 创建自定义路径\npath = doc.addObject('Sketcher::SketchObject', 'Path')\n# 添加一系列连接的线段\npath.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(50, 20, 0)), False)\npath.addGeometry(Part.LineSegment(FreeCAD.Vector(50, 20, 0), FreeCAD.Vector(80, -30, 30)), False)\npath.addGeometry(Part.LineSegment(FreeCAD.Vector(80, -30, 30), FreeCAD.Vector(120, 0, 60)), False)\npath.addGeometry(Part.LineSegment(FreeCAD.Vector(120, 0, 60), FreeCAD.Vector(150, 40, 60)), False)\nbody.addObject(path)\n# 创建扫描特征\nsweep = doc.addObject(\"PartDesign::AdditivePipe\", \"Sweep\")\nsweep.Profile = profile\nsweep.Spine = path\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有4个变化形状的放样特征，截面之间有形状变化（圆形（半径29mm）到三角形（外接圆半径50mm）到正方形（边长60mm）到六边形（外接圆半径30mm））。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\nsection1.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 29), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nbody.addObject(section1)\n# 创建三角形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\n# 计算顶点\nvertices = []\nfor j in range(3):\n    angle = 2 * math.pi * j / 3\n    x = 50 * math.cos(angle)\n    y = 50 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(3):\n    section2.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 3]), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nbody.addObject(section2)\n# 创建正方形截面\nsection3 = doc.addObject('Sketcher::SketchObject', 'Section3')\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(-30.0, -30.0, 0), FreeCAD.Vector(30.0, -30.0, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(30.0, -30.0, 0), FreeCAD.Vector(30.0, 30.0, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(30.0, 30.0, 0), FreeCAD.Vector(-30.0, 30.0, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(-30.0, 30.0, 0), FreeCAD.Vector(-30.0, -30.0, 0)), False)\nsection3.Placement.Base = FreeCAD.Vector(0, 0, 60)\nbody.addObject(section3)\n# 创建六边形截面\nsection4 = doc.addObject('Sketcher::SketchObject', 'Section4')\n# 计算顶点\nvertices = []\nfor j in range(6):\n    angle = 2 * math.pi * j / 6\n    x = 30 * math.cos(angle)\n    y = 30 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(6):\n    section4.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 6]), False)\nsection4.Placement.Base = FreeCAD.Vector(0, 0, 90)\nbody.addObject(section4)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2, section3, section4]\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有矩形截面（宽16mm、高12mm）和螺旋线路径（半径46mm、高度142mm、5圈）的扫描特征。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Sweep\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形截面草图\nprofile = doc.addObject('Sketcher::SketchObject', 'Profile')\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(-8.0, -6.0, 0), FreeCAD.Vector(8.0, -6.0, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(8.0, -6.0, 0), FreeCAD.Vector(8.0, 6.0, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(8.0, 6.0, 0), FreeCAD.Vector(-8.0, 6.0, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(-8.0, 6.0, 0), FreeCAD.Vector(-8.0, -6.0, 0)), False)\nbody.addObject(profile)\n# 创建螺旋线路径\npath = doc.addObject('Sketcher::SketchObject', 'Path')\n# 使用多段线近似螺旋线\npoints = []\nsegments = 5 * 16  # 每圈16个点\nfor i in range(segments + 1):\n    angle = 2 * math.pi * i / 16\n    z = 142 * i / segments\n    x = 46 * math.cos(angle)\n    y = 46 * math.sin(angle)\n    points.append(FreeCAD.Vector(x, y, z))\n# 添加线段\nfor i in range(len(points) - 1):\n    path.addGeometry(Part.LineSegment(points[i], points[i+1]), False)\nbody.addObject(path)\n# 创建扫描特征\nsweep = doc.addObject(\"PartDesign::AdditivePipe\", \"Sweep\")\nsweep.Profile = profile\nsweep.Spine = path\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有圆形截面（半径17mm）和自定义路径的扫描特征。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Sweep\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形截面草图\nprofile = doc.addObject('Sketcher::SketchObject', 'Profile')\nprofile.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 17), False)\nbody.addObject(profile)\n# 创建自定义路径\npath = doc.addObject('Sketcher::SketchObject', 'Path')\n# 添加一系列连接的线段\npath.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(50, 20, 0)), False)\npath.addGeometry(Part.LineSegment(FreeCAD.Vector(50, 20, 0), FreeCAD.Vector(80, -30, 30)), False)\npath.addGeometry(Part.LineSegment(FreeCAD.Vector(80, -30, 30), FreeCAD.Vector(120, 0, 60)), False)\npath.addGeometry(Part.LineSegment(FreeCAD.Vector(120, 0, 60), FreeCAD.Vector(150, 40, 60)), False)\nbody.addObject(path)\n# 创建扫描特征\nsweep = doc.addObject(\"PartDesign::AdditivePipe\", \"Sweep\")\nsweep.Profile = profile\nsweep.Spine = path\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有4个4边形截面（外接圆半径34mm）的放样特征，截面之间有旋转变化（旋转0.0度、旋转60.0度、旋转120.0度、旋转180.0度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建第1个4边形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\n# 计算顶点\nvertices = []\nfor j in range(4):\n    angle = 2 * math.pi * j / 4\n    x = 34 * math.cos(angle)\n    y = 34 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(4):\n    section1.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 4]), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nsection1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0, 0, 1), 0.0)\nbody.addObject(section1)\n# 创建第2个4边形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\n# 计算顶点\nvertices = []\nfor j in range(4):\n    angle = 2 * math.pi * j / 4\n    x = 34 * math.cos(angle)\n    y = 34 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(4):\n    section2.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 4]), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nsection2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0, 0, 1), 60.0)\nbody.addObject(section2)\n# 创建第3个4边形截面\nsection3 = doc.addObject('Sketcher::SketchObject', 'Section3')\n# 计算顶点\nvertices = []\nfor j in range(4):\n    angle = 2 * math.pi * j / 4\n    x = 34 * math.cos(angle)\n    y = 34 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(4):\n    section3.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 4]), False)\nsection3.Placement.Base = FreeCAD.Vector(0, 0, 60)\nsection3.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0, 0, 1), 120.0)\nbody.addObject(section3)\n# 创建第4个4边形截面\nsection4 = doc.addObject('Sketcher::SketchObject', 'Section4')\n# 计算顶点\nvertices = []\nfor j in range(4):\n    angle = 2 * math.pi * j / 4\n    x = 34 * math.cos(angle)\n    y = 34 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(4):\n    section4.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 4]), False)\nsection4.Placement.Base = FreeCAD.Vector(0, 0, 90)\nsection4.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0, 0, 1), 180.0)\nbody.addObject(section4)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2, section3, section4]\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有3个变化形状的放样特征，截面之间有形状变化（正方形（边长78mm）到圆形（半径22mm）到三角形（外接圆半径41mm））。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建正方形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(-39.0, -39.0, 0), FreeCAD.Vector(39.0, -39.0, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(39.0, -39.0, 0), FreeCAD.Vector(39.0, 39.0, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(39.0, 39.0, 0), FreeCAD.Vector(-39.0, 39.0, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(-39.0, 39.0, 0), FreeCAD.Vector(-39.0, -39.0, 0)), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nbody.addObject(section1)\n# 创建圆形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\nsection2.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 22), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nbody.addObject(section2)\n# 创建三角形截面\nsection3 = doc.addObject('Sketcher::SketchObject', 'Section3')\n# 计算顶点\nvertices = []\nfor j in range(3):\n    angle = 2 * math.pi * j / 3\n    x = 41 * math.cos(angle)\n    y = 41 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(3):\n    section3.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 3]), False)\nsection3.Placement.Base = FreeCAD.Vector(0, 0, 60)\nbody.addObject(section3)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2, section3]\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有矩形截面（宽15mm、高13mm）和螺旋线路径（半径63mm、高度106mm、5圈）的扫描特征。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Sweep\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形截面草图\nprofile = doc.addObject('Sketcher::SketchObject', 'Profile')\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(-7.5, -6.5, 0), FreeCAD.Vector(7.5, -6.5, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(7.5, -6.5, 0), FreeCAD.Vector(7.5, 6.5, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(7.5, 6.5, 0), FreeCAD.Vector(-7.5, 6.5, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(-7.5, 6.5, 0), FreeCAD.Vector(-7.5, -6.5, 0)), False)\nbody.addObject(profile)\n# 创建螺旋线路径\npath = doc.addObject('Sketcher::SketchObject', 'Path')\n# 使用多段线近似螺旋线\npoints = []\nsegments = 5 * 16  # 每圈16个点\nfor i in range(segments + 1):\n    angle = 2 * math.pi * i / 16\n    z = 106 * i / segments\n    x = 63 * math.cos(angle)\n    y = 63 * math.sin(angle)\n    points.append(FreeCAD.Vector(x, y, z))\n# 添加线段\nfor i in range(len(points) - 1):\n    path.addGeometry(Part.LineSegment(points[i], points[i+1]), False)\nbody.addObject(path)\n# 创建扫描特征\nsweep = doc.addObject(\"PartDesign::AdditivePipe\", \"Sweep\")\nsweep.Profile = profile\nsweep.Spine = path\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有4边形截面（外接圆半径8mm）和螺旋线路径（半径37mm、高度102mm、3圈）的扫描特征。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Sweep\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建4边形截面草图\nprofile = doc.addObject('Sketcher::SketchObject', 'Profile')\n# 计算顶点\nvertices = []\nfor i in range(4):\n    angle = 2 * math.pi * i / 4\n    x = 8 * math.cos(angle)\n    y = 8 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(4):\n    profile.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 4]), False)\nbody.addObject(profile)\n# 创建螺旋线路径\npath = doc.addObject('Sketcher::SketchObject', 'Path')\n# 使用多段线近似螺旋线\npoints = []\nsegments = 3 * 16  # 每圈16个点\nfor i in range(segments + 1):\n    angle = 2 * math.pi * i / 16\n    z = 102 * i / segments\n    x = 37 * math.cos(angle)\n    y = 37 * math.sin(angle)\n    points.append(FreeCAD.Vector(x, y, z))\n# 添加线段\nfor i in range(len(points) - 1):\n    path.addGeometry(Part.LineSegment(points[i], points[i+1]), False)\nbody.addObject(path)\n# 创建扫描特征\nsweep = doc.addObject(\"PartDesign::AdditivePipe\", \"Sweep\")\nsweep.Profile = profile\nsweep.Spine = path\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有矩形截面（宽24mm、高26mm）和螺旋线路径（半径62mm、高度129mm、2圈）的扫描特征。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Sweep\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形截面草图\nprofile = doc.addObject('Sketcher::SketchObject', 'Profile')\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(-12.0, -13.0, 0), FreeCAD.Vector(12.0, -13.0, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(12.0, -13.0, 0), FreeCAD.Vector(12.0, 13.0, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(12.0, 13.0, 0), FreeCAD.Vector(-12.0, 13.0, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(-12.0, 13.0, 0), FreeCAD.Vector(-12.0, -13.0, 0)), False)\nbody.addObject(profile)\n# 创建螺旋线路径\npath = doc.addObject('Sketcher::SketchObject', 'Path')\n# 使用多段线近似螺旋线\npoints = []\nsegments = 2 * 16  # 每圈16个点\nfor i in range(segments + 1):\n    angle = 2 * math.pi * i / 16\n    z = 129 * i / segments\n    x = 62 * math.cos(angle)\n    y = 62 * math.sin(angle)\n    points.append(FreeCAD.Vector(x, y, z))\n# 添加线段\nfor i in range(len(points) - 1):\n    path.addGeometry(Part.LineSegment(points[i], points[i+1]), False)\nbody.addObject(path)\n# 创建扫描特征\nsweep = doc.addObject(\"PartDesign::AdditivePipe\", \"Sweep\")\nsweep.Profile = profile\nsweep.Spine = path\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有4个正方形截面的放样特征，截面之间有尺寸变化（边长72mm、边长41mm、边长35mm、边长54mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建第1个正方形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(-36.0, -36.0, 0), FreeCAD.Vector(36.0, -36.0, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(36.0, -36.0, 0), FreeCAD.Vector(36.0, 36.0, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(36.0, 36.0, 0), FreeCAD.Vector(-36.0, 36.0, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(-36.0, 36.0, 0), FreeCAD.Vector(-36.0, -36.0, 0)), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nbody.addObject(section1)\n# 创建第2个正方形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(-20.5, -20.5, 0), FreeCAD.Vector(20.5, -20.5, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(20.5, -20.5, 0), FreeCAD.Vector(20.5, 20.5, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(20.5, 20.5, 0), FreeCAD.Vector(-20.5, 20.5, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(-20.5, 20.5, 0), FreeCAD.Vector(-20.5, -20.5, 0)), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nbody.addObject(section2)\n# 创建第3个正方形截面\nsection3 = doc.addObject('Sketcher::SketchObject', 'Section3')\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(-17.5, -17.5, 0), FreeCAD.Vector(17.5, -17.5, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(17.5, -17.5, 0), FreeCAD.Vector(17.5, 17.5, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(17.5, 17.5, 0), FreeCAD.Vector(-17.5, 17.5, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(-17.5, 17.5, 0), FreeCAD.Vector(-17.5, -17.5, 0)), False)\nsection3.Placement.Base = FreeCAD.Vector(0, 0, 60)\nbody.addObject(section3)\n# 创建第4个正方形截面\nsection4 = doc.addObject('Sketcher::SketchObject', 'Section4')\nsection4.addGeometry(Part.LineSegment(FreeCAD.Vector(-27.0, -27.0, 0), FreeCAD.Vector(27.0, -27.0, 0)), False)\nsection4.addGeometry(Part.LineSegment(FreeCAD.Vector(27.0, -27.0, 0), FreeCAD.Vector(27.0, 27.0, 0)), False)\nsection4.addGeometry(Part.LineSegment(FreeCAD.Vector(27.0, 27.0, 0), FreeCAD.Vector(-27.0, 27.0, 0)), False)\nsection4.addGeometry(Part.LineSegment(FreeCAD.Vector(-27.0, 27.0, 0), FreeCAD.Vector(-27.0, -27.0, 0)), False)\nsection4.Placement.Base = FreeCAD.Vector(0, 0, 90)\nbody.addObject(section4)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2, section3, section4]\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有2个正方形截面的放样特征，截面之间有尺寸变化（边长60mm、边长32mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建第1个正方形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(-30.0, -30.0, 0), FreeCAD.Vector(30.0, -30.0, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(30.0, -30.0, 0), FreeCAD.Vector(30.0, 30.0, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(30.0, 30.0, 0), FreeCAD.Vector(-30.0, 30.0, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(-30.0, 30.0, 0), FreeCAD.Vector(-30.0, -30.0, 0)), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nbody.addObject(section1)\n# 创建第2个正方形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(-16.0, -16.0, 0), FreeCAD.Vector(16.0, -16.0, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(16.0, -16.0, 0), FreeCAD.Vector(16.0, 16.0, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(16.0, 16.0, 0), FreeCAD.Vector(-16.0, 16.0, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(-16.0, 16.0, 0), FreeCAD.Vector(-16.0, -16.0, 0)), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nbody.addObject(section2)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2]\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有2个变化形状的放样特征，截面之间有形状变化（六边形（外接圆半径49mm）到正方形（边长69mm））。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建六边形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\n# 计算顶点\nvertices = []\nfor j in range(6):\n    angle = 2 * math.pi * j / 6\n    x = 49 * math.cos(angle)\n    y = 49 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(6):\n    section1.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 6]), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nbody.addObject(section1)\n# 创建正方形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(-34.5, -34.5, 0), FreeCAD.Vector(34.5, -34.5, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(34.5, -34.5, 0), FreeCAD.Vector(34.5, 34.5, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(34.5, 34.5, 0), FreeCAD.Vector(-34.5, 34.5, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(-34.5, 34.5, 0), FreeCAD.Vector(-34.5, -34.5, 0)), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nbody.addObject(section2)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2]\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有5边形截面（外接圆半径10mm）和螺旋线路径（半径53mm、高度135mm、4圈）的扫描特征。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Sweep\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建5边形截面草图\nprofile = doc.addObject('Sketcher::SketchObject', 'Profile')\n# 计算顶点\nvertices = []\nfor i in range(5):\n    angle = 2 * math.pi * i / 5\n    x = 10 * math.cos(angle)\n    y = 10 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(5):\n    profile.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 5]), False)\nbody.addObject(profile)\n# 创建螺旋线路径\npath = doc.addObject('Sketcher::SketchObject', 'Path')\n# 使用多段线近似螺旋线\npoints = []\nsegments = 4 * 16  # 每圈16个点\nfor i in range(segments + 1):\n    angle = 2 * math.pi * i / 16\n    z = 135 * i / segments\n    x = 53 * math.cos(angle)\n    y = 53 * math.sin(angle)\n    points.append(FreeCAD.Vector(x, y, z))\n# 添加线段\nfor i in range(len(points) - 1):\n    path.addGeometry(Part.LineSegment(points[i], points[i+1]), False)\nbody.addObject(path)\n# 创建扫描特征\nsweep = doc.addObject(\"PartDesign::AdditivePipe\", \"Sweep\")\nsweep.Profile = profile\nsweep.Spine = path\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有矩形截面（宽14mm、高30mm）和自定义路径的扫描特征。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Sweep\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形截面草图\nprofile = doc.addObject('Sketcher::SketchObject', 'Profile')\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(-7.0, -15.0, 0), FreeCAD.Vector(7.0, -15.0, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(7.0, -15.0, 0), FreeCAD.Vector(7.0, 15.0, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(7.0, 15.0, 0), FreeCAD.Vector(-7.0, 15.0, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(-7.0, 15.0, 0), FreeCAD.Vector(-7.0, -15.0, 0)), False)\nbody.addObject(profile)\n# 创建自定义路径\npath = doc.addObject('Sketcher::SketchObject', 'Path')\n# 添加一系列连接的线段\npath.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(50, 20, 0)), False)\npath.addGeometry(Part.LineSegment(FreeCAD.Vector(50, 20, 0), FreeCAD.Vector(80, -30, 30)), False)\npath.addGeometry(Part.LineSegment(FreeCAD.Vector(80, -30, 30), FreeCAD.Vector(120, 0, 60)), False)\npath.addGeometry(Part.LineSegment(FreeCAD.Vector(120, 0, 60), FreeCAD.Vector(150, 40, 60)), False)\nbody.addObject(path)\n# 创建扫描特征\nsweep = doc.addObject(\"PartDesign::AdditivePipe\", \"Sweep\")\nsweep.Profile = profile\nsweep.Spine = path\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有4个正方形截面的放样特征，截面之间有尺寸变化（边长71mm、边长24mm、边长59mm、边长50mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建第1个正方形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(-35.5, -35.5, 0), FreeCAD.Vector(35.5, -35.5, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(35.5, -35.5, 0), FreeCAD.Vector(35.5, 35.5, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(35.5, 35.5, 0), FreeCAD.Vector(-35.5, 35.5, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(-35.5, 35.5, 0), FreeCAD.Vector(-35.5, -35.5, 0)), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nbody.addObject(section1)\n# 创建第2个正方形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(-12.0, -12.0, 0), FreeCAD.Vector(12.0, -12.0, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(12.0, -12.0, 0), FreeCAD.Vector(12.0, 12.0, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(12.0, 12.0, 0), FreeCAD.Vector(-12.0, 12.0, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(-12.0, 12.0, 0), FreeCAD.Vector(-12.0, -12.0, 0)), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nbody.addObject(section2)\n# 创建第3个正方形截面\nsection3 = doc.addObject('Sketcher::SketchObject', 'Section3')\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(-29.5, -29.5, 0), FreeCAD.Vector(29.5, -29.5, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(29.5, -29.5, 0), FreeCAD.Vector(29.5, 29.5, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(29.5, 29.5, 0), FreeCAD.Vector(-29.5, 29.5, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(-29.5, 29.5, 0), FreeCAD.Vector(-29.5, -29.5, 0)), False)\nsection3.Placement.Base = FreeCAD.Vector(0, 0, 60)\nbody.addObject(section3)\n# 创建第4个正方形截面\nsection4 = doc.addObject('Sketcher::SketchObject', 'Section4')\nsection4.addGeometry(Part.LineSegment(FreeCAD.Vector(-25.0, -25.0, 0), FreeCAD.Vector(25.0, -25.0, 0)), False)\nsection4.addGeometry(Part.LineSegment(FreeCAD.Vector(25.0, -25.0, 0), FreeCAD.Vector(25.0, 25.0, 0)), False)\nsection4.addGeometry(Part.LineSegment(FreeCAD.Vector(25.0, 25.0, 0), FreeCAD.Vector(-25.0, 25.0, 0)), False)\nsection4.addGeometry(Part.LineSegment(FreeCAD.Vector(-25.0, 25.0, 0), FreeCAD.Vector(-25.0, -25.0, 0)), False)\nsection4.Placement.Base = FreeCAD.Vector(0, 0, 90)\nbody.addObject(section4)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2, section3, section4]\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有4个变化形状的放样特征，截面之间有形状变化（圆形（半径43mm）到六边形（外接圆半径37mm）到正方形（边长57mm）到三角形（外接圆半径42mm））。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\nsection1.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 43), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nbody.addObject(section1)\n# 创建六边形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\n# 计算顶点\nvertices = []\nfor j in range(6):\n    angle = 2 * math.pi * j / 6\n    x = 37 * math.cos(angle)\n    y = 37 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(6):\n    section2.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 6]), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nbody.addObject(section2)\n# 创建正方形截面\nsection3 = doc.addObject('Sketcher::SketchObject', 'Section3')\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(-28.5, -28.5, 0), FreeCAD.Vector(28.5, -28.5, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(28.5, -28.5, 0), FreeCAD.Vector(28.5, 28.5, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(28.5, 28.5, 0), FreeCAD.Vector(-28.5, 28.5, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(-28.5, 28.5, 0), FreeCAD.Vector(-28.5, -28.5, 0)), False)\nsection3.Placement.Base = FreeCAD.Vector(0, 0, 60)\nbody.addObject(section3)\n# 创建三角形截面\nsection4 = doc.addObject('Sketcher::SketchObject', 'Section4')\n# 计算顶点\nvertices = []\nfor j in range(3):\n    angle = 2 * math.pi * j / 3\n    x = 42 * math.cos(angle)\n    y = 42 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(3):\n    section4.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 3]), False)\nsection4.Placement.Base = FreeCAD.Vector(0, 0, 90)\nbody.addObject(section4)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2, section3, section4]\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有矩形截面（宽23mm、高24mm）和螺旋线路径（半径61mm、高度82mm、4圈）的扫描特征。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Sweep\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形截面草图\nprofile = doc.addObject('Sketcher::SketchObject', 'Profile')\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(-11.5, -12.0, 0), FreeCAD.Vector(11.5, -12.0, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(11.5, -12.0, 0), FreeCAD.Vector(11.5, 12.0, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(11.5, 12.0, 0), FreeCAD.Vector(-11.5, 12.0, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(-11.5, 12.0, 0), FreeCAD.Vector(-11.5, -12.0, 0)), False)\nbody.addObject(profile)\n# 创建螺旋线路径\npath = doc.addObject('Sketcher::SketchObject', 'Path')\n# 使用多段线近似螺旋线\npoints = []\nsegments = 4 * 16  # 每圈16个点\nfor i in range(segments + 1):\n    angle = 2 * math.pi * i / 16\n    z = 82 * i / segments\n    x = 61 * math.cos(angle)\n    y = 61 * math.sin(angle)\n    points.append(FreeCAD.Vector(x, y, z))\n# 添加线段\nfor i in range(len(points) - 1):\n    path.addGeometry(Part.LineSegment(points[i], points[i+1]), False)\nbody.addObject(path)\n# 创建扫描特征\nsweep = doc.addObject(\"PartDesign::AdditivePipe\", \"Sweep\")\nsweep.Profile = profile\nsweep.Spine = path\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有2个矩形截面（宽43mm、高49mm）的放样特征，截面之间有旋转变化（旋转0.0度、旋转180.0度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建第1个矩形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(-21.5, -24.5, 0), FreeCAD.Vector(21.5, -24.5, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(21.5, -24.5, 0), FreeCAD.Vector(21.5, 24.5, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(21.5, 24.5, 0), FreeCAD.Vector(-21.5, 24.5, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(-21.5, 24.5, 0), FreeCAD.Vector(-21.5, -24.5, 0)), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nsection1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0, 0, 1), 0.0)\nbody.addObject(section1)\n# 创建第2个矩形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(-21.5, -24.5, 0), FreeCAD.Vector(21.5, -24.5, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(21.5, -24.5, 0), FreeCAD.Vector(21.5, 24.5, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(21.5, 24.5, 0), FreeCAD.Vector(-21.5, 24.5, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(-21.5, 24.5, 0), FreeCAD.Vector(-21.5, -24.5, 0)), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nsection2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0, 0, 1), 180.0)\nbody.addObject(section2)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2]\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有2个圆形截面的放样特征，截面之间有尺寸变化（半径34mm、半径13mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建第1个圆形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\nsection1.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 34), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nbody.addObject(section1)\n# 创建第2个圆形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\nsection2.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 13), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nbody.addObject(section2)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2]\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有圆形截面（半径18mm）和正弦曲线路径（长度133mm、振幅28mm、4个周期）的扫描特征。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Sweep\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形截面草图\nprofile = doc.addObject('Sketcher::SketchObject', 'Profile')\nprofile.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 18), False)\nbody.addObject(profile)\n# 创建正弦曲线路径\npath = doc.addObject('Sketcher::SketchObject', 'Path')\n# 使用多段线近似正弦曲线\npoints = []\nsegments = 4 * 16  # 每个周期16个点\nfor i in range(segments + 1):\n    x = 133 * i / segments\n    y = 28 * math.sin(2 * math.pi * 4 * i / segments)\n    z = 0\n    points.append(FreeCAD.Vector(x, y, z))\n# 添加线段\nfor i in range(len(points) - 1):\n    path.addGeometry(Part.LineSegment(points[i], points[i+1]), False)\nbody.addObject(path)\n# 创建扫描特征\nsweep = doc.addObject(\"PartDesign::AdditivePipe\", \"Sweep\")\nsweep.Profile = profile\nsweep.Spine = path\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有2个变化形状的放样特征，截面之间有形状变化（正方形（边长61mm）到六边形（外接圆半径43mm））。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建正方形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(-30.5, -30.5, 0), FreeCAD.Vector(30.5, -30.5, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(30.5, -30.5, 0), FreeCAD.Vector(30.5, 30.5, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(30.5, 30.5, 0), FreeCAD.Vector(-30.5, 30.5, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(-30.5, 30.5, 0), FreeCAD.Vector(-30.5, -30.5, 0)), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nbody.addObject(section1)\n# 创建六边形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\n# 计算顶点\nvertices = []\nfor j in range(6):\n    angle = 2 * math.pi * j / 6\n    x = 43 * math.cos(angle)\n    y = 43 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(6):\n    section2.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 6]), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nbody.addObject(section2)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2]\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有2个变化形状的放样特征，截面之间有形状变化（圆形（半径38mm）到正方形（边长66mm））。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\nsection1.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 38), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nbody.addObject(section1)\n# 创建正方形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(-33.0, -33.0, 0), FreeCAD.Vector(33.0, -33.0, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(33.0, -33.0, 0), FreeCAD.Vector(33.0, 33.0, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(33.0, 33.0, 0), FreeCAD.Vector(-33.0, 33.0, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(-33.0, 33.0, 0), FreeCAD.Vector(-33.0, -33.0, 0)), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nbody.addObject(section2)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2]\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有3个矩形截面（宽34mm、高34mm）的放样特征，截面之间有旋转变化（旋转0.0度、旋转90.0度、旋转180.0度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建第1个矩形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(-17.0, -17.0, 0), FreeCAD.Vector(17.0, -17.0, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(17.0, -17.0, 0), FreeCAD.Vector(17.0, 17.0, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(17.0, 17.0, 0), FreeCAD.Vector(-17.0, 17.0, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(-17.0, 17.0, 0), FreeCAD.Vector(-17.0, -17.0, 0)), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nsection1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0, 0, 1), 0.0)\nbody.addObject(section1)\n# 创建第2个矩形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(-17.0, -17.0, 0), FreeCAD.Vector(17.0, -17.0, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(17.0, -17.0, 0), FreeCAD.Vector(17.0, 17.0, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(17.0, 17.0, 0), FreeCAD.Vector(-17.0, 17.0, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(-17.0, 17.0, 0), FreeCAD.Vector(-17.0, -17.0, 0)), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nsection2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0, 0, 1), 90.0)\nbody.addObject(section2)\n# 创建第3个矩形截面\nsection3 = doc.addObject('Sketcher::SketchObject', 'Section3')\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(-17.0, -17.0, 0), FreeCAD.Vector(17.0, -17.0, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(17.0, -17.0, 0), FreeCAD.Vector(17.0, 17.0, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(17.0, 17.0, 0), FreeCAD.Vector(-17.0, 17.0, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(-17.0, 17.0, 0), FreeCAD.Vector(-17.0, -17.0, 0)), False)\nsection3.Placement.Base = FreeCAD.Vector(0, 0, 60)\nsection3.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0, 0, 1), 180.0)\nbody.addObject(section3)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2, section3]\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有6边形截面（外接圆半径9mm）和螺旋线路径（半径58mm、高度110mm、5圈）的扫描特征。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Sweep\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建6边形截面草图\nprofile = doc.addObject('Sketcher::SketchObject', 'Profile')\n# 计算顶点\nvertices = []\nfor i in range(6):\n    angle = 2 * math.pi * i / 6\n    x = 9 * math.cos(angle)\n    y = 9 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(6):\n    profile.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 6]), False)\nbody.addObject(profile)\n# 创建螺旋线路径\npath = doc.addObject('Sketcher::SketchObject', 'Path')\n# 使用多段线近似螺旋线\npoints = []\nsegments = 5 * 16  # 每圈16个点\nfor i in range(segments + 1):\n    angle = 2 * math.pi * i / 16\n    z = 110 * i / segments\n    x = 58 * math.cos(angle)\n    y = 58 * math.sin(angle)\n    points.append(FreeCAD.Vector(x, y, z))\n# 添加线段\nfor i in range(len(points) - 1):\n    path.addGeometry(Part.LineSegment(points[i], points[i+1]), False)\nbody.addObject(path)\n# 创建扫描特征\nsweep = doc.addObject(\"PartDesign::AdditivePipe\", \"Sweep\")\nsweep.Profile = profile\nsweep.Spine = path\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有矩形截面（宽14mm、高20mm）和自定义路径的扫描特征。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Sweep\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形截面草图\nprofile = doc.addObject('Sketcher::SketchObject', 'Profile')\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(-7.0, -10.0, 0), FreeCAD.Vector(7.0, -10.0, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(7.0, -10.0, 0), FreeCAD.Vector(7.0, 10.0, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(7.0, 10.0, 0), FreeCAD.Vector(-7.0, 10.0, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(-7.0, 10.0, 0), FreeCAD.Vector(-7.0, -10.0, 0)), False)\nbody.addObject(profile)\n# 创建自定义路径\npath = doc.addObject('Sketcher::SketchObject', 'Path')\n# 添加一系列连接的线段\npath.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(50, 20, 0)), False)\npath.addGeometry(Part.LineSegment(FreeCAD.Vector(50, 20, 0), FreeCAD.Vector(80, -30, 30)), False)\npath.addGeometry(Part.LineSegment(FreeCAD.Vector(80, -30, 30), FreeCAD.Vector(120, 0, 60)), False)\npath.addGeometry(Part.LineSegment(FreeCAD.Vector(120, 0, 60), FreeCAD.Vector(150, 40, 60)), False)\nbody.addObject(path)\n# 创建扫描特征\nsweep = doc.addObject(\"PartDesign::AdditivePipe\", \"Sweep\")\nsweep.Profile = profile\nsweep.Spine = path\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有3个矩形截面（宽39mm、高30mm）的放样特征，截面之间有旋转变化（旋转0.0度、旋转90.0度、旋转180.0度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建第1个矩形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(-19.5, -15.0, 0), FreeCAD.Vector(19.5, -15.0, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(19.5, -15.0, 0), FreeCAD.Vector(19.5, 15.0, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(19.5, 15.0, 0), FreeCAD.Vector(-19.5, 15.0, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(-19.5, 15.0, 0), FreeCAD.Vector(-19.5, -15.0, 0)), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nsection1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0, 0, 1), 0.0)\nbody.addObject(section1)\n# 创建第2个矩形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(-19.5, -15.0, 0), FreeCAD.Vector(19.5, -15.0, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(19.5, -15.0, 0), FreeCAD.Vector(19.5, 15.0, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(19.5, 15.0, 0), FreeCAD.Vector(-19.5, 15.0, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(-19.5, 15.0, 0), FreeCAD.Vector(-19.5, -15.0, 0)), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nsection2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0, 0, 1), 90.0)\nbody.addObject(section2)\n# 创建第3个矩形截面\nsection3 = doc.addObject('Sketcher::SketchObject', 'Section3')\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(-19.5, -15.0, 0), FreeCAD.Vector(19.5, -15.0, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(19.5, -15.0, 0), FreeCAD.Vector(19.5, 15.0, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(19.5, 15.0, 0), FreeCAD.Vector(-19.5, 15.0, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(-19.5, 15.0, 0), FreeCAD.Vector(-19.5, -15.0, 0)), False)\nsection3.Placement.Base = FreeCAD.Vector(0, 0, 60)\nsection3.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0, 0, 1), 180.0)\nbody.addObject(section3)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2, section3]\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有5边形截面（外接圆半径9mm）和螺旋线路径（半径79mm、高度113mm、5圈）的扫描特征。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Sweep\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建5边形截面草图\nprofile = doc.addObject('Sketcher::SketchObject', 'Profile')\n# 计算顶点\nvertices = []\nfor i in range(5):\n    angle = 2 * math.pi * i / 5\n    x = 9 * math.cos(angle)\n    y = 9 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(5):\n    profile.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 5]), False)\nbody.addObject(profile)\n# 创建螺旋线路径\npath = doc.addObject('Sketcher::SketchObject', 'Path')\n# 使用多段线近似螺旋线\npoints = []\nsegments = 5 * 16  # 每圈16个点\nfor i in range(segments + 1):\n    angle = 2 * math.pi * i / 16\n    z = 113 * i / segments\n    x = 79 * math.cos(angle)\n    y = 79 * math.sin(angle)\n    points.append(FreeCAD.Vector(x, y, z))\n# 添加线段\nfor i in range(len(points) - 1):\n    path.addGeometry(Part.LineSegment(points[i], points[i+1]), False)\nbody.addObject(path)\n# 创建扫描特征\nsweep = doc.addObject(\"PartDesign::AdditivePipe\", \"Sweep\")\nsweep.Profile = profile\nsweep.Spine = path\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有4个变化形状的放样特征，截面之间有形状变化（圆形（半径48mm）到六边形（外接圆半径46mm）到正方形（边长59mm）到三角形（外接圆半径33mm））。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\nsection1.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 48), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nbody.addObject(section1)\n# 创建六边形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\n# 计算顶点\nvertices = []\nfor j in range(6):\n    angle = 2 * math.pi * j / 6\n    x = 46 * math.cos(angle)\n    y = 46 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(6):\n    section2.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 6]), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nbody.addObject(section2)\n# 创建正方形截面\nsection3 = doc.addObject('Sketcher::SketchObject', 'Section3')\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(-29.5, -29.5, 0), FreeCAD.Vector(29.5, -29.5, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(29.5, -29.5, 0), FreeCAD.Vector(29.5, 29.5, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(29.5, 29.5, 0), FreeCAD.Vector(-29.5, 29.5, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(-29.5, 29.5, 0), FreeCAD.Vector(-29.5, -29.5, 0)), False)\nsection3.Placement.Base = FreeCAD.Vector(0, 0, 60)\nbody.addObject(section3)\n# 创建三角形截面\nsection4 = doc.addObject('Sketcher::SketchObject', 'Section4')\n# 计算顶点\nvertices = []\nfor j in range(3):\n    angle = 2 * math.pi * j / 3\n    x = 33 * math.cos(angle)\n    y = 33 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(3):\n    section4.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 3]), False)\nsection4.Placement.Base = FreeCAD.Vector(0, 0, 90)\nbody.addObject(section4)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2, section3, section4]\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有圆形截面（半径18mm）和螺旋线路径（半径48mm、高度64mm、3圈）的扫描特征。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Sweep\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形截面草图\nprofile = doc.addObject('Sketcher::SketchObject', 'Profile')\nprofile.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 18), False)\nbody.addObject(profile)\n# 创建螺旋线路径\npath = doc.addObject('Sketcher::SketchObject', 'Path')\n# 使用多段线近似螺旋线\npoints = []\nsegments = 3 * 16  # 每圈16个点\nfor i in range(segments + 1):\n    angle = 2 * math.pi * i / 16\n    z = 64 * i / segments\n    x = 48 * math.cos(angle)\n    y = 48 * math.sin(angle)\n    points.append(FreeCAD.Vector(x, y, z))\n# 添加线段\nfor i in range(len(points) - 1):\n    path.addGeometry(Part.LineSegment(points[i], points[i+1]), False)\nbody.addObject(path)\n# 创建扫描特征\nsweep = doc.addObject(\"PartDesign::AdditivePipe\", \"Sweep\")\nsweep.Profile = profile\nsweep.Spine = path\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有3边形截面（外接圆半径16mm）和正弦曲线路径（长度164mm、振幅38mm、2个周期）的扫描特征。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Sweep\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建3边形截面草图\nprofile = doc.addObject('Sketcher::SketchObject', 'Profile')\n# 计算顶点\nvertices = []\nfor i in range(3):\n    angle = 2 * math.pi * i / 3\n    x = 16 * math.cos(angle)\n    y = 16 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(3):\n    profile.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 3]), False)\nbody.addObject(profile)\n# 创建正弦曲线路径\npath = doc.addObject('Sketcher::SketchObject', 'Path')\n# 使用多段线近似正弦曲线\npoints = []\nsegments = 2 * 16  # 每个周期16个点\nfor i in range(segments + 1):\n    x = 164 * i / segments\n    y = 38 * math.sin(2 * math.pi * 2 * i / segments)\n    z = 0\n    points.append(FreeCAD.Vector(x, y, z))\n# 添加线段\nfor i in range(len(points) - 1):\n    path.addGeometry(Part.LineSegment(points[i], points[i+1]), False)\nbody.addObject(path)\n# 创建扫描特征\nsweep = doc.addObject(\"PartDesign::AdditivePipe\", \"Sweep\")\nsweep.Profile = profile\nsweep.Spine = path\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有圆形截面（半径10mm）和自定义路径的扫描特征。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Sweep\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形截面草图\nprofile = doc.addObject('Sketcher::SketchObject', 'Profile')\nprofile.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 10), False)\nbody.addObject(profile)\n# 创建自定义路径\npath = doc.addObject('Sketcher::SketchObject', 'Path')\n# 添加一系列连接的线段\npath.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(50, 20, 0)), False)\npath.addGeometry(Part.LineSegment(FreeCAD.Vector(50, 20, 0), FreeCAD.Vector(80, -30, 30)), False)\npath.addGeometry(Part.LineSegment(FreeCAD.Vector(80, -30, 30), FreeCAD.Vector(120, 0, 60)), False)\npath.addGeometry(Part.LineSegment(FreeCAD.Vector(120, 0, 60), FreeCAD.Vector(150, 40, 60)), False)\nbody.addObject(path)\n# 创建扫描特征\nsweep = doc.addObject(\"PartDesign::AdditivePipe\", \"Sweep\")\nsweep.Profile = profile\nsweep.Spine = path\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有矩形截面（宽21mm、高11mm）和螺旋线路径（半径72mm、高度139mm、2圈）的扫描特征。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Sweep\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形截面草图\nprofile = doc.addObject('Sketcher::SketchObject', 'Profile')\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(-10.5, -5.5, 0), FreeCAD.Vector(10.5, -5.5, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(10.5, -5.5, 0), FreeCAD.Vector(10.5, 5.5, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(10.5, 5.5, 0), FreeCAD.Vector(-10.5, 5.5, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(-10.5, 5.5, 0), FreeCAD.Vector(-10.5, -5.5, 0)), False)\nbody.addObject(profile)\n# 创建螺旋线路径\npath = doc.addObject('Sketcher::SketchObject', 'Path')\n# 使用多段线近似螺旋线\npoints = []\nsegments = 2 * 16  # 每圈16个点\nfor i in range(segments + 1):\n    angle = 2 * math.pi * i / 16\n    z = 139 * i / segments\n    x = 72 * math.cos(angle)\n    y = 72 * math.sin(angle)\n    points.append(FreeCAD.Vector(x, y, z))\n# 添加线段\nfor i in range(len(points) - 1):\n    path.addGeometry(Part.LineSegment(points[i], points[i+1]), False)\nbody.addObject(path)\n# 创建扫描特征\nsweep = doc.addObject(\"PartDesign::AdditivePipe\", \"Sweep\")\nsweep.Profile = profile\nsweep.Spine = path\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有矩形截面（宽10mm、高16mm）和正弦曲线路径（长度187mm、振幅22mm、2个周期）的扫描特征。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Sweep\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建矩形截面草图\nprofile = doc.addObject('Sketcher::SketchObject', 'Profile')\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(-5.0, -8.0, 0), FreeCAD.Vector(5.0, -8.0, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(5.0, -8.0, 0), FreeCAD.Vector(5.0, 8.0, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(5.0, 8.0, 0), FreeCAD.Vector(-5.0, 8.0, 0)), False)\nprofile.addGeometry(Part.LineSegment(FreeCAD.Vector(-5.0, 8.0, 0), FreeCAD.Vector(-5.0, -8.0, 0)), False)\nbody.addObject(profile)\n# 创建正弦曲线路径\npath = doc.addObject('Sketcher::SketchObject', 'Path')\n# 使用多段线近似正弦曲线\npoints = []\nsegments = 2 * 16  # 每个周期16个点\nfor i in range(segments + 1):\n    x = 187 * i / segments\n    y = 22 * math.sin(2 * math.pi * 2 * i / segments)\n    z = 0\n    points.append(FreeCAD.Vector(x, y, z))\n# 添加线段\nfor i in range(len(points) - 1):\n    path.addGeometry(Part.LineSegment(points[i], points[i+1]), False)\nbody.addObject(path)\n# 创建扫描特征\nsweep = doc.addObject(\"PartDesign::AdditivePipe\", \"Sweep\")\nsweep.Profile = profile\nsweep.Spine = path\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有4个正方形截面的放样特征，截面之间有尺寸变化（边长48mm、边长27mm、边长50mm、边长73mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建第1个正方形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(-24.0, -24.0, 0), FreeCAD.Vector(24.0, -24.0, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(24.0, -24.0, 0), FreeCAD.Vector(24.0, 24.0, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(24.0, 24.0, 0), FreeCAD.Vector(-24.0, 24.0, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(-24.0, 24.0, 0), FreeCAD.Vector(-24.0, -24.0, 0)), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nbody.addObject(section1)\n# 创建第2个正方形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(-13.5, -13.5, 0), FreeCAD.Vector(13.5, -13.5, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(13.5, -13.5, 0), FreeCAD.Vector(13.5, 13.5, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(13.5, 13.5, 0), FreeCAD.Vector(-13.5, 13.5, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(-13.5, 13.5, 0), FreeCAD.Vector(-13.5, -13.5, 0)), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nbody.addObject(section2)\n# 创建第3个正方形截面\nsection3 = doc.addObject('Sketcher::SketchObject', 'Section3')\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(-25.0, -25.0, 0), FreeCAD.Vector(25.0, -25.0, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(25.0, -25.0, 0), FreeCAD.Vector(25.0, 25.0, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(25.0, 25.0, 0), FreeCAD.Vector(-25.0, 25.0, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(-25.0, 25.0, 0), FreeCAD.Vector(-25.0, -25.0, 0)), False)\nsection3.Placement.Base = FreeCAD.Vector(0, 0, 60)\nbody.addObject(section3)\n# 创建第4个正方形截面\nsection4 = doc.addObject('Sketcher::SketchObject', 'Section4')\nsection4.addGeometry(Part.LineSegment(FreeCAD.Vector(-36.5, -36.5, 0), FreeCAD.Vector(36.5, -36.5, 0)), False)\nsection4.addGeometry(Part.LineSegment(FreeCAD.Vector(36.5, -36.5, 0), FreeCAD.Vector(36.5, 36.5, 0)), False)\nsection4.addGeometry(Part.LineSegment(FreeCAD.Vector(36.5, 36.5, 0), FreeCAD.Vector(-36.5, 36.5, 0)), False)\nsection4.addGeometry(Part.LineSegment(FreeCAD.Vector(-36.5, 36.5, 0), FreeCAD.Vector(-36.5, -36.5, 0)), False)\nsection4.Placement.Base = FreeCAD.Vector(0, 0, 90)\nbody.addObject(section4)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2, section3, section4]\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有3个3边形截面的放样特征，截面之间有尺寸变化（外接圆半径32mm、外接圆半径25mm、外接圆半径45mm）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建第1个3边形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\n# 计算顶点\nvertices = []\nfor j in range(3):\n    angle = 2 * math.pi * j / 3\n    x = 32 * math.cos(angle)\n    y = 32 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(3):\n    section1.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 3]), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nbody.addObject(section1)\n# 创建第2个3边形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\n# 计算顶点\nvertices = []\nfor j in range(3):\n    angle = 2 * math.pi * j / 3\n    x = 25 * math.cos(angle)\n    y = 25 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(3):\n    section2.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 3]), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nbody.addObject(section2)\n# 创建第3个3边形截面\nsection3 = doc.addObject('Sketcher::SketchObject', 'Section3')\n# 计算顶点\nvertices = []\nfor j in range(3):\n    angle = 2 * math.pi * j / 3\n    x = 45 * math.cos(angle)\n    y = 45 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(3):\n    section3.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 3]), False)\nsection3.Placement.Base = FreeCAD.Vector(0, 0, 60)\nbody.addObject(section3)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2, section3]\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有4个变化形状的放样特征，截面之间有形状变化（正方形（边长71mm）到六边形（外接圆半径41mm）到三角形（外接圆半径39mm）到圆形（半径49mm））。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建正方形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(-35.5, -35.5, 0), FreeCAD.Vector(35.5, -35.5, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(35.5, -35.5, 0), FreeCAD.Vector(35.5, 35.5, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(35.5, 35.5, 0), FreeCAD.Vector(-35.5, 35.5, 0)), False)\nsection1.addGeometry(Part.LineSegment(FreeCAD.Vector(-35.5, 35.5, 0), FreeCAD.Vector(-35.5, -35.5, 0)), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nbody.addObject(section1)\n# 创建六边形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\n# 计算顶点\nvertices = []\nfor j in range(6):\n    angle = 2 * math.pi * j / 6\n    x = 41 * math.cos(angle)\n    y = 41 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(6):\n    section2.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 6]), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nbody.addObject(section2)\n# 创建三角形截面\nsection3 = doc.addObject('Sketcher::SketchObject', 'Section3')\n# 计算顶点\nvertices = []\nfor j in range(3):\n    angle = 2 * math.pi * j / 3\n    x = 39 * math.cos(angle)\n    y = 39 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(3):\n    section3.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 3]), False)\nsection3.Placement.Base = FreeCAD.Vector(0, 0, 60)\nbody.addObject(section3)\n# 创建圆形截面\nsection4 = doc.addObject('Sketcher::SketchObject', 'Section4')\nsection4.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 49), False)\nsection4.Placement.Base = FreeCAD.Vector(0, 0, 90)\nbody.addObject(section4)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2, section3, section4]\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有3个变化形状的放样特征，截面之间有形状变化（六边形（外接圆半径33mm）到正方形（边长45mm）到三角形（外接圆半径35mm））。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建六边形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\n# 计算顶点\nvertices = []\nfor j in range(6):\n    angle = 2 * math.pi * j / 6\n    x = 33 * math.cos(angle)\n    y = 33 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(6):\n    section1.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 6]), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nbody.addObject(section1)\n# 创建正方形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(-22.5, -22.5, 0), FreeCAD.Vector(22.5, -22.5, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(22.5, -22.5, 0), FreeCAD.Vector(22.5, 22.5, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(22.5, 22.5, 0), FreeCAD.Vector(-22.5, 22.5, 0)), False)\nsection2.addGeometry(Part.LineSegment(FreeCAD.Vector(-22.5, 22.5, 0), FreeCAD.Vector(-22.5, -22.5, 0)), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nbody.addObject(section2)\n# 创建三角形截面\nsection3 = doc.addObject('Sketcher::SketchObject', 'Section3')\n# 计算顶点\nvertices = []\nfor j in range(3):\n    angle = 2 * math.pi * j / 3\n    x = 35 * math.cos(angle)\n    y = 35 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(3):\n    section3.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 3]), False)\nsection3.Placement.Base = FreeCAD.Vector(0, 0, 60)\nbody.addObject(section3)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2, section3]\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有2个5边形截面（外接圆半径38mm）的放样特征，截面之间有旋转变化（旋转0.0度、旋转180.0度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建第1个5边形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\n# 计算顶点\nvertices = []\nfor j in range(5):\n    angle = 2 * math.pi * j / 5\n    x = 38 * math.cos(angle)\n    y = 38 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(5):\n    section1.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 5]), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nsection1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0, 0, 1), 0.0)\nbody.addObject(section1)\n# 创建第2个5边形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\n# 计算顶点\nvertices = []\nfor j in range(5):\n    angle = 2 * math.pi * j / 5\n    x = 38 * math.cos(angle)\n    y = 38 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(5):\n    section2.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 5]), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nsection2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0, 0, 1), 180.0)\nbody.addObject(section2)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2]\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有3个4边形截面（外接圆半径30mm）的放样特征，截面之间有旋转变化（旋转0.0度、旋转90.0度、旋转180.0度）。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建第1个4边形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\n# 计算顶点\nvertices = []\nfor j in range(4):\n    angle = 2 * math.pi * j / 4\n    x = 30 * math.cos(angle)\n    y = 30 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(4):\n    section1.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 4]), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nsection1.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0, 0, 1), 0.0)\nbody.addObject(section1)\n# 创建第2个4边形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\n# 计算顶点\nvertices = []\nfor j in range(4):\n    angle = 2 * math.pi * j / 4\n    x = 30 * math.cos(angle)\n    y = 30 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(4):\n    section2.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 4]), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nsection2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0, 0, 1), 90.0)\nbody.addObject(section2)\n# 创建第3个4边形截面\nsection3 = doc.addObject('Sketcher::SketchObject', 'Section3')\n# 计算顶点\nvertices = []\nfor j in range(4):\n    angle = 2 * math.pi * j / 4\n    x = 30 * math.cos(angle)\n    y = 30 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(4):\n    section3.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 4]), False)\nsection3.Placement.Base = FreeCAD.Vector(0, 0, 60)\nsection3.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0, 0, 1), 180.0)\nbody.addObject(section3)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2, section3]\ndoc.recompute()\n```"
  }
]