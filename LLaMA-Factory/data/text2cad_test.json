[
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个47mm长、175mm宽、186mm高的长方体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Box\")\nbox = doc.addObject(\"Part::Box\", \"Box\")\nbox.Length = 47\nbox.Width = 175\nbox.Height = 186\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个30mm直径、183mm高的圆柱体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 15\ncylinder.Height = 183\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个58mm半径、193mm高的圆柱体，绕轴(0.94, -0.46, -0.37)旋转149度。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cylinder\")\ncylinder = doc.addObject(\"Part::Cylinder\", \"Cylinder\")\ncylinder.Radius = 58\ncylinder.Height = 193\ncylinder.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.94, -0.46, -0.37), 149)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个27mm半径的球体。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Sphere\")\nsphere = doc.addObject(\"Part::Sphere\", \"Sphere\")\nsphere.Radius = 27\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主直径102mm、管直径12mm的圆环。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 51\ntorus.Radius2 = 6\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个主半径55mm、管半径19mm的圆环。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Torus\")\ntorus = doc.addObject(\"Part::Torus\", \"Torus\")\ntorus.Radius1 = 55\ntorus.Radius2 = 19\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径57mm的球体和一个半径16mm、高62mm的圆柱体（位置在(-13, 10, 29)），然后计算它们的并集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 57\nshape2 = doc.addObject(\"Part::Cylinder\", \"Cylinder2\")\nshape2.Radius = 16\nshape2.Height = 62\nshape2.Placement.Base = FreeCAD.Vector(-13, 10, 29)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个半径11mm的球体和一个主半径43mm、管半径12mm的圆环（位置在(23, -36, -21)，并绕轴(0.13, -0.24, 0.28)旋转262度），然后计算它们的融合。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Fusion\")\nshape1 = doc.addObject(\"Part::Sphere\", \"Sphere\")\nshape1.Radius = 11\nshape2 = doc.addObject(\"Part::Torus\", \"Torus2\")\nshape2.Radius1 = 43\nshape2.Radius2 = 12\nshape2.Placement.Base = FreeCAD.Vector(23, -36, -21)\nshape2.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(0.13, -0.24, 0.28), 262)\nfusion = doc.addObject(\"Part::Fuse\", \"Fusion\")\nfusion.Base = shape1\nfusion.Tool = shape2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长86mm、宽144mm、高199mm的长方体中切除一个半径45mm的球体（位置在(24, 26, 14)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 86\nbase.Width = 144\nbase.Height = 199\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 45\ntool.Placement.Base = FreeCAD.Vector(24, 26, 14)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长95mm、宽84mm、高60mm的长方体中切除一个长59mm、宽84mm、高36mm的长方体（位置在(26, 5, 14)）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 95\nbase.Width = 84\nbase.Height = 60\ntool = doc.addObject(\"Part::Box\", \"Tool\")\ntool.Length = 59\ntool.Width = 84\ntool.Height = 36\ntool.Placement.Base = FreeCAD.Vector(26, 5, 14)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "从一个长69mm、宽156mm、高146mm的长方体中切除一个半径35mm的球体（位置在(15, 22, 6)，并绕轴(-0.64, -0.40, -0.40)旋转146度）。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Cut\")\nbase = doc.addObject(\"Part::Box\", \"Base\")\nbase.Length = 69\nbase.Width = 156\nbase.Height = 146\ntool = doc.addObject(\"Part::Sphere\", \"Tool\")\ntool.Radius = 35\ntool.Placement.Base = FreeCAD.Vector(15, 22, 6)\ntool.Placement.Rotation = FreeCAD.Rotation(FreeCAD.Vector(-0.64, -0.40, -0.40), 146)\ncut = doc.addObject(\"Part::Cut\", \"Cut\")\ncut.Base = base\ncut.Tool = tool\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "计算一个长120mm、宽146mm、高93mm的长方体和一个半径57mm的球体（位置在(-6, 45, -3)）的交集。",
    "output": "```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Common\")\nobj1 = doc.addObject(\"Part::Box\", \"Box1\")\nobj1.Length = 120\nobj1.Width = 146\nobj1.Height = 93\nobj2 = doc.addObject(\"Part::Sphere\", \"Sphere2\")\nobj2.Radius = 57\nobj2.Placement.Base = FreeCAD.Vector(-6, 45, -3)\ncommon = doc.addObject(\"Part::Common\", \"Common\")\ncommon.Base = obj1\ncommon.Tool = obj2\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条长度为22.47mm、角度为302.3度的直线，起点在(36, -24)。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Line\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline = Part.LineSegment(FreeCAD.Vector(36, -24, 0), FreeCAD.Vector(48, -43, 0))\nsketch.addGeometry(line, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(-42, -17), (12, -12), (-11, -28), (17, -46), (6, 17), (9, 5)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(-42, -17, 0), FreeCAD.Vector(12, -12, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(12, -12, 0), FreeCAD.Vector(-11, -28, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-11, -28, 0), FreeCAD.Vector(17, -46, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(17, -46, 0), FreeCAD.Vector(6, 17, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(6, 17, 0), FreeCAD.Vector(9, 5, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(9, 5, 0), FreeCAD.Vector(-42, -17, 0))\nsketch.addGeometry(line6, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一条经过点(7, 13), (29, 41), (-11, 32), (-5, -17), (-6, 12), (0, -29), (-11, -11), (-20, -15)的闭合折线。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"PolyLine\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nline1 = Part.LineSegment(FreeCAD.Vector(7, 13, 0), FreeCAD.Vector(29, 41, 0))\nsketch.addGeometry(line1, False)\nline2 = Part.LineSegment(FreeCAD.Vector(29, 41, 0), FreeCAD.Vector(-11, 32, 0))\nsketch.addGeometry(line2, False)\nline3 = Part.LineSegment(FreeCAD.Vector(-11, 32, 0), FreeCAD.Vector(-5, -17, 0))\nsketch.addGeometry(line3, False)\nline4 = Part.LineSegment(FreeCAD.Vector(-5, -17, 0), FreeCAD.Vector(-6, 12, 0))\nsketch.addGeometry(line4, False)\nline5 = Part.LineSegment(FreeCAD.Vector(-6, 12, 0), FreeCAD.Vector(0, -29, 0))\nsketch.addGeometry(line5, False)\nline6 = Part.LineSegment(FreeCAD.Vector(0, -29, 0), FreeCAD.Vector(-11, -11, 0))\nsketch.addGeometry(line6, False)\nline7 = Part.LineSegment(FreeCAD.Vector(-11, -11, 0), FreeCAD.Vector(-20, -15, 0))\nsketch.addGeometry(line7, False)\nline8 = Part.LineSegment(FreeCAD.Vector(-20, -15, 0), FreeCAD.Vector(7, 13, 0))\nsketch.addGeometry(line8, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个起点为(-40, -24)、经过点(33, -46)、终点为(10, -29)的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher, math\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 通过三点创建圆弧\np1 = FreeCAD.Vector(-40, -24, 0)  # 起点\np2 = FreeCAD.Vector(33, -46, 0)  # 中间点\np3 = FreeCAD.Vector(10, -29, 0)  # 终点\n# 计算圆心和半径\nma = (p2.y - p1.y) / (p2.x - p1.x) if p2.x != p1.x else float('inf')\nmb = (p3.y - p2.y) / (p3.x - p2.x) if p3.x != p2.x else float('inf')\ncenter_x = (ma * mb * (p1.y - p3.y) + mb * (p1.x + p2.x) - ma * (p2.x + p3.x)) / (2 * (mb - ma)) if ma != mb else 0\ncenter_y = (-1 / ma) * (center_x - (p1.x + p2.x) / 2) + (p1.y + p2.y) / 2 if ma != float('inf') else (p2.y + p3.y) / 2\ncenter = FreeCAD.Vector(center_x, center_y, 0)\nradius = center.sub(p1).Length\n# 计算角度\nv1 = p1.sub(center)\nv3 = p3.sub(center)\nstart_angle = math.atan2(v1.y, v1.x)\nend_angle = math.atan2(v3.y, v3.x)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), radius), start_angle, end_angle)\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(-4, 37)、半径为15mm、起始角度145度、终止角度175度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(-4, 37, 0)\nstart = FreeCAD.Vector(-16.29, 45.60, 0)\nend = FreeCAD.Vector(-18.94, 38.31, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 15), math.radians(145), math.radians(175))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中绘制一个中心点在(32, -17)、半径为50mm、起始角度296度、终止角度326度的圆弧。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Arc\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\ncenter = FreeCAD.Vector(32, -17, 0)\nstart = FreeCAD.Vector(53.92, -61.94, 0)\nend = FreeCAD.Vector(73.45, -44.96, 0)\narc = Part.ArcOfCircle(Part.Circle(center, FreeCAD.Vector(0, 0, 1), 50), math.radians(296), math.radians(326))\nsketch.addGeometry(arc, False)\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两条线段，一条从(-42, 19)到(33, -39)，另一条从(-6, -12)到(27, -20)，然后添加重合约束使第一条线段的终点与第二条线段的起点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条线段\nline1 = Part.LineSegment(FreeCAD.Vector(-42, 19, 0), FreeCAD.Vector(33, -39, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-6, -12, 0), FreeCAD.Vector(27, -20, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加重合约束（线段终点到线段起点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo1, 2, geo2, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个位于(-37, 3)的点，然后添加重合约束使其与原点重合。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Coincident\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建一条短线段来表示点\nline = Part.LineSegment(FreeCAD.Vector(-37, 3, 0), FreeCAD.Vector(-36, 4, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加重合约束（点到原点）\nsketch.addConstraint(Sketcher.Constraint('Coincident', geo, 1, -1, 1))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-38, 36)到(34, 24)的线段，然后添加垂直约束使其垂直。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Vertical\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-38, 36, 0), FreeCAD.Vector(34, 24, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加垂直约束\nsketch.addConstraint(Sketcher.Constraint('Vertical', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一条从(-12, 42)到(36, -21)的线段，然后添加水平约束使其水平。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Horizontal\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建线段\nline = Part.LineSegment(FreeCAD.Vector(-12, 42, 0), FreeCAD.Vector(36, -21, 0))\ngeo = sketch.addGeometry(line, False)\n# 添加水平约束\nsketch.addConstraint(Sketcher.Constraint('Horizontal', geo))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建两个点，分别位于(-14, -20)和(-49, -6)，然后添加距离约束，设置它们之间的距离为38mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Distance\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建两条短线段来表示点\nline1 = Part.LineSegment(FreeCAD.Vector(-14, -20, 0), FreeCAD.Vector(-13, -19, 0))\nline2 = Part.LineSegment(FreeCAD.Vector(-49, -6, 0), FreeCAD.Vector(-48, -5, 0))\ngeo1 = sketch.addGeometry(line1, False)\ngeo2 = sketch.addGeometry(line2, False)\n# 添加距离约束\nsketch.addConstraint(Sketcher.Constraint('Distance', geo1, 1, geo2, 1, 38))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "在草图中创建一个中心点在(-11, -5)的圆，然后添加直径约束，设置其直径为40mm。",
    "output": "```python\nimport FreeCAD, Part, Sketcher\ndoc = FreeCAD.newDocument(\"Diameter\")\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\n# 创建圆\ncircle = Part.Circle(FreeCAD.Vector(-11, -5, 0), FreeCAD.Vector(0, 0, 1), 20)\ngeo = sketch.addGeometry(circle, False)\n# 添加直径约束\nsketch.addConstraint(Sketcher.Constraint('Diameter', geo, 40))\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于半圆（半径44mm）草图的旋转特征，绕Y轴旋转287度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建半圆草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.ArcOfCircle(Part.Circle(FreeCAD.Vector(11, 0, 0), FreeCAD.Vector(0, 0, 1), 44), 0, math.pi), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(11, 44, 0), FreeCAD.Vector(11, -44, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 287\nrevolve.ReferenceAxis = (sketch, ['H_Axis'])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个基于梯形（底边50mm、顶边35mm、高31mm）草图的旋转特征，绕从点(-12, 38)到点(12, -11)的自定义轴旋转112度。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Revolve\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建梯形草图\nsketch = doc.addObject('Sketcher::SketchObject', 'Sketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(17, 0, 0), FreeCAD.Vector(67, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(67, 0, 0), FreeCAD.Vector(59.5, 31, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(59.5, 31, 0), FreeCAD.Vector(24.5, 31, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(24.5, 31, 0), FreeCAD.Vector(17, 0, 0)), False)\nbody.addObject(sketch)\n# 创建旋转特征\nrevolve = doc.addObject(\"PartDesign::Revolution\", \"Revolve\")\nrevolve.Profile = sketch\nrevolve.Angle = 112\n# 创建自定义轴\naxis = sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-12, 38, 0), FreeCAD.Vector(12, -11, 0)), True)\nrevolve.ReferenceAxis = (sketch, ['Edge' + str(axis+1)])\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长127mm、宽120mm、高92mm）基础体，然后在其顶面挖出一个6边形（外接圆半径28mm）的深度33mm沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(127, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(127, 0, 0), FreeCAD.Vector(127, 120, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(127, 120, 0), FreeCAD.Vector(0, 120, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 120, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 92\ndoc.recompute()\n# 创建6边形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\n# 计算顶点\nvertices = []\nfor i in range(6):\n    angle = 2 * math.pi * i / 6\n    x = -21 + 28 * math.cos(angle)\n    y = -24 + 28 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor i in range(6):\n    pocket_sketch.addGeometry(Part.LineSegment(vertices[i], vertices[(i+1) % 6]), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Length = 33\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长95mm、宽89mm、高63mm）基础体，然后在其顶面挖出一个矩形（长45mm、宽65mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(95, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(95, 0, 0), FreeCAD.Vector(95, 89, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(95, 89, 0), FreeCAD.Vector(0, 89, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 89, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 63\ndoc.recompute()\n# 创建矩形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-10, 0, 0), FreeCAD.Vector(35, 0, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(35, 0, 0), FreeCAD.Vector(35, 65, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(35, 65, 0), FreeCAD.Vector(-10, 65, 0)), False)\npocket_sketch.addGeometry(Part.LineSegment(FreeCAD.Vector(-10, 65, 0), FreeCAD.Vector(-10, 0, 0)), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个长方体（长103mm、宽89mm、高44mm）基础体，然后在其顶面挖出一个圆形（半径18mm）的通孔沟槽。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Pocket\")\n# 创建基础长方体\nbody = doc.addObject('PartDesign::Body', 'Body')\nsketch = doc.addObject('Sketcher::SketchObject', 'BaseSketch')\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(103, 0, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(103, 0, 0), FreeCAD.Vector(103, 89, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(103, 89, 0), FreeCAD.Vector(0, 89, 0)), False)\nsketch.addGeometry(Part.LineSegment(FreeCAD.Vector(0, 89, 0), FreeCAD.Vector(0, 0, 0)), False)\nbody.addObject(sketch)\npad = doc.addObject(\"PartDesign::Pad\", \"BasePad\")\npad.Profile = sketch\npad.Length = 44\ndoc.recompute()\n# 创建圆形沟槽草图\npocket_sketch = doc.addObject('Sketcher::SketchObject', 'PocketSketch')\npocket_sketch.addGeometry(Part.Circle(FreeCAD.Vector(19, 10, 0), FreeCAD.Vector(0, 0, 1), 18), False)\npocket_sketch.MapMode = \"FlatFace\"\npocket_sketch.Support = [(doc.getObject(\"BasePad\"), \"Face6\")]  # 顶面\nbody.addObject(pocket_sketch)\n# 创建沟槽特征\npocket = doc.addObject(\"PartDesign::Pocket\", \"Pocket\")\npocket.Profile = pocket_sketch\npocket.Type = 1  # 通孔\ndoc.recompute()\n```"
  },
  {
    "instruction": "你是一位 CAD 代码专家，根据以下自然语言描述生成可运行的 FreeCAD Python 脚本，创建 2D 或 3D 几何形状。脚本要求：1. 仅导入 FreeCAD 和 Part；2. 创建新文档；3. 使用合适的 Part 模块对象（如 Part::Box、Part::Cylinder、Part::Torus 等）构建描述的形状；4. 设置毫米单位；5. 调用 doc.recompute()；6. 脚本需完整正确，放在最后。简要推理尺寸和位置（100 字内），输出脚本在‘```python\n...\n```’中。示例：描述‘100mm长50mm宽的矩形’推理‘2D 矩形，尺寸明确’后输出‘```python\nimport FreeCAD, Part\ndoc = FreeCAD.newDocument(\"Rect\")\nrect = doc.addObject(\"Part::Box\", \"Rect\")\nrect.Length = 100\nrect.Width = 50\nrect.Height = 0\ndoc.recompute()\n```’。",
    "input": "创建一个具有4个变化形状的放样特征，截面之间有形状变化（圆形（半径29mm）到三角形（外接圆半径50mm）到正方形（边长60mm）到六边形（外接圆半径30mm））。",
    "output": "```python\nimport FreeCAD, Part, PartDesign, Sketcher, math\ndoc = FreeCAD.newDocument(\"Loft\")\nbody = doc.addObject('PartDesign::Body', 'Body')\n# 创建圆形截面\nsection1 = doc.addObject('Sketcher::SketchObject', 'Section1')\nsection1.addGeometry(Part.Circle(FreeCAD.Vector(0, 0, 0), FreeCAD.Vector(0, 0, 1), 29), False)\nsection1.Placement.Base = FreeCAD.Vector(0, 0, 0)\nbody.addObject(section1)\n# 创建三角形截面\nsection2 = doc.addObject('Sketcher::SketchObject', 'Section2')\n# 计算顶点\nvertices = []\nfor j in range(3):\n    angle = 2 * math.pi * j / 3\n    x = 50 * math.cos(angle)\n    y = 50 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(3):\n    section2.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 3]), False)\nsection2.Placement.Base = FreeCAD.Vector(0, 0, 30)\nbody.addObject(section2)\n# 创建正方形截面\nsection3 = doc.addObject('Sketcher::SketchObject', 'Section3')\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(-30.0, -30.0, 0), FreeCAD.Vector(30.0, -30.0, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(30.0, -30.0, 0), FreeCAD.Vector(30.0, 30.0, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(30.0, 30.0, 0), FreeCAD.Vector(-30.0, 30.0, 0)), False)\nsection3.addGeometry(Part.LineSegment(FreeCAD.Vector(-30.0, 30.0, 0), FreeCAD.Vector(-30.0, -30.0, 0)), False)\nsection3.Placement.Base = FreeCAD.Vector(0, 0, 60)\nbody.addObject(section3)\n# 创建六边形截面\nsection4 = doc.addObject('Sketcher::SketchObject', 'Section4')\n# 计算顶点\nvertices = []\nfor j in range(6):\n    angle = 2 * math.pi * j / 6\n    x = 30 * math.cos(angle)\n    y = 30 * math.sin(angle)\n    vertices.append(FreeCAD.Vector(x, y, 0))\n# 添加边\nfor j in range(6):\n    section4.addGeometry(Part.LineSegment(vertices[j], vertices[(j+1) % 6]), False)\nsection4.Placement.Base = FreeCAD.Vector(0, 0, 90)\nbody.addObject(section4)\n# 创建放样特征\nloft = doc.addObject(\"PartDesign::AdditiveLoft\", \"Loft\")\nloft.Sections = [section1, section2, section3, section4]\ndoc.recompute()\n```"
  }
]